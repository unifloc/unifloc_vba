'=======================================================================================
'Unifloc 7.51  2025.03                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2025
'
'=======================================================================================
'
'
' Класс для описания характеристик погружного двигателя (как ассинхронного, так и вентильного)
'
Option Explicit
' параметры асинхронного двигателя номинальные
' предполагается что ассинхронный двигатель соединен звездой
' надо будет сделать возможность задания треугольником и сделать вентильные привода
Public log_ As New CLogger                      ' create new log list for each object
Public h_mes_top_m As Double      ' глубина установки ЭЦН (по верхней части)
Public m_kg  As Double            ' масса, кг
Public length_m  As Double        ' установочная длина, м  вместе с гидрозащитой
Public d_od_mm As Double          ' диаметр насоса - габарит
Public manufacturer_name As String
Public name As String
Public source As String           ' источник данных по мотору.0 дефлтный, другой потом
Public dPower_protector_W As Double ' потребление мощности гидрозашитой
Public CS_eff_fr As Double          ' номинальный КПД станции управления УЭЦН
Public Transform_eff_fr As Double   ' номинальный КПД трансформатора УЭЦН
Public dPower_CS_W As Double        ' потребление мощности станцией управления
Public dPower_transform_W As Double ' потребление мощности трансформатором
' параметры из каталога, которые потенциально могут пригодится
Public d_cas_min_mm As Double       ' минимальный диаметр скважины, мм
Public v_liq_min_msec As Double     ' минимально допустимая скорость жидкости для охлаждения, м/с
Private nom_data_ As MOTOR_DATA     ' номинальные параметры двигателя
Private data_ As MOTOR_DATA         ' фактические параметры после расчета
Private cable_ As CABLE_DATA        ' параметры описывающие кабельную систему
' параметры двигателя по схеме замещения
Private lambda_d_ As Double         ' отношение максимального момента к номинальному для АД
Private R1_  As Double              ' активное сопротивление обмотки статора для схемы замещения
Private R2__ As Double              ' активное сопротивление обмотки ротока приведеное к обмотке статора
Private xk_  As Double              ' индуктивное сопротивление обмоток для режима короткого замыкания
Private xi_  As Double
' параметры холостого хода
Private Ix_A_ As Double             ' ток холостого хода
Private cos_phix_d_ As Double       ' коэф мощности при холостом ходе
Private phix_d_ As Double           ' коэф мощности при холостом ходе
Private alpha0 As Double            ' константа рекомендованная в методичке Гридина
Private Ix_cf As Double             ' константа корректировки поправки зависимости Ix от напряжения
 
Private ID_ As Integer
Public U_F_ratio_power As Double
Sub Class_Initialize()
     ' проинициализируем параметры двигателя значениями по  умолчанию, чтобы с ходу можно было счиатать
    length_m = 5
    d_od_mm = 117
    dPower_protector_W = 400
    alpha0 = 0.4  ' константа рекомендованная в методичке Гридина
    xi_ = 1.06
    d_cas_min_mm = 120
    v_liq_min_msec = 0.06
    Ix_cf = 0.4
    CS_eff_fr = 0.97
    Transform_eff_fr = 0.97
    Call set_cable(1)
    U_F_ratio_power = 1
End Sub
Public Sub add_log_msg(msg As String)
    Call log_.add_msg(msg)
End Sub
'============================================
' свойства класса, которые можно читать извне
'============================================
Public Property Get cable() As CABLE_DATA
    cable = cable_
End Property
Public Property Get data() As MOTOR_DATA
    data = data_
End Property
Public Property Get nom_data() As MOTOR_DATA
    nom_data = nom_data_
End Property
Public Property Get nnom_obmin() As Double
' номинальная скорость вращения поля статора
    nnom_obmin = nom_data_.f_Hz * 60
End Property
Public Property Get nnoms_obmin() As Double
' номинальная скорость вращения ротора с учетом проскальзования
    nnoms_obmin = fnoms_Hz * 60
End Property
Public Property Get fnoms_Hz() As Double
' номинальная частота вращения ротора, с учетом проскальзывания
    fnoms_Hz = nom_data_.f_Hz * (1 - nom_data_.s_d)
End Property
Public Property Get OmegaNoms_radsec() As Double
' номинальная частота вращения вала (с учетом проскальзования)
  OmegaNoms_radsec = fnoms_Hz * 2 * const_Pi
End Property
Public Property Get OmegaNom_radsec() As Double
' номинальная синхронная частота вращения вала
  OmegaNom_radsec = nom_data_.f_Hz * 2 * const_Pi
End Property
Public Property Get n_obmin() As Double
' скорость вращения поля статора
    n_obmin = data_.f_Hz * 60
End Property
Public Property Get fs_Hz() As Double
' частота вращения ротора с учетом проскальзования
    fs_Hz = data_.f_Hz * (1 - data_.s_d)
End Property
Public Property Get ns_obmin() As Double
' скорость вращения ротора с учетом проскальзования
    ns_obmin = fs_Hz * 60
End Property
Public Property Get Omega_radsec() As Double
' синхронная угловая частота частота вращения поля при расчетном режиме
  Omega_radsec = data_.f_Hz * (2 * const_Pi)
End Property
Public Property Get Omegas_radsec() As Double
' угловая частота вращения ротора при расчетном режиме
  Omegas_radsec = fs_Hz * (2 * const_Pi)
End Property
' свойства схемы замещения
' параметры c коррекцией на реальные показатели работы
Public Property Get lambda_d() As Double
' отношение максимального момента к номинальному
    lambda_d = lambda_d_
End Property
' индуктивное сопротивление обмоток для режима короткого замыкания, при неподвижном роторе
Public Property Get XK() As Double
' сразу корректируем индуктивность обмотки на частоту
    XK = xk_ * data_.f_Hz / nom_data_.f_Hz
End Property
' активное сопротивление обмотки статора
Public Property Get R1() As Double
    R1 = R1_
End Property
' активное сопротивление обмотки ротора приведенное к обмотке статора
Public Property Get R2_() As Double
    R2_ = R2__
End Property
' расчет  тока холостого хода при произвольном напряжении и частоте
Public Property Get Ix_A() As Double
    Dim UUn_fnf As Double
    Dim Kn As Double
    UUn_fnf = data_.U_phase_V / nom_data_.U_phase_V * nom_data_.f_Hz / data_.f_Hz
    Kn = 1.2786 * UUn_fnf - 0.2689   ' поправка по Гридину для учета намагничивающего тока
    Kn = 1.2786 * UUn_fnf - 0.2786   ' поправка по Гридину для учета намагничивающего тока
    Dim a#, B#, g#
    a = 0.229
    B = 0.988
    g = 0.242
    Kn = (B - (B ^ 2 - 4 * a * (UUn_fnf - g)) ^ 0.5) / 2 / a
    Dim CR As Double
    If Kn < 1 Then   ' после экспериемнтов осталось деление на два участка, если потребуется можно использовать
        CR = Ix_cf
    Else
        CR = Ix_cf
    End If
    Kn = Kn + (Kn - 1) * CR
    
    Ix_A = Kn * Ix_A_ * UUn_fnf
End Property
' оценка момента на холостом ходу
Public Property Get M0_Nm() As Double
  M0_Nm = nom_data_.Mshaft_Nm * (xi_ - 1)
End Property
 ' глубина нижней точки установки
Public Property Get h_mes_down_m() As Double
   h_mes_down_m = h_mes_top_m + length_m
End Property
Public Property Get ID() As Integer
   ID = ID_
End Property
Public Sub set_motor(Optional ByVal M_ID As Integer = 0, _
                     Optional ByVal U_nom_lin_V As Double = 0, _
                     Optional ByVal P_nom_kW As Double = 0, _
                     Optional ByVal f_nom_Hz As Double = 0, _
                     Optional ByVal eff_nom_fr As Double = 0, _
                     Optional ByVal cosphi_nom_fr As Double = 0, _
                     Optional ByVal slip_nom_fr As Double = 0, _
                     Optional ByVal d_od_mm As Double = 0, _
                     Optional ByVal lambda As Double = 0, _
                     Optional ByVal alpha0 As Double = 0, _
                     Optional ByVal xi0 As Double = 0, _
                     Optional Ixcf As Double = 0)
    
    
    If U_nom_lin_V = 0 Then U_nom_lin_V = 1000
    If P_nom_kW = 0 Then P_nom_kW = 10
    If f_nom_Hz = 0 Then f_nom_Hz = 50
    If eff_nom_fr = 0 Then eff_nom_fr = 0.82
    If cosphi_nom_fr = 0 Then cosphi_nom_fr = 0.88
    If slip_nom_fr = 0 Then slip_nom_fr = 0.053
    If d_od_mm = 0 Then d_od_mm = 117
    If lambda = 0 Then lambda = 2.8
    If alpha0 = 0 Then alpha0 = 0.5
    If xi0 = 0 Then xi0 = 1.05
    If Ixcf = 0 Then Ixcf = 0.4
    
    
    ID_ = M_ID
    
    If slip_nom_fr <= 0 Then slip_nom_fr = (1 - motor_rot_speed_default0_rmp(100, 50) / 3000)
    If cosphi_nom_fr <= 0 Then cosphi_nom_fr = motor_cosphi_default0_d(100)
    If eff_nom_fr <= 0 Then eff_nom_fr = motor_eff_default0_d(100)
    
    nom_data_ = set_motor_data_simple_(True, P_nom_kW, U_nom_lin_V, f_nom_Hz, eff_nom_fr, slip_nom_fr, cosphi_nom_fr)
    
    Select Case ID_
        Case 0 ' все параметры константы и не зависят от загрузки
            source = "Unifloc default"
        Case 1 ' параметры заданы оцифрованной характеристикой ЭЦН
            lambda_d_ = 2 ' перегрузочная способность - с потолка экспертно
            source = "Based on catalog curve"
        Case 2
            ' параметры заданы простой схемой замещения
            ' http://wwwcdl.bmstu.ru/fn7/Gridin.pdf
            ' http://old-etr1880.mpei.ru/index.php/electricity/article/view/1053
            source = "Unifloc equivalent circuit"
            Call set_motor_Gridin(lambda, alpha0, xi0, Ixcf)
    End Select
    
    d_cas_min_mm = d_od_mm + 6
    Me.d_od_mm = d_od_mm
    v_liq_min_msec = 0.06
    name = "ПЭД " & nom_data_.Pshaft_kW & "-" & d_od_mm & "-" & U_nom_lin_V
    manufacturer_name = "Generic"
    length_m = 10
    m_kg = 300
End Sub
Private Sub set_motor_Gridin( _
                      ByVal lambda As Double, _
                      ByVal alpha As Double, _
                      ByVal XI As Double, _
                      ByVal Ixcf As Double)
' инициализация двигателя на основе схемы замещения по Гридину
     Dim Inomlin_A As Double
     Dim a As Double
     Dim B As Double
     Dim Rm As Double
     Dim g As Double
     Dim P1n_W As Double  ' потребляемая мощность двигателя
     Dim I1n_A As Double  ' фазный ток
     Dim I2n__A As Double
     Dim phinom As Double
     Dim phi2n As Double
     Dim R2s_ As Double
     
On Error GoTo er1:
        lambda_d_ = lambda
        alpha0 = alpha
        xi_ = XI
        Ix_cf = Ixcf
    
    ' процедура расчета параметров схемы замещения по Гридину
    ' при расчете модели идет расчет на номинальной частоте вращения и номинальном напряжении
     
         With nom_data_
                ' расчитываем показатели схемы замещения. Сначала вспомогательные переменные
                a = alpha0 / xi_ * (1 - .eff_d) / .eff_d * (1 - .s_d) / .s_d - 1
                Rm = 3 * .U_phase_V ^ 2 * (1 - .s_d) / (2 * .Pshaft_kW * 1000 * (lambda_d_ + xi_ - 1))
                g = 1 / .s_d ^ 2 + 2 * a / .s_d + a ^ 2
                B = (lambda_d_ + xi_ - 1) / xi_
                ' далее считаем сопротивления статора и ротора и индуктивность
                R2__ = Rm / g * (B / .s_d + a + ((B / .s_d + a) ^ 2 - g) ^ 0.5)
                R2s_ = R2__ / .s_d
                R1_ = a * R2__
                xk_ = (Rm ^ 2 - 2 * Rm * R1_) ^ 0.5
                ' теперь считаем показатели холостого хода при номинальной частоте вращения
                P1n_W = .Pshaft_kW * 1000 / .eff_d
                I1n_A = P1n_W / (3 * .U_phase_V * .cosphi)    ' оценили номинальный ток, хотя он может быть и задан
                ' найдем ток в обмотке ротока приведенный к обмотке статора
                I2n__A = .U_phase_V / ((R1_ + R2s_) ^ 2 + xk_ ^ 2) ^ 0.5
                phinom = ArcCos(.cosphi)
                phi2n = Atn(xk_ / (R1_ + R2s_))
                Ix_A_ = (I1n_A ^ 2 + I2n__A ^ 2 - 2 * I1n_A * I2n__A * Cos(phinom - phi2n)) ^ 0.5
                cos_phix_d_ = (I1n_A * .cosphi - I2n__A * Cos(phi2n)) / Ix_A_
                phix_d_ = ArcCos(cos_phix_d_)
        End With
     
        Exit Sub
er1:
    Dim msg As String
    msg = "error:CESPMotor:set_motor_Gridin. Gridin set error"
    add_log_msg msg
    Err.Raise kErrESPcalc, , msg
End Sub
Public Sub calc_motor_slip(s As Double, _
                      Optional freq_Hz As Double = 50, _
                      Optional Ulin_V As Double = 1000)
    ' Расчет по схеме замещения в зависимости от проскальзывания
    ' чтобы построить красивый график электромеханической характеристики
    '   в основных расчетах не применяется
    Dim Uf As Double
    
    Uf = Ulin_V / nom_data_.U_lin_V
    
    If Uf < 0.8 Or Uf > 1.2 Then
        add_log_msg "Warning: CESPMotor.calc_motor_slip: Ulin_V / nom_data_.U_lin_V out of range " + CStr(Uf)
    End If
    
    If s = 0 Then
        s = 0.00015
    End If
    data_.U_lin_V = Ulin_V
    data_.U_phase_V = Ulin_V / root3
    If ID = 2 Then
        Call set_motor_data_Gridin_(s, data_.U_phase_V, freq_Hz)
    End If
End Sub
' расчет работы мотора по параметрам напряжения и частоты на поверхности и известному моменту на валу
' или по известному скольжению
Public Sub calc_motor_mom_surf_Nm(Mshaft_Nm As Double, _
                      Optional freq_Hz As Double = -1, _
                      Optional Ulin_surf_V As Double = -1, _
                      Optional slip As Double = -1)
    ' цель этой процедуры - определить параметры ПЭД при заданном напряжении на поверхности
    ' на высокой стороне трансформатора
    ' сложность в падении напряжения в кабельной линии
    ' - кабельная линия будет определять напряжение на ПЭД
    ' которое в свою очередь будет определять ток (при фиксированном моменте на валу)
    ' который в свою очередь, будет определять падение напряжения в кабеле
    ' итого - пытаемся итерациями оценить правильное падение напряжения в кабеле
    
    Dim DU As Double, dU_1 As Double
    Dim Umotor As Double
    Dim I_A As Double
    Dim i As Integer
    
    If Ulin_surf_V <= 0 Then
        Ulin_surf_V = nom_data.U_lin_V
    End If
    If freq_Hz <= 0 Then
        freq_Hz = data_.f_Hz
    End If
    
    i = 0
    '1. предполагаем, что нет падения напряжения сначала
    dU_1 = 0
    Do
        DU = dU_1
        ' 2. оцениваем напряжения на ПЭД
        Umotor = Ulin_surf_V - DU
        ' 3. считаем параметры ПЭД при фиксированном моменте на валу
        If slip < 0 Then
            Call estimate_motor_mom_Nm(Mshaft_Nm, freq_Hz, Umotor)
        Else
            Call calc_motor_slip(slip, freq_Hz, Umotor)
        End If
        I_A = data_.I_lin_A
        ' 4. по получившемуся току определяем падение напряжения на кабеле
        dU_1 = I_A * cable_.R_Omkm * h_mes_top_m / 1000
        i = i + 1
    ' проверяем условие сходимости итерации (или аварийно выходим из цикла, если сходимости нет)
    Loop Until (Abs(dU_1 - DU) < 0.1) Or (i >= 10)
   ' U_motor_V_ = Umotor
    If i = 10 Then log_.add_msg "warning CESPMotor:calc_motor_mom_surf_Nm: iteration limit reached"
    If dU_1 / Ulin_surf_V > 0.8 Then
        log_.add_msg "Warning:CESPMotor:calc_motor_mom_surf_Nm: voltage drop in cable too high. Reduced"
        dU_1 = Ulin_surf_V * 0.8
    End If
    If data_.load_d > 1.3 Then
        log_.add_msg "Warning:CESPMotor:calc_motor_mom_surf_Nm: load " & str(Round(data_.load_d, 3)) & " too high"
        If ID = 1 Then
                Dim msg As String
                msg = "Error:CESPMotor.calc_motor_mom_surf_Nm: motor.ID=1 not compatible with high load > 1.3"
                log_.add_msg msg
                Err.Raise kErrESPcalc, , msg
            
        End If
    End If
    cable_.dU_V = dU_1
    '5 по падению напряжения оценим мощность рассеиваемую кабелем в тепло. учитываем 3 жилы. Тут учитывается полный ток и активный и реактивный
    cable_.dPower_W = 3 * cable_.dU_V * I_A
    '6 найдет мощность электрическую на входе в кабель
    cable_.power_W = data_.Pelectr_kW * 1000 + cable_.dPower_W
    '7. оценим потери мощность в трансформаторе и станции управления
    dPower_transform_W = (1 - CS_eff_fr) * cable_.power_W
    dPower_CS_W = (1 - Transform_eff_fr) * (cable_.power_W + dPower_transform_W)
    data_.power_CS_teor_calc_W = cable_.power_W + dPower_transform_W + dPower_CS_W
    data_.power_CS_calc_W = data_.power_CS_teor_calc_W
    
    data_.eff_full_d = data_.Pshaft_kW * 1000 / data_.power_CS_calc_W
    
End Sub
Private Sub estimate_motor_mom_Nm(Mshaft_Nm As Double, _
                      Optional freq_Hz As Double = 50, _
                      Optional Ulin_V As Double = 1000)
' расчет параметров двигателя при заданном моменте на валу
    Dim load As Double
    Dim s As Double, s1 As Double, s2 As Double
    Dim i As Integer
    Dim pow_mech_kW As Double
    Dim iter_max As Long
    Dim Uf As Double
    Dim a
    Dim mmax As Double
            Dim msg As String
    
    Uf = Ulin_V / nom_data_.U_lin_V
    
    If Uf < 0.8 Or Uf > 1.2 Then
        add_log_msg "Warning:CESPMotor.calc_motor_mom_Nm:  Ulin_V / nom_data_.U_lin_V out of range " + CStr(Uf)
    End If
    
    iter_max = 50
    i = 0
    data_.U_lin_V = Ulin_V
    data_.U_phase_V = Ulin_V / root3
    
    If ID = 2 Then
        a = calc_s_M_krit(Ulin_V, freq_Hz) ' макс граница
        s2 = a(1, 1)
        mmax = a(1, 2)   ' тут получим максимальный момент, который можно достичь
        s1 = 0
        ' дихотомией найдем значение проскальзывания
        ' до 8 итераций обычно надо
        ' можно и быстрее сделать, но потом
        If Mshaft_Nm > 0 And Mshaft_Nm < mmax Then
            Do
                s = (s1 + s2) / 2
                Call set_motor_data_Gridin_(s, data_.U_phase_V, freq_Hz)
                If Mshaft_Nm > data_.Mshaft_Nm Then
                    s1 = s
                Else
                    s2 = s
                End If
                i = i + 1
            Loop Until Abs(Mshaft_Nm - data_.Mshaft_Nm) < 0.01 Or i > iter_max
        Else
            If Mshaft_Nm <= 0 Then
                s = 0
                Call set_motor_data_Gridin_(s, data_.U_phase_V, freq_Hz)
            Else
                msg = "CESPMotor.calc_motor_mom_Nm: method Gridin. torque too high " + CStr(Mshaft_Nm) + " > " + CStr(mmax) + ", probably voltage too low, Uphase = " + CStr(data_.U_phase_V)
                log_.add_msg msg
                Err.Raise kErrESPcalc, , msg
            End If
        End If
       
        If i >= iter_max Then
            msg = "CESPMotor.calc_motor_mom_Nm method Gridin Ошибка при расчете мотора, расчет проскальзования по мощности не сошелся, i =" + CStr(i)
            log_.add_msg msg
            Err.Raise kErrESPcalc, , msg
        End If
        
    ElseIf ID = 1 Then
        data_ = set_motor_data_mom_(Mshaft_Nm, Ulin_V, freq_Hz)
    ElseIf ID = 0 Then
        pow_mech_kW = Mshaft_Nm * (freq_Hz * (1 - nom_data_.s_d) * 2 * const_Pi) / 1000
        
        data_ = set_motor_data_simple_(False, pow_mech_kW, nom_data_.U_lin_V, nom_data_.f_Hz, nom_data_.eff_d, nom_data_.s_d, nom_data_.cosphi)
        
    End If
    
End Sub
Private Function set_motor_data_mom_( _
                                 ByVal mom_Nm As Double, _
                                 ByVal U As Double, _
                                 ByVal f As Double) As MOTOR_DATA
    
    
        ' для расчета всех параметров дефолтного насоса можно использовать характеристики насоса
        Dim d As MOTOR_DATA
        ' correction factors depends on U/Unm
        Dim load As Double
        Dim Eff_cf As Double
        Dim I_cf As Double
        Dim cosphi_cf As Double
        Dim S_cf As Double
        Dim Uf As Double    ' отличие рабочего напряжения от номинального
        Dim FF As Double    ' отличие рабочей частоты от номинальной
        Dim msg As String
            ' оценим загрузку для заданной частоты
        load = mom_Nm / nom_data_.Mshaft_Nm * 100
        FF = f / nom_data_.f_Hz
        Uf = U / nom_data_.U_lin_V * 100
        If Uf < 50 Then
            msg = "CESPMotor.set_motor_data_mom_: voltage too low, Ulin = " + CStr(data_.U_phase_V) + " Unom = " + CStr(nom_data_.U_lin_V)
            log_.add_msg msg
            Err.Raise kErrESPcalc, , msg
        End If
        d.f_Hz = f
        d.U_lin_V = U
        d.U_phase_V = d.U_lin_V / root3
        ' напряжение оценили - возможно надо сделать поправку на напряжение
        
        ' поправочные параметры, рассчитаны на основе рисунка 3.14 из книги Takacs Gabor: ESP Manual
        If Uf = 100 Then
            ' чтобы устранить отличия от 1 поправок присвоем точные значения
            Eff_cf = 1
            I_cf = 1
            cosphi_cf = 1
            S_cf = 1
        Else
            Eff_cf = motor_eff_u_corr(Uf)
            I_cf = motor_I_u_corr(Uf)
            cosphi_cf = motor_cosphi_u_corr(Uf)
            S_cf = motor_slip_u_corr(Uf)
        End If
        
        d.eff_d = motor_eff_default_d(load) * Eff_cf
        d.I_phase_A = motor_current_default_d(load) * I_cf * nom_data_.I_lin_A
        d.s_d = (1 - motor_rot_speed_default_rmp(load, f) / (d.f_Hz * 60)) / S_cf
        If d.s_d < 0 Then d.s_d = 0
        If d.s_d >= 1 Then
            msg = "CESPMotor.set_motor_data_mom_: slip too high " + CStr(d.s_d) + ", probably voltage too low, Uphase = " + CStr(data_.U_phase_V)
            log_.add_msg msg
            Err.Raise kErrESPcalc, , msg
        End If
        d.Mshaft_Nm = mom_Nm
        d.Pshaft_kW = d.Mshaft_Nm * (d.f_Hz * (1 - d.s_d) * 2 * const_Pi) / 1000
        d.Pelectr_kW = d.Pshaft_kW / d.eff_d
        d.cosphi = d.Pelectr_kW * 1000 / (root3 * d.U_lin_V * d.I_phase_A)
        If d.cosphi > 1 Then d.cosphi = 1
        d.I_lin_A = d.I_phase_A
        d.load_d = load / 100
        set_motor_data_mom_ = d
        
End Function
Private Function set_motor_data_simple_(ByVal nom As Boolean, _
                                        ByVal pow_mech_kW As Double, _
                                        ByVal U As Double, _
                                        ByVal f As Double, _
                                        ByVal eff As Double, _
                                        ByVal slip As Double, _
                                        ByVal cosphi As Double) As MOTOR_DATA
    ' задание параметров ПЭД постоянными значениями
    ' nom - флаг - показывает номинальные данные задаются или нет
    ' U - напряжение
    ' F - частота
    ' eff - КПД двигателя
    ' slip - проскальзывание
    ' cosphi - коэффициент мощности
    
    Dim d As MOTOR_DATA
    
    d.f_Hz = f
    d.U_lin_V = U
    d.U_phase_V = d.U_lin_V / root3
    
    d.eff_d = eff
    d.cosphi = cosphi
    d.s_d = slip
    
    d.Pshaft_kW = pow_mech_kW
    If d.eff_d > 0 Then
        d.Pelectr_kW = pow_mech_kW / d.eff_d
    Else
        Dim msg As String
        msg = "Error: CESPMotor.set_motor_data_simple_ eff=0"
        log_.add_msg msg
        Err.Raise kErrESPbase, , msg
    End If
    d.I_phase_A = d.Pelectr_kW / (root3 * U * cosphi / 1000)
    d.I_lin_A = d.I_phase_A
    ' оценим мощность на валу с учетом скольжения и частоты
    d.Mshaft_Nm = d.Pshaft_kW * 1000 / (d.f_Hz * (1 - d.s_d) * 2 * const_Pi)
    
    If nom Then
        d.load_d = 1
    Else
        d.load_d = pow_mech_kW / nom_data_.Pshaft_kW * f / nom_data_.f_Hz '* 100
    End If
    
    set_motor_data_simple_ = d
        
End Function
Private Function motor_rot_speed_default_rmp(load As Double, freq_Hz As Double)
    
    Dim s100 As Double
    Dim k As Double
    s100 = motor_rot_speed_default0_rmp(100, 50)
    k = (3000 - s100) / 3000 / nom_data_.s_d
    motor_rot_speed_default_rmp = (freq_Hz * 60) * (1 - ((freq_Hz * 60) - motor_rot_speed_default0_rmp(load, freq_Hz)) / (freq_Hz * 60) / k)
    
End Function
Private Function motor_rot_speed_default0_rmp(load As Double, freq_Hz As Double)
' вывод параметров стандартного двигателя
' обороты -2.07391E-09    5.66468E-07 -4.70742E-05    -0.004462241    -1.526740367    3012.664336
    Dim l As Double
    Dim SPD As Double
    If load >= 0 Or load < 150 Then
        l = load
        SPD = -0.00000000207391 * l ^ 5 + 0.000000566468 * l ^ 4 - 0.0000470742 * l ^ 3 - 0.004462241 * l ^ 2 - 1.526740367 * l + 3012.664336
        
        motor_rot_speed_default0_rmp = SPD + (freq_Hz * 60 - 3000) - 0.0035 * 3000
    Else
        motor_rot_speed_default0_rmp = 0
    End If
End Function
Private Function motor_current_default_d(load)
' вывод параметров стандартного двигателя
'ток 6.03318E-10 -3.73389E-07    5.7149E-05  0.000128248 0.362600747 36.76223776
    Dim l As Double
    If load >= 0 Or load < 150 Then
        l = load
        motor_current_default_d = 0.000000000603318 * l ^ 5 - 0.000000373389 * l ^ 4 + 0.000057149 * l ^ 3 + 0.000128248 * l ^ 2 + 0.362600747 * l + 36.76223776
        motor_current_default_d = motor_current_default_d / 100
    Else
        motor_current_default_d = 0
    End If
End Function
Private Function motor_cosphi_default_d(load As Double, freq_Hz As Double)
    
    Dim cs100 As Double
    Dim k As Double
    cs100 = motor_cosphi_default0_d(100)
    k = (1 - cs100) / nom_data_.cosphi
    motor_cosphi_default_d = (1 - (1 - motor_cosphi_default0_d(load)) / k)
    
End Function
Private Function motor_cosphi_default0_d(load)
' вывод параметров стандартного двигателя
'коэф мощ    -5.46757E-10    -1.08923E-07    0.000123969 -0.026538059    2.410930241 0.394405594
    Dim l As Double
    If load >= 0 Or load < 150 Then
        l = load
        motor_cosphi_default0_d = -0.000000000546757 * l ^ 5 - 0.000000108923 * l ^ 4 + _
                                    0.000123969 * l ^ 3 - 0.026538059 * l ^ 2 + 2.410930241 * l + 0.394405594
        motor_cosphi_default0_d = motor_cosphi_default0_d / 100
        
        motor_cosphi_default0_d = (motor_cosphi_default0_d + 0.25) / 1.25
        
    Else
        motor_cosphi_default0_d = 0
    End If
End Function
Private Function motor_eff_default_d(load As Double)
    
    Dim e100 As Double
    Dim k As Double
    e100 = motor_eff_default0_d(100)
    k = e100 / nom_data_.eff_d
    motor_eff_default_d = motor_eff_default0_d(load) / k
    
End Function
Private Function motor_eff_default0_d(load)
' вывод параметров стандартного двигателя
'КПД 1.0313E-08  -4.9338E-06 0.000914116 -0.083174452    3.73047825  16.13321678
    Dim l As Double
    If load >= 0 Or load < 150 Then
        l = load
        motor_eff_default0_d = 0.000000010313 * l ^ 5 - 0.0000049338 * l ^ 4 + _
                              0.000914116 * l ^ 3 - 0.083174452 * l ^ 2 + 3.73047825 * l + 16.13321678
        motor_eff_default0_d = motor_eff_default0_d / 100
    Else
        motor_eff_default0_d = 0
    End If
End Function
' ====== расчет по Гридину по П образной схеме замещения
' расчет текущих параметров работы двигателя при заданных частоте и напряжении и при вращении
Private Sub set_motor_data_Gridin_(ByVal s As Double, _
                         ByVal Uph_V As Double, _
                         ByVal Fw_Hz As Double)
     Dim R2_s As Double
     Dim I2_ As Double
     Dim phi2 As Double
     
     With data_
        .s_d = s     ' сохраняем скольжение
        .f_Hz = Fw_Hz
        .U_phase_V = Uph_V
        .U_lin_V = Uph_V * 3 ^ 0.5
        If s < 0.00015 Then
            s = 0.00015
        End If
        R2_s = R2__ / s     ' вычисляем вспомогательный параметр - активное сопротивление обмотки ротора деленное на скольжение
        .Mshaft_Nm = 3 * Uph_V ^ 2 * R2_s / (Fw_Hz * (2 * const_Pi) * ((R1_ + R2_s) ^ 2 + XK ^ 2)) - M0_Nm
        I2_ = Uph_V / ((R1 + R2_s) ^ 2 + XK ^ 2) ^ 0.5
        phi2 = Atn(XK / (R1 + R2_s))
        .I_phase_A = (Ix_A ^ 2 + I2_ ^ 2 + 2 * Ix_A * I2_ * Cos(phix_d_ - phi2)) ^ 0.5
        .I_lin_A = data_.I_phase_A
        .cosphi = (Ix_A * Cos(phix_d_) + I2_ * Cos(phi2)) / .I_phase_A
        .Pelectr_kW = 3 * .U_phase_V * .I_phase_A * .cosphi / 1000
        .Pshaft_kW = .Mshaft_Nm * Fw_Hz * (1 - s) * (2 * const_Pi) / 1000
        .eff_d = .Pshaft_kW / .Pelectr_kW
        .load_d = .Mshaft_Nm / nom_data_.Mshaft_Nm '* 100
    End With
End Sub
' процедура расчета скольжения по заданному моменту на валу двигателя
' функция расчета s для проверки - нигде не используется
Private Function calc_s_d(M_Nm As Double, Uphase_V As Double, f_Hz As Double) As Double
    Dim rs As Double
    Dim s As Double
    
    rs = 3 * (Uphase_V ^ 2) / (2 * (M_Nm + M0_Nm) * f_Hz * 2 * const_Pi) - R1
    s = R2_ / (rs + (rs ^ 2 - (R1 ^ 2 + XK ^ 2)) ^ 0.5)
    Call set_motor_data_Gridin_(s, Uphase_V, f_Hz)
    calc_s_d = s
End Function
Public Function calc_s_M_krit(ByVal Ulin_V As Double, _
                             ByVal f_Hz As Double)
    Dim sk As Double
    data_.f_Hz = f_Hz
    sk = (R2_ / (XK ^ 2 + R1 ^ 2) ^ 0.5)
    Call set_motor_data_Gridin_(sk, Ulin_V / root3, f_Hz)
    
    calc_s_M_krit = array_join(Array(Array(sk, data_.Mshaft_Nm), _
                                     Array("s_crit", "M_shaft_max_Nm")))
End Function
Private Function motor_eff_u_corr(Uf)
    
    Uf = Uf - 2.5
    motor_eff_u_corr = -0.00010442 * (Uf) ^ 2 + 0.020574732 * (Uf) - 0.013469505
End Function
Private Function motor_I_u_corr(Uf)
    Uf = Uf + 2
    motor_I_u_corr = (0.0000333333 * (Uf) ^ 4 - 0.013577778 * (Uf) ^ 3 + 2.093833333 * (Uf) ^ 2 - 144.8529365 * (Uf) + 3891.666667) / 100 - 0.001661
End Function
Private Function motor_cosphi_u_corr(Uf)
    Uf = Uf + 0
    motor_cosphi_u_corr = (0.0000000731957 * (Uf) ^ 4 - 0.0000262041 * (Uf) ^ 3 + 0.00332089 * (Uf) ^ 2 - 0.179141048 * (Uf) + 4.589348453)
    motor_cosphi_u_corr = motor_cosphi_u_corr * (1 - (1 - Uf / 100) * 0.08)
End Function
Private Function motor_slip_u_corr(Uf)
    Uf = Uf + 0
    motor_slip_u_corr = (0.00000204082 * (Uf) ^ 3 - 0.0007138 * (Uf) ^ 2 + 0.084499514 * (Uf) - 2.353571429)
    motor_slip_u_corr = motor_slip_u_corr * (1 + (1 - Uf / 100) * 0.05)
    
End Function
Public Sub set_cable(ByVal cable_type As Integer)
    Select Case cable_type
        Case 0
            ' http://pskovgeokabel.ru/products/1_16/
            cable_.R_Omkm = 0
            cable_.X_Omkm = 0
            cable_.name = "none"
            cable_.Tmax_C = 200
            cable_.manufacturer = "zero"
            cable_.d_mm = 16
        Case 1
            ' http://pskovgeokabel.ru/products/1_16/
            cable_.R_Omkm = 1.18
            cable_.X_Omkm = 0.01
            cable_.name = "cable_1_3x16"
            cable_.Tmax_C = 120
            cable_.manufacturer = "unifloc"
            cable_.d_mm = 16
    End Select
    ' здесь добавить другие марки кабеля при необходимости
    ' потом когда нибудь можно будет и расчет параметров кабеля сделать в термовставку тоже
    cable_.type_num = cable_type
End Sub
Public Sub init_json(json As String, _
                    Optional json_cable As String)
' инициализация двигателя из json строки
' если задан кабель, то используется также
    Dim d As Dictionary
    Dim DC As Dictionary
    
    Set d = ParseJson(json)
    
    If Not IsMissing(json_cable) Then
        If Len(json_cable) > 3 Then
            Set DC = ParseJson(json_cable)
        Else
            Set DC = Nothing
        End If
    End If
    Call init_dictionary(d, DC)
    
End Sub
 
Public Sub init_dictionary(dict As Dictionary, _
                            Optional dict_cable As Dictionary)
' инициализация параметров двигателя из словаря
' если задан кабель, то используется
' Dim ESP_ID As Long
' Dim HeadNom_m As Double
 Dim U_nom_lin_V As Double
 Dim P_nom_kW As Double
 Dim f_nom_Hz As Double
 Dim eff_nom_fr As Double
 Dim cosphi_nom_fr As Double
 Dim slip_nom_fr As Double
 
On Error GoTo err1:
    With dict
        If .Exists("motor_ID") Then
            ID_ = .Item("motor_ID")
        Else
            Dim msg As String
            msg = "CESPMotor.init_dictionary error - wrong input no motor_ID key in motor json"
            Err.Raise kErrESPcalc, , msg
        End If
          
'        If .Exists("U_surf_high_lin_V") Then data_.U_trans_high_V = .Item("U_surf_high_lin_V")
        If .Exists("f_surf_Hz") Then data_.f_Hz = .Item("f_surf_Hz")
        If .Exists("power_fact_kW") Then data_.power_fact_kW = .Item("power_fact_kW")
        
        If .Exists("U_nom_lin_V") Then U_nom_lin_V = .Item("U_nom_lin_V")
        If .Exists("P_nom_kW") Then P_nom_kW = .Item("P_nom_kW")
        If .Exists("F_nom_Hz") Then f_nom_Hz = .Item("F_nom_Hz")
        If .Exists("eff_nom_fr") Then eff_nom_fr = .Item("eff_nom_fr")
        If .Exists("cosphi_nom_fr") Then cosphi_nom_fr = .Item("cosphi_nom_fr")
        If .Exists("slip_nom_fr") Then slip_nom_fr = .Item("slip_nom_fr")
        
        
        If .Exists("d_od_mm") Then d_od_mm = .Item("d_od_mm")
        If .Exists("lambda") Then lambda_d_ = .Item("lambda")
        If .Exists("alpha0") Then alpha0 = .Item("alpha0")
        If .Exists("xi0") Then xi_ = .Item("xi0")
        If .Exists("Ixcf") Then Ix_cf = .Item("Ixcf")
        
        Call set_motor(ID_, U_nom_lin_V, P_nom_kW, f_nom_Hz, eff_nom_fr, cosphi_nom_fr, slip_nom_fr, d_od_mm, _
                    lambda_d_, alpha0, xi_, Ix_cf)
    End With
    
    Call set_cable(0)
    
    If Not IsMissing(dict_cable) Then
        If Not dict_cable Is Nothing Then
            With dict_cable
                If .Exists("cable_R_Omkm") Then cable_.R_Omkm = .Item("cable_R_Omkm")
                If .Exists("cable_X_Omkm") Then cable_.X_Omkm = .Item("cable_X_Omkm")
                If .Exists("cable_t_max_C") Then cable_.Tmax_C = .Item("cable_t_max_C")
                If .Exists("manufacturer") Then cable_.manufacturer = .Item("manufacturer")
                If .Exists("name") Then cable_.name = .Item("name")
                If .Exists("d_mm") Then cable_.d_mm = .Item("d_mm")
                If .Exists("length_m") Then h_mes_top_m = .Item("length_m")
            End With
        End If
    End If
    
    Exit Sub
err1:
    Dim errmsg As String
    errmsg = "Error:CESPpump.init_dictionary: init error " & sDELIM & Err.Description
    add_log_msg errmsg
    Err.Raise kErrESPcalc, Err.source, errmsg
End Sub
Public Function get_result_array(Optional show_log As Boolean = False)
' подготовка массива для вывода в Excel
    Dim arr, arr_name
    With data
        arr = Array(Round(.I_lin_A, 3), _
                    Round(.cosphi, 5), _
                    Round(.eff_full_d, 5), _
                    Round(.s_d, 5), _
                    Round(.Mshaft_Nm, 3), _
                    Round(.Pshaft_kW, 3), _
                    Round(.load_d, 5), _
                    Round(Me.cable.dU_V, 3), _
                    Round(.U_lin_V, 3), _
                    Round(.eff_d, 5), _
                    Me.log_.get_str_safe(show_log))
                    
        arr_name = Array("I_lin_A", "CosPhi_d", "eff_d", "slip", "M_Nm", "Pshaft_kW", "load", "cable_dU_V", "U_motor_V", "eff_motor_fr", "log")
        get_result_array = array_join(Array(arr, arr_name))
    End With
End Function
Public Function get_result_dict(Optional ByVal show_log As Boolean = False)
' подготовка словаря для вывода в json
    Dim resd As Dictionary
    Set resd = New Dictionary
    With data
        resd("I_lin_A") = Round(.I_lin_A, 3)
        resd("CosPhi_d") = Round(.cosphi, 5)
        resd("eff_d") = Round(.eff_d, 5)
        resd("s_d") = Round(.s_d, 5)
        resd("M_Nm") = Round(.Mshaft_Nm, 3)
        resd("Pshaft_kW") = Round(.Pshaft_kW, 3)
        resd("cable_dU_V") = Round(Me.cable.dU_V, 3)
        resd("U_motor_V") = Round(.U_lin_V, 3)
        resd("eff_full_fr") = Round(.eff_full_d, 5)
        resd("load_d") = Round(.load_d, 5)
        If show_log Then resd("log") = Me.log_.get_str_safe(show_log)
    End With
    Set get_result_dict = resd
End Function
Public Function get_result_nom_dict(Optional ByVal show_log As Boolean = False, _
                                    Optional ByVal freq_Hz As Double = 50)
' подготовка словаря для вывода в json
    Dim resd As Dictionary
    Set resd = New Dictionary
    With nom_data
        resd("Pnom_kW") = Round(.Pshaft_kW * freq_Hz / .f_Hz, 3)
        resd("Unom_lin_V") = Round(.U_lin_V * (freq_Hz / .f_Hz) ^ Me.U_F_ratio_power, 3)
        resd("Inom_lin_A") = Round(.I_lin_A, 3)
        resd("Snom_d") = Round(.s_d, 3)
        resd("Mnom_Nm") = Round(.Mshaft_Nm, 3)
        resd("CosPhinom_d") = Round(.cosphi, 3)
        resd("Fnom_Hz") = Round(.f_Hz, 3)
        resd("F_Hz") = Round(freq_Hz, 3)
        resd("length_m") = Round(Me.length_m, 3)
        resd("d_od_mm") = Round(Me.d_od_mm, 3)
        If show_log Then resd("log") = Me.log_.get_str_safe(show_log)
       
    End With
    Set get_result_nom_dict = resd
End Function

