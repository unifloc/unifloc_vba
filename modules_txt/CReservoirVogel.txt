'=======================================================================================
'Unifloc 7.51  2025.03                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2025
'                                                                      good (11/21/2019)
'=======================================================================================
' class describes reservoir properties and IPR
' allows to work with IPR data based on production test data
' use Vogel's correction for IPR with watercut and composite IPR
'
' reference
' 1. Brown, Kermit (1984). The Technology of Artificial Lift Methods. Volume 4.
'    Production Optimization of Oil and Gas Wells by Nodal System Analysis.
'    Tulsa, Oklahoma: PennWellBookss.
' 2. Vogel, J.V. 1968. Inflow Performance Relationships for Solution-Gas Drive Wells.
'    J Pet Technol 20 (1): 83–92. SPE 1476-PA. http://dx.doi.org/10.2118/1476-PA
Option Explicit
'Implements IReservoir
 
Public pi_sm3dayatm As Double
Public p_res_atma As Double
Public fluid As CPVT    ' take bubble point pressure and watercut from fluid
Private IPR_curve_ As CInterpolation
Public Property Get pb_atma() As Double
   pb_atma = fluid.pb_calc_atma
End Property
Public Property Get fw_perc() As Double
   fw_perc = fluid.fw_perc
End Property
 
' IPR curve
' must be generated before access with proper sub
Public Property Get IPRCurve() As CInterpolation
    IPRCurve = IPR_curve_
End Property
 
' ==================================================================
' main calculation functions and subroutines
' ==================================================================
' initialisation sub - set IPR properties from minimal data set
'Public Sub InitProp(p_res_atma, pb_atma, fw_perc, _
'                    Optional rp_m3m3 As Double = -1, _
'                    Optional t_res_C As Double = 90)
'' p_res_atma - reservoir pressure
'' pb_atma   - bubble point pressure
'' fw_perc   - fraction of water in flow (watercut)
'
'    Me.p_res_atma = p_res_atma
'    fluid.pb_atma = pb_atma
'    fluid.fw_perc = fw_perc
'    fluid.t_res_C = t_res_C
'    If rp_m3m3 > 0 Then fluid.rp_m3m3 = rp_m3m3
'End Sub
' initialisation sub - set IPR properties from minimal data set
Public Sub init_from_feed(ByVal p_res_atma As Double, _
                         ByVal feed_json As String, _
                         Optional ByVal pi_sm3dayatm As Double = 1)
' p_res_atma - reservoir pressure
' feed_json  - feed_json includes pb, fw
' pi_sm3dayatm   - productivity index acounted if given
    If feed_json = "" Then feed_json = encode_feed()
    Me.p_res_atma = p_res_atma
    Me.pi_sm3dayatm = pi_sm3dayatm
    fluid.init_feed feed_json
    
End Sub
Public Sub init_json(json As String)
    Dim d As Dictionary
    Set d = ParseJson(json)
         
    'Call InitProp(d("p_res_atma"), d("pb_atma"), d("fw_perc"), d("rp_m3m3"), d("t_res_C"))
    
    Me.p_res_atma = d("p_res_atma")
    Me.pi_sm3dayatm = d("pi_sm3dayatm")
    fluid.init_feed ConvertToJson(d("feed"))
    
End Sub
Public Function calc_t_fluid_C(ByVal pwf_atma As Double)
    Dim dt As Double
    Dim cJT_res As Double
    Dim cJT_pwf As Double
    Dim q As Double
    q = calc_q_liq_sm3day(pwf_atma)
    fluid.q_liq_sm3day = q
    
    Call fluid.calc_PVT(p_res_atma, fluid.t_res_C)
    cJT_res = fluid.cJT_Katm
    Call fluid.calc_PVT(pwf_atma, fluid.t_res_C)
    cJT_pwf = fluid.cJT_Katm
    dt = (p_res_atma - pwf_atma) * cJT_pwf ' (cJT_pwf + cJT_res) / 2
    calc_t_fluid_C = fluid.t_res_C + dt
End Function
' calculate liquid rate from BHP with IPR given
Public Function calc_q_liq_sm3day(ByVal p_wf_atma As Double)
' p_wf_atma - bottom hole pressure
    
    calc_q_liq_sm3day = calc_Q_IPR_m3Day(p_wf_atma, p_res_atma, pb_atma, pi_sm3dayatm, fw_perc)
End Function
'Public Function calc_pwf_json(q) As Double
'    calc_pwf_json = calc_pwf_Ip_res_atma(q, p_res_atma, fluid.pb_atma, pi_sm3dayatm, fluid.fw_perc)
'End Function
' calculate BHP  from liquid rate with IPR given
Public Function calc_p_wf_atma(ByVal qtest As Double)
' qtest - liquid rate
    calc_p_wf_atma = calc_pwf_Ip_res_atma(qtest, p_res_atma, pb_atma, pi_sm3dayatm, fw_perc)
End Function
' calculate BHP  from liquid rate with IPR given
Public Function calc_p_wf_from_feed_atma()
' qtest - liquid rate
    calc_p_wf_from_feed_atma = calc_pwf_Ip_res_atma(fluid.q_liq_sm3day, p_res_atma, pb_atma, pi_sm3dayatm, fw_perc)
End Function
' calculate productivity index by test rate and BHP
Public Function calc_pi_from_feed_sm3dayatm(ByVal q_liq_sm3day As Double, ByVal Ptest As Double)
' qtest  - test liquid rate
' Ptest  - test bottom hole pressure
    calc_pi_from_feed_sm3dayatm = calc_pi_sm3dayatm(q_liq_sm3day, Ptest)
End Function
' calculate productivity index by test rate and BHP
Public Function calc_pi_sm3dayatm(ByVal qtest As Double, ByVal Ptest As Double)
' qtest  - test liquid rate
' Ptest  - test bottom hole pressure
    pi_sm3dayatm = calc_pi_IPR_m3DayAtm(qtest, Ptest, p_res_atma, pb_atma, fw_perc)
    calc_pi_sm3dayatm = pi_sm3dayatm
End Function
' generate IPR curve as CInterpolation object
Public Function Build_IPRcurve() As CInterpolation
    Dim i As Integer
    Dim Qstep As Double
    Dim p_wf As Double
    Dim Qliq_reserv As Double
    Dim maxQ As Double
    Set IPR_curve_ = New CInterpolation
    Const IPRNumPoints = 30
    
    maxQ = calc_q_liq_sm3day(0)
    Qstep = maxQ / IPRNumPoints
    For i = 0 To IPRNumPoints
        p_wf = calc_p_wf_atma(i * Qstep)
        IPR_curve_.AddPoint i * Qstep, p_wf
    Next i
    Set Build_IPRcurve = IPR_curve_
End Function
Public Function get_dict()
    Dim dict As New Dictionary
    
    dict.Add "model", "Vogel"
    dict.Add "p_res_atma", Round(p_res_atma, 5)
    dict.Add "t_res_C", Round(fluid.t_res_C, 5)
    dict.Add "pi_sm3dayatm", Round(pi_sm3dayatm, 5)
'    dict.Add "pb_atma", Round(fluid.pb_atma, 5)
'    dict.Add "fw_perc", Round(fluid.fw_perc, 5)
'    dict.Add "rp_m3m3", Round(fluid.rp_m3m3, 5)
    ' will save feed in IPR
    dict.Add "feed", ParseJson(fluid.feed)
    
    Set get_dict = dict
End Function
Public Function get_json()
    get_json = ConvertToJson(get_dict)
End Function
'' ==============================================================================
'' interface properties and functions implementation
'' ==============================================================================
'
'Private Function IReservoir_CalcPI(ByVal qtest As Double, ByVal Ptest As Double) As Variant
'    IReservoir_CalcPI = calc_pi_sm3dayatm(qtest, Ptest)
'End Function
'
'Private Function IReservoir_CalcPwf(ByVal qtest As Double) As Variant
'    IReservoir_CalcPwf = calc_p_wf_atma(qtest)
'End Function
'
'
'Private Function IReservoir_CalcQliq(ByVal Ptest_atma As Double) As Variant
'    IReservoir_CalcQliq = calc_q_liq_sm3day(Ptest_atma)
'End Function
'
'Private Property Let IReservoir_pi(RHS As Double)
'    pi_sm3dayatm = RHS
'End Property
'
'Private Property Get IReservoir_pi() As Double
'    IReservoir_pi = pi_sm3dayatm
'End Property
'
'Private Property Let IReservoir_Pres(RHS As Double)
'    p_res_atma = RHS
'End Property
'
'Private Property Get IReservoir_Pres() As Double
'    IReservoir_Pres = p_res_atma
'End Property
' =======================================================================
' private vogel's correlation functions
' =======================================================================
Private Function calc_Q_IPR_m3Day(ByVal Ptest As Double, ByVal Pr As Double, _
                          ByVal pb As Double, ByVal pi As Double, ByVal Wc As Double, Optional calc_method As Integer = 1)
    If Ptest >= Pr Then
    ' add_log_msg "Предупреждение. функция calc_Q_IPR_m3Day. тестовое забойное давление " & Ptest & " больше или равно пластового " & Pr & ". дебит 0"
     calc_Q_IPR_m3Day = 0
     Exit Function
    End If
    
    Select Case calc_method
     Case 1
     calc_Q_IPR_m3Day = calc_QliqVogel_m3Day(Ptest, Pr, pb, pi, Wc)
    End Select
End Function
Private Function calc_pwf_Ip_res_atma(ByVal qtest As Double, ByVal Pr As Double, _
                          ByVal pb As Double, ByVal pi As Double, ByVal Wc As Double, Optional calc_method As Integer = 1)
    Select Case calc_method
     Case 1
     calc_pwf_Ip_res_atma = calc_p_wfVogel_atma(qtest, Pr, pb, pi, Wc)
    End Select
End Function
Private Function calc_pi_IPR_m3DayAtm(ByVal qtest As Double, ByVal Ptest As Double, _
                                ByVal Pr As Double, ByVal pb As Double, ByVal Wc As Double, Optional calc_method As Integer = 1)
    If Ptest >= Pr Then
    ' add_log_msg "Ошибка. функция calc_pi_IPR_m3DayAtm. тестовое забойное давление " & Ptest & " больше чем пластовое давление " & Pr & ". расчет продуктивности невозможен"
     calc_pi_IPR_m3DayAtm = -1
     Exit Function
    End If
    
    Select Case calc_method
     Case 1
     calc_pi_IPR_m3DayAtm = calc_PIVogel_m3DayAtm(qtest, Ptest, Pr, pb, Wc)
    End Select
End Function
'Расчет забойного давления по Вогелю с учетом поправки на обводненность
Private Function calc_QliqVogel_m3Day(ByVal P_test As Double, ByVal Pr As Double, _
                          ByVal pb As Double, ByVal pi As Double, ByVal Wc As Double)
 '
 ' Q_test    - дебит жидкости при котором надо определить заб. давл. м3/сут
 ' Pr        - пластовое давление, атм
 ' Pb        - давление насыщения, атм
 ' pi - коэффициент продуктивности, м3/сут/атм
 ' wc        - обводненность, %
 
 Dim qb As Double
 Dim qo_max As Double
 Dim p_wfg As Double
 Dim CG As Double
 Dim cd As Double
 Dim fw As Double
 Dim fo As Double
 
    If P_test < 0 Then
     calc_QliqVogel_m3Day = "P_test<0!"
     Exit Function
    End If
    If Pr < 0 Then
     calc_QliqVogel_m3Day = "Pr<0!"
     Exit Function
    End If
    If pb < 0 Then
     calc_QliqVogel_m3Day = "Pb<0!"
     Exit Function
    End If
    If pi < 0 Then
     calc_QliqVogel_m3Day = "PI<0!"
     Exit Function
    End If
    If Pr < pb Then
     pb = Pr
    End If
    
    ' вычисляем дебит при давлении равном давлению насыщения.
    qb = pi * (Pr - pb)
    If Wc > 100 Then
      Wc = 100
    End If
    If Wc < 0 Then
     Wc = 0
    End If
    
    If (Wc = 100) Or (P_test >= pb) Then
    
      calc_QliqVogel_m3Day = pi * (Pr - P_test)
    
    Else
      fw = Wc / 100
      fo = 1 - fw
      ' максимальный дебит чистой нефти
      qo_max = qb + (pi * pb) / 1.8
    '  Dim pwf_g As Double
      p_wfg = fw * (Pr - qo_max / pi)
      
      If P_test > p_wfg Then
        Dim a As Double: Dim B As Double: Dim c As Double: Dim d As Double
        a = 1 + (P_test - (fw * Pr)) / (0.125 * fo * pb)
        B = fw / (0.125 * fo * pb * pi)
        c = (2 * a * B) + 80 / (qo_max - qb)
        d = (a ^ 2) - (80 * qb / (qo_max - qb)) - 81
        If B = 0 Then
          calc_QliqVogel_m3Day = Abs(d / c)
        Else
          calc_QliqVogel_m3Day = (-c + ((c * c - 4 * B * B * d) ^ 0.5)) / (2 * B ^ 2)
        End If
        
      Else
         CG = 0.001 * qo_max
         cd = fw * (CG / pi) + _
              fo * 0.125 * pb * (-1 + (1 + 80 * ((0.001 * qo_max) / (qo_max - qb))) ^ 0.5)
         calc_QliqVogel_m3Day = (p_wfg - P_test) / (cd / CG) + qo_max
      End If
      
    End If
End Function
' Расчет забойного давления по Вогелю с учетом поправки на обводненность
Private Function calc_p_wfVogel_atma(ByVal Q_test As Double, ByVal Pr As Double, _
                          ByVal pb As Double, ByVal pi As Double, ByVal Wc As Double)
 '
 ' Q_test    - дебит жидкости при котором надо определить заб. давл. м3/сут
 ' Pr        - пластовое давление, атм
 ' Pb  - давление насыщения, атм
 ' pi - коэффициент продуктивности, м3/сут/атм
 ' wc        - обводненность, %
 
 Dim qb As Double
 Dim qo_max As Double
 Dim p_wfg As Double
 Dim CG As Double
 Dim cd As Double
 Dim fw As Double
 Dim fo As Double
 
 'проверка  данных
 
     If Pr < pb Then
      pb = Pr
     End If
     
     If Q_test < 0 Then
      calc_p_wfVogel_atma = "Q<0!"
      Exit Function
     End If
     If Pr <= 0 Then
      calc_p_wfVogel_atma = "Pr<=0!"
      Exit Function
     End If
     If pb < 0 Then
      calc_p_wfVogel_atma = "Pb<0!"
      Exit Function
     End If
     If pi <= 0 Then
      calc_p_wfVogel_atma = "PI<=0!"
      Exit Function
     End If
     
     ' вычисляем дебит при давлении равном давлению насыщения.
     qb = pi * (Pr - pb)
     If Wc > 100 Then
       Wc = 100
     End If
     If Wc < 0 Then
      Wc = 0
     End If
     If (Wc = 100) Or (Q_test <= qb) Or (pb = 0) Then
     
       calc_p_wfVogel_atma = (Pr - Q_test / pi)
       
     Else
       fw = Wc / 100
       fo = 1 - fw
       ' максимальный дебит чистой нефти
       qo_max = qb + (pi * pb) / 1.8
       
       If Q_test < qo_max Then
         
         calc_p_wfVogel_atma = fw * (Pr - Q_test / pi) + _
                     fo * 0.125 * pb * (-1 + (1 - 80 * ((Q_test - qo_max) / (qo_max - qb))) ^ 0.5)
    
       Else
          CG = 0.001 * qo_max
          cd = fw * (CG / pi) + _
               fo * 0.125 * pb * (-1 + (1 + 80 * ((0.001 * qo_max) / (qo_max - qb))) ^ 0.5)
          calc_p_wfVogel_atma = fw * (Pr - qo_max / pi) - (Q_test - qo_max) * (cd / CG)
       End If
     End If
     If calc_p_wfVogel_atma < 0 Then
           calc_p_wfVogel_atma = 0
     End If
End Function
' определение продуктивности по Вогелю с коррекцией на обводненность
Private Function calc_PIVogel_m3DayAtm(ByVal Q_test As Double, ByVal P_test As Double, _
                                ByVal pres As Double, ByVal pb As Double, ByVal Wc As Double)
 
 Dim j As Double
 Dim Q_calibr As Double
 
    If P_test < 0 Then
     P_test = 0
     calc_PIVogel_m3DayAtm = 0
     Exit Function
    End If
     
    If pres < pb Then
     pb = pres
    End If
    
    If Q_test <= 0 Then
     calc_PIVogel_m3DayAtm = 0 ' "Q<=0!"
   '  add_log_msg "calc_PIVogel_m3DayAtm  ошибка Q<=0!"
     Exit Function
    End If
    If P_test <= 0 Then
     calc_PIVogel_m3DayAtm = 0
    ' add_log_msg "calc_PIVogel_m3DayAtm  ошибка P_test<=0!"
     Exit Function
    End If
    If pb < 0 Then
     calc_PIVogel_m3DayAtm = 0
   '  add_log_msg "calc_PIVogel_m3DayAtm  ошибка Pb<0!!"
     Exit Function
    End If
    If pres <= 0 Then
     calc_PIVogel_m3DayAtm = 0
   '  add_log_msg "calc_PIVogel_m3DayAtm  ошибка Pres<=0!"
     Exit Function
    End If
    ' первое приближение для Кпр считаем
    j = Q_test / (pres - P_test)
    ' оцениваем его
    Q_calibr = calc_QliqVogel_m3Day(P_test, pres, pb, j, Wc)
    ' кривая нелинейная надо подбирать значение
    j = j / ((Q_calibr) / Q_test)
    Q_calibr = calc_QliqVogel_m3Day(P_test, pres, pb, j, Wc)
    If Abs(Q_calibr - Q_test) > 0.001 Then Debug.Assert False   ' если сработало, то алгоритм сломался
    calc_PIVogel_m3DayAtm = j
  
End Function
Private Sub Class_Initialize()
    Set fluid = New CPVT
End Sub

