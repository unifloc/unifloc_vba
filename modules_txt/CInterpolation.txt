'=======================================================================================
'Unifloc 7.51  2025.03                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2025
'
'=======================================================================================
'
' класс для хранения и работы с графиками функций y=f(x) заданных в табличном виде
'
' Ver 1.3
' 2019/07/13
' добавлены функции для интерполяциями сплайнами на основе alglib
'
'
' Ver 1.2
' rnt
' обновление для более полного манипулирования графиками
'
'
Option Explicit
Private Type TDPoint    ' тип для хранения точек
    X As Double
    y As Double
    stable As Boolean    ' специальный признак точки - показывает должна ли она сохраняться при преобразовании
End Type
' Поиск решения x при известном y
Public Enum CInterpolation_SOLUTION
    TS_EXTRPOLATION = 0                 ' осуществлять экстраполирование решение
    TS_NO_EXTRPOLATION = 1              ' без экстрополяции
End Enum
Private class_name_ As String              ' имя класса для унифицированной генерации сообщений об ошибках
Private FPoints() As TDPoint            ' исходный массив точек
Private FSolutionPoints() As TDPoint    ' массив точек решений (поиск x при известном y)
Private FStablePoints() As Double       ' массив особых (стабильных) точек, которые сохраняются при трансформации кривой
Private FkPoint As Integer              ' количество точек в массиве
Private FkSolPoints As Integer          ' количество точек решений
Private FkStablePoints As Integer       ' количество стабильных точек
Private FMinY As Double                 ' минимальное значение функции
Private FMaxY As Double                 ' максимальное значение функции
'Public Z As Double                      ' неизвестная переменная - не используется ?
' флаг определяющий является ли функция линейно интерпорлированной или ступенчатой
Public isStepFunction As Boolean
' доп параметры для описания графиков
Public Title As String
Public xName As String
Public yName As String
Public note As String
Public special As Boolean
Private spline_interpolant As Spline1DInterpolant
Private Sub Class_Initialize()
    class_name_ = "CInterpolation"
    xName = "x"
    yName = "y"
    special = False
    Call ClearPoints
    isStepFunction = False  ' по умолчанию - линейно интерполированная
End Sub
Public Function NumStablePoints() As Integer
    NumStablePoints = FkStablePoints
End Function
' свойство возвращает значение стабильной точки по ее номеру, если такая точка есть
Public Function StablePoint(i As Integer) As Double
    If i > 0 And i <= FkStablePoints Then
        StablePoint = FStablePoints(i - 1)
    Else
        Err.Raise kErrcurvestablePointIndex, , "Неверный индекс при считывании стабильных точек кривой CInterpolation"
    End If
End Function
Public Function num_points() As Integer
    num_points = FkPoint
End Function
Public Function pointStable(i As Integer) As Boolean
    If i > 0 And i <= FkPoint Then
        pointStable = FPoints(i - 1).stable
    Else
        Err.Raise kErrCurvePointIndex, , "Неверный индекс при считывании точек Х кривой CInterpolation"
    End If
End Function
Public Function getArray_x()
    Dim arr() As Double
    Dim i As Integer
    Dim num_col As Integer
    
    ReDim arr(LBound(FPoints) To UBound(FPoints))
    For i = LBound(FPoints) To UBound(FPoints)
      arr(i) = Round(FPoints(i).X, const_decimal_output)
    Next i
    getArray_x = arr
End Function
Public Function getArray_y()
    Dim arr() As Double
    Dim i As Integer
    Dim num_col As Integer
    
    ReDim arr(LBound(FPoints) To UBound(FPoints))
    For i = LBound(FPoints) To UBound(FPoints)
      arr(i) = Round(FPoints(i).y, const_decimal_output)
    Next i
    getArray_y = arr
End Function
Public Function getArray_stable()
    Dim arr() As Double
    Dim i As Integer
    Dim num_col As Integer
    
    ReDim arr(LBound(FPoints) To UBound(FPoints))
    For i = LBound(FPoints) To UBound(FPoints)
      arr(i) = FPoints(i).stable
    Next i
    getArray_stable = arr
End Function
Public Function getJson(Optional show_stable As Boolean = False, _
                        Optional only_vector_num As Integer = -1)
    
    Select Case only_vector_num
        Case 1: getJson = ConvertToJson(getArray_x)
        Case 2: getJson = ConvertToJson(getArray_y)
        Case 3: getJson = ConvertToJson(getArray_stable)
        Case Else
            getJson = ConvertToJson(getDict(show_stable))
    End Select
   
    
End Function
Public Function getDictShort(Optional show_stable As Boolean = False)
    Dim d As New Dictionary
    Dim cx As New Collection
    Dim cy As New Collection
    Dim cs As New Collection
    Dim i As Integer
        
    For i = LBound(FPoints) To UBound(FPoints)
        cx.Add Round(FPoints(i).X, const_decimal_output)
        cy.Add Round(FPoints(i).y, const_decimal_output)
        If show_stable Then cs.Add FPoints(i).stable
    Next i
    
    'd.Add "curve_x", xName
    'd.Add "curve_y", yName
    d.Add xName, cx
    d.Add yName, cy
    If show_stable Then d.Add "stable", cs
    Set getDictShort = d
End Function
Public Function getDict(Optional show_stable As Boolean = False, Optional decim_out As Integer = const_decimal_output)
    Dim d As New Dictionary
    Dim cx As New Collection
    Dim cy As New Collection
    Dim cs As New Collection
    Dim i As Integer
        
    For i = LBound(FPoints) To UBound(FPoints)
        cx.Add Round(FPoints(i).X, decim_out)
        cy.Add Round(FPoints(i).y, decim_out)
        If show_stable Then cs.Add FPoints(i).stable
    Next i
    
    d.Add "curve_x", xName
    d.Add "curve_y", yName
    d.Add xName, cx
    d.Add yName, cy
    If show_stable Then d.Add "stable", cs
    Set getDict = d
End Function
Public Function getArray(Optional show_stable As Boolean = False, _
                         Optional transpose As Boolean = False)
  
    Dim arr() As Double
    Dim i As Integer
    Dim num_col As Integer
    
    If show_stable Then
        num_col = 3
    Else
        num_col = 2
    End If
    If transpose Then
        ReDim arr(1 To num_col, LBound(FPoints) To UBound(FPoints))
        For i = LBound(FPoints) To UBound(FPoints)
            arr(1, i) = FPoints(i).X
            arr(2, i) = FPoints(i).y
            If show_stable Then arr(3, i) = FPoints(i).stable
        Next i
    Else
        ReDim arr(LBound(FPoints) To UBound(FPoints), 1 To num_col)
        For i = LBound(FPoints) To UBound(FPoints)
            arr(i, 1) = FPoints(i).X
            arr(i, 2) = FPoints(i).y
            If show_stable Then arr(i, 3) = FPoints(i).stable
        Next i
    End If
    getArray = arr
End Function
Public Function pointX(i As Integer) As Double
    If i > 0 And i <= FkPoint Then
        pointX = FPoints(i - 1).X
    Else
        Err.Raise kErrCurvePointIndex, , "Неверный индекс при считывании точек Х кривой CInterpolation"
    End If
End Function
Public Function PointY(i As Integer) As Double
    If i > 0 And i <= FkPoint Then
        PointY = FPoints(i - 1).y
    Else
        Err.Raise kErrCurvePointIndex, , "Неверный индекс при считывании точек Y кривой CInterpolation"
    End If
End Function
Public Function SolutionPointX(i As Integer) As Double
    If i > 0 And i <= FkSolPoints Then
        SolutionPointX = FSolutionPoints(i - 1).X
    Else
        Err.Raise kErrCurvePointIndex, , "Неверный индекс при считывании точек X решений кривой CInterpolation"
    End If
End Function
Public Function SolutionPointY(i As Integer) As Double
    If i > 0 And i <= FkSolPoints Then
        SolutionPointY = FSolutionPoints(i - 1).y
    Else
        Err.Raise kErrCurvePointIndex, , "Неверный индекс при считывании точек Y решений кривой CInterpolation"
    End If
End Function
Public Function miny() As Double
    miny = FMinY
End Function
Public Function maxy() As Double
    maxy = FMaxY
End Function
Public Function minx() As Double
    If FkPoint = 0 Then minx = 0 Else minx = FPoints(0).X
End Function
Public Function maxx() As Double
    If FkPoint = 0 Then maxx = 0 Else maxx = FPoints(FkPoint - 1).X
End Function
Private Sub FindMinMaxY()
'находит минимальное и максимальное значение функции
Dim i As Integer
If FkPoint > 1 Then
    FMinY = FPoints(LBound(FPoints)).y
    FMaxY = FPoints(LBound(FPoints)).y
    For i = LBound(FPoints) To UBound(FPoints)
        If FPoints(i).y > FMaxY Then FMaxY = FPoints(i).y
        If FPoints(i).y < FMinY Then FMinY = FPoints(i).y
    Next i
End If
End Sub
Private Function getFirstPointNo(ByVal X As Double) As Integer
 Dim i As Integer
 Dim f As Boolean
 
    i = 0
    f = True
    While f
        f = False
        If i < FkPoint - 1 Then
            If X > FPoints(i).X Then
                i = i + 1
                f = True
            End If
        End If
    Wend
    If i = 0 Then i = 1
    getFirstPointNo = i - 1
End Function
Public Function FindSolutions(Yvalue As Double, Optional ByVal with_extrapolation As CInterpolation_SOLUTION = TS_EXTRPOLATION) As Integer
' FindSolutions Функция поиска решений X по известному Y. По умолчанию расчет ведется с линейной экстраполяцией на краях
' @param Yvalue - значение Y
' @param with_extrapolation - производить ли экстраполяцию при расчете
' @return Количество найденных точек
  Dim X1, X2, Y1, Y2 As Double
  Dim X As Double
  Dim i As Integer
  
On Error GoTo err1:
  FkSolPoints = 0  ' assume no soutions
  If UBound(FPoints) = LBound(FPoints) Then  ' если только одна точка то ничего нельзя сделать
        FindSolutions = 0
        Exit Function
  End If
  
  ReDim Preserve FSolutionPoints(FkSolPoints) ' удаляем хранилище точек пересечений
  For i = LBound(FPoints) To UBound(FPoints)
    If i < UBound(FPoints) Then
          If (FPoints(i).y <= Yvalue) And (FPoints(i + 1).y >= Yvalue) Or (FPoints(i).y >= Yvalue) And (FPoints(i + 1).y <= Yvalue) Then    ' must be solution here
              If (FPoints(i).y = Yvalue) And (FPoints(i + 1).y = Yvalue) Then   ' infinite solutions of line segment
                  If FkSolPoints = 0 Then
                      AddPointToSolPoints FPoints(i).X, FPoints(i).y
                  ElseIf FSolutionPoints(FkSolPoints - 1).X <> FPoints(i).X Then ' особенности VBA, чтобы при FkSolPoints = 0 не падало
                      ' особенности VBA,
                      AddPointToSolPoints FPoints(i).X, FPoints(i).y
                  End If
                  
              Else ' one solution
                   X1 = FPoints(i).X
                   X2 = FPoints(i + 1).X
                   Y1 = FPoints(i).y
                   Y2 = FPoints(i + 1).y
                   X = (X2 - X1) / (Y2 - Y1) * (Yvalue - Y1) + X1
                   AddPointToSolPoints X, Yvalue
              End If
          End If
    Else
        If FPoints(i).y = Yvalue Then
            AddPointToSolPoints FPoints(i).X, FPoints(i).y
        End If
    End If
  Next i
  
  If FkSolPoints = 0 And with_extrapolation = TS_EXTRPOLATION Then
        ' проверяем существование y на левом крае
        i = 0
        Y1 = FPoints(i).y
        Y2 = FPoints(i + 1).y
        If ((Yvalue - Y1) * (Y1 - Y2) > 0) Then
             X1 = FPoints(i).X
             X2 = FPoints(i + 1).X
             X = (X2 - X1) / (Y2 - Y1) * (Yvalue - Y1) + X1
             AddPointToSolPoints X, Yvalue
        End If
        ' проверяем существование y на правом крае
        i = UBound(FPoints)
        Y1 = FPoints(i).y
        Y2 = FPoints(i - 1).y
        If ((Yvalue - Y1) * (Y1 - Y2) > 0) Then
             X1 = FPoints(i).X
             X2 = FPoints(i - 1).X
             X = (X2 - X1) / (Y2 - Y1) * (Yvalue - Y1) + X1
             AddPointToSolPoints X, Yvalue
        End If
  End If
  FindSolutions = FkSolPoints
  Exit Function
err1:
            ' унифицированная реакция на ошибочный ввод ключевых параметров класса
        Dim msg As String, fname As String
        fname = "FindSolutions"
        msg = class_name_ & "." & fname & ": error finding solution for" & Yvalue & " = " & s(Yvalue)
        add_log_msg msg
        Err.Raise kErrCInterpolation, class_name_ & "." & fname, msg
End Function
Public Function FindMinOneSolution(Yvalue As Double, Optional ByVal with_extrapolation As CInterpolation_SOLUTION = TS_EXTRPOLATION) As Double
' FindSolutions Функция поиска решений X по известному Y. По умолчанию расчет ведется с линейной экстраполяцией на краях
' @param Yvalue - значение Y
' @param with_extrapolation - производить ли экстраполяцию при расчете
' @return Возвращает искомое решение, если решение одно,возвращает минимальное значения для решения, если значений несколько,
' Вызывает исключение, если решений нет
    Dim points_solve_size As Integer
    
    points_solve_size = FindSolutions(Yvalue, with_extrapolation)
    If (points_solve_size = 1) Then
        FindMinOneSolution = Me.SolutionPointX(1)
    ElseIf (points_solve_size > 1) Then
        FindMinOneSolution = Me.SolutionPointX(1) ' тут надо проверить - что возвращается, сделать возвращение минимального
    Else
        FindMinOneSolution = 0
        'Err.Raise kErrArraySize, , "FindMinOneSolution завершился неудачно, решений нет"
    End If
End Function
Public Function FindMaxOneSolution(Yvalue As Double, Optional ByVal with_extrapolation As CInterpolation_SOLUTION = TS_EXTRPOLATION) As Double
' FindSolutions Функция поиска решений X по известному Y. По умолчанию расчет ведется с линейной экстраполяцией на краях
' @param Yvalue - значение Y
' @param with_extrapolation - производить ли экстраполяцию при расчете
' @return Возвращает искомое решение, если решение одно,возвращает максимальное значения для решения, если значений несколько,
' Вызывает исключение, если решений нет
    Dim points_solve_size As Integer
    
    points_solve_size = FindSolutions(Yvalue, with_extrapolation)
    If (points_solve_size = 1) Then
        FindMaxOneSolution = Me.SolutionPointX(1)
    ElseIf (points_solve_size > 1) Then
        FindMaxOneSolution = Me.SolutionPointX(points_solve_size) ' возвращаем послежнюю точку
    Else
        Err.Raise kErrArraySize, , "FindMaxOneSolution завершился неудачно, решений нет"
    End If
End Function
Private Sub AddPointToSolPoints(ByVal X As Double, ByVal y As Double)
      Dim i As Integer
      If FkSolPoints > 0 Then
        For i = 0 To FkSolPoints - 1
          If FSolutionPoints(i).X = X Then
              ' если точка решения уже есть - перезапишем
              FSolutionPoints(i).y = y
              Exit Sub
          End If
        Next i
      End If
      
      ReDim Preserve FSolutionPoints(FkSolPoints)
      FSolutionPoints(FkSolPoints).X = X
      FSolutionPoints(FkSolPoints).y = y
      FkSolPoints = FkSolPoints + 1
End Sub
Public Function getPoint(ByVal X As Double) As Double
     Dim n As Integer
     Dim X1, X2, Y1, Y2 As Double
     Dim msg As String
    ' интерполирует или экстраполирует значения по кривой - линейно
     getPoint = 0
     If FkPoint < 2 And Not isStepFunction Then
         msg = "CInterpolation.getPoint: error - trying to find intersection with one point line"
         Err.Raise kErrCInterpolation, , msg
        
     End If
     ' если ступенчатая функция - то достаточно только одной точки чтобы получить значение где угодно
     If FkPoint < 1 Then
         msg = "CInterpolation.getPoint: error - trying to find intersection with line without points"
         Err.Raise kErrCInterpolation, , msg
        
     End If
     
     n = getFirstPointNo(X)
     X1 = FPoints(n).X
     Y1 = FPoints(n).y
     
     If FkPoint > 1 Then
        X2 = FPoints(n + 1).X
        Y2 = FPoints(n + 1).y
     Else
        X2 = X1
        Y2 = Y1
     End If
     
     ' делаем проверку - если функция ступенчатая то выдаем не интерполированное значение, а значение в предущей точке
     If isStepFunction Then
        If X >= X2 Then
            getPoint = Y2
        Else
            getPoint = Y1
        End If
     Else
         getPoint = (Y2 - Y1) / (X2 - X1) * (X - X1) + Y1
 End If
End Function
Public Function TestPoint(ByVal X As Double) As Integer
    ' проверяет если точка с заданным аргументом
    '
     Dim i, n As Integer
     
     n = -1
     For i = 0 To FkPoint - 1
        If FPoints(i).X = X Then
            n = i
            Exit For
        End If
     Next i
     TestPoint = n
End Function
Public Sub ClearPoints()
    ReDim FPoints(0)
    ReDim FSolutionPoints(0)
    ReDim FStablePoints(0)
    FkPoint = 0
    FkSolPoints = 0
    FkStablePoints = 0
End Sub
Public Sub AddPointsCurve(ParamArray crv())
' добавляет в кривую все точки из другой кривой
    Dim i As Integer, j As Integer
    Dim crv_local As CInterpolation
        
    For j = LBound(crv) To UBound(crv)
        Set crv_local = crv(j)
        For i = 1 To crv_local.num_points
            Me.AddPoint crv_local.pointX(i), crv_local.PointY(i), crv_local.pointStable(i)
        Next i
    Next j
End Sub
Public Sub AddPoint(ByVal X As Double, ByVal y As Double, Optional isStable As Boolean = False)
    ' добавление точки с сортировкой и обеспечением возрастания аргументов
     Dim i, n As Integer
     Dim CheckMinMaxY As Boolean
     Dim tp As TDPoint
     Dim f As Boolean
     
On Error GoTo err1:
     n = TestPoint(X)
     If n >= 0 Then ' если аргумент уже есть в массиве
        FPoints(n).X = X
        If (FPoints(n).y = FMinY) Or (FPoints(n).y = FMinY) Then
              CheckMinMaxY = True
        Else
              CheckMinMaxY = False
              If y > FMaxY Then FMaxY = y
              If y < FMinY Then FMinY = y
        End If
        FPoints(n).y = y
        FPoints(n).stable = isStable
        If CheckMinMaxY Then Call FindMinMaxY
        Exit Sub
     End If
     
     ReDim Preserve FPoints(FkPoint)
     
     FPoints(FkPoint).X = X
     FPoints(FkPoint).y = y
     FPoints(FkPoint).stable = isStable
     
     ' дальше сортируем точки, чтобы получилось все хорошо
     If (y > FMaxY) Or (FkPoint = LBound(FPoints)) Then FMaxY = y
     If (y < FMinY) Or (FkPoint = LBound(FPoints)) Then FMinY = y
     FkPoint = FkPoint + 1
     If FkPoint > 1 Then
        i = FkPoint - 1
        f = True
        While f
            f = False
            If i > 0 Then
                If FPoints(i - 1).X > FPoints(i).X Then
                    tp = FPoints(i)
                    FPoints(i) = FPoints(i - 1)
                    FPoints(i - 1) = tp
                    i = i - 1
                    f = True
                End If
            End If
        Wend
     End If
     ' в конце перечитаем массив специальных стабильных точек
     Call UpdateStablePointsList
     
      Exit Sub
err1:
            ' унифицированная реакция на ошибочный ввод ключевых параметров класса
        Dim msg As String, fname As String
        fname = "AddPoint"
        msg = class_name_ & "." & fname & ": add error, x = " & s(X) & ": , y = " & s(y)
        add_log_msg msg
        Err.Raise kErrPVTinput, class_name_ & "." & fname, msg
End Sub
' функция которая по признакам точек обновляет массив стабильных точек
Private Sub UpdateStablePointsList()
    Dim i As Integer
    ReDim FStablePoints(0)
    FkStablePoints = 0
    
    ' заполняем массив - первая и последние точки там всегда есть по умолчанию
    For i = 0 To FkPoint - 1
        If FPoints(i).stable Or (i = 0) Or i = (FkPoint - 1) Then
            ReDim Preserve FStablePoints(FkStablePoints)
            FStablePoints(FkStablePoints) = FPoints(i).X
            FkStablePoints = FkStablePoints + 1
        End If
    Next i
End Sub
' метод который позволяет получить кривую с заданным количеством точек
Public Function ClonePointsToNum(num_points As Integer) As CInterpolation
    Dim outCurve As New CInterpolation  ' определили новую кривую
    Dim i As Integer
    Dim xPoint As Double, DX As Double
    Dim NumToAdd As Integer
    Dim AddedStablePoints As Integer
    
    Const eps = 0.01
    
    outCurve.xName = xName
    outCurve.yName = yName
    
    If Me.num_points <= 1 Then
        Dim msg As String
        msg = "CInterpolation.ClonePointsToNum: error - trying to populate one point curve. curve name: " & note
        Err.Raise kErrCInterpolation, , msg
        'Call outCurve.AddPoint(0, 0)
        'Set ClonePointsToNum = outCurve
        'Exit Function
    End If
    ' добавим все стабильные точки в результирующую кривую
    For i = 1 To FkStablePoints
        xPoint = FStablePoints(i - 1)
        outCurve.AddPoint xPoint, getPoint(xPoint)
        If isStepFunction And xPoint > 0 Then outCurve.AddPoint xPoint - eps, getPoint(xPoint - eps)
    Next i
    
    AddedStablePoints = outCurve.num_points
    ' найдем точки равномерного распределения
    NumToAdd = num_points - AddedStablePoints   ' количество точек, которые надо добавить  концы отрезков уже добавлены
    If NumToAdd <= 0 Then
        Set ClonePointsToNum = outCurve
        Exit Function
    End If
    DX = (maxx - minx) / (NumToAdd + 1)      ' приращение - ориетировочное расстояние между точками которые добавляем
    ' добавим недостающие точки
    For i = 1 To NumToAdd
        xPoint = minx + DX * i
        outCurve.AddPoint xPoint, getPoint(xPoint)   ' добавляем точку в выходной массив
    Next i
    ' может так получится, что стабильные точки совпадают
    While outCurve.num_points < num_points And outCurve.num_points > 1
        Call outCurve.DivMaxL
    Wend
    Set ClonePointsToNum = outCurve
End Function
' функция разделяет максимальный отрезок пополам
Public Sub DivMaxL()
    Dim xNew, yNew As Double
    Dim MaxL As Double
    Dim i As Integer, MaxI As Integer
    
    MaxI = 0
    MaxL = 0
    For i = LBound(FPoints) + 1 To UBound(FPoints)
        If MaxL < (FPoints(i).X - FPoints(i - 1).X) Then
            MaxL = (FPoints(i).X - FPoints(i - 1).X)
            MaxI = i
        End If
    Next i
        
    If MaxI > 0 Then
        xNew = FPoints(MaxI - 1).X + (FPoints(MaxI).X - FPoints(MaxI - 1).X) / 2
        yNew = getPoint(xNew)
        AddPoint xNew, yNew
    End If
End Sub
Public Function ConvertPointsToNum(num_points As Integer) As Boolean
' функция преобразует кривую к кривой такой же с заданным количеством точек (пока линейная интерполяция)
    Dim i As Integer
    Dim MaxL As Double
    Dim MaxI As Integer
    Dim xNew As Double, yNew As Double
    
    MaxI = 0
    
    If FkPoint < num_points Then  ' тут надо добавлять точки
        Do
            MaxL = 0
            For i = LBound(FPoints) + 1 To UBound(FPoints)
                If MaxL < (FPoints(i).X - FPoints(i - 1).X) Then
                    MaxL = (FPoints(i).X - FPoints(i - 1).X)
                    MaxI = i
                End If
            Next i
                
            xNew = FPoints(MaxI - 1).X + (FPoints(MaxI).X - FPoints(MaxI - 1).X) / 2
            yNew = getPoint(xNew)
            AddPoint xNew, yNew
            
        Loop Until FkPoint = num_points
        ConvertPointsToNum = True
    Else                        ' тут надо удалять точки
        ConvertPointsToNum = False
    End If
End Function
Public Function transform(Optional ByVal multY As Double = 1, Optional ByVal sumY As Double = 0, _
                          Optional ByVal multX As Double = 1, Optional ByVal sumX As Double = 0) As CInterpolation
' преобразует кривую с использованием линейного преобразования на плоскости
 Dim i As Integer
 Dim crv As New CInterpolation
 
 For i = 0 To FkPoint - 1
    crv.AddPoint FPoints(i).X * multX + sumX, FPoints(i).y * multY + sumY
    'FPoints(i).y = FPoints(i).y * multY + sumY
    'FPoints(i).x = FPoints(i).x * multX + sumX
 Next i
 
 Set transform = crv
End Function
Public Sub loadFromVertRange(ByVal RangX As Variant, _
                    Optional ByVal RangY As Variant)
' функция для чтения range в кривую значений. range читаются по вертикали - значения должны быть в строках - столбец должен быть только один
' должна использоваться для чтения исходных данных с листа
'
    Dim i As Integer
    Dim NumVal As Integer
    Dim X As Double, y As Double
    Dim data_in_1_col As Boolean
    Dim arrx, arry
    
On Error GoTo err1:
    Call ClearPoints
    data_in_1_col = IsMissing(RangY)
    If data_in_1_col Then
        arrx = array_num_from_range(RangX, True)
        NumVal = UBound(arrx, 1)
    Else
        arrx = array_num_from_range(RangX, True)
        arry = array_num_from_range(RangY, True)
        NumVal = MinReal(UBound(arrx, 1), UBound(arry, 1))
        
    End If
    
    If NumVal < 0 Then GoTo err1:
    ' читаем поэлементно, чтобы отсеять пустые ячейки по пути
    On Error GoTo err2:
    For i = 1 To NumVal
        X = arrx(i, 1)
        If data_in_1_col Then
            y = arrx(i, 2)
        Else
            y = arry(i, 1)
        End If
        If (i = 1) Or (X > 0) Then
            If isStepFunction Then
                Me.AddPoint X, y, isStable:=True
            Else
                Me.AddPoint X, y, isStable:=False
            End If
        End If
    Next i
    Exit Sub
    
err1:
    Err.Raise 1, , "CInterpolation.loadFromVertRange: error read range value"
    Exit Sub
    
err2:
    add_log_msg "CInterpolation.loadFromVertRange: warning while read range value " & CStr(i) & " from " & CStr(NumVal)
    Resume Next
    
End Sub
Public Sub load_from_range(range As Variant)
' функция для чтения range [0..N,0..1] в кривую значений.
' должна использоваться для чтения исходных данных с листа
    Dim i As Integer
    Dim NumVal As Integer
    Dim X As Double, y As Double
    Dim arr
    Dim C2
    
    Call ClearPoints
    
    arr = array_num_from_range(range, True)
    
   ' If TypeName(range) = "Range" Then range = range.Value2
    
    ' читаем поэлементно, чтобы отсеять пустые ячейки по пути
    On Error Resume Next
    C2 = UBound(arr, 2)
    If C2 > 2 Then C2 = 2
    For i = LBound(arr, 1) To UBound(arr, 1)
        X = arr(i, 1)
        y = arr(i, C2)
        Me.AddPoint X, y, isStable:=isStepFunction
    Next i
End Sub
Public Sub load_from_dictionary(dict As Dictionary, xkey As String, ykey As String)
' load vector from dictionary
    Dim arr() As Double
    Dim X As Double, y As Double
    Dim i As Integer
    Dim C2
    
    arr = array_num_from_dictionary(dict, xkey, ykey)
    
    On Error Resume Next
    C2 = UBound(arr, 2)
    If C2 > 2 Then C2 = 2
    For i = LBound(arr, 1) To UBound(arr, 1)
        X = arr(i, 1)
        y = arr(i, C2)
        Me.AddPoint X, y, isStable:=isStepFunction
    Next i
  
    
End Sub
Public Sub load_from_collection(coll As Collection)
' функция загрузки из коллекции содержащей двухмерный массив
    Dim i As Integer
    Dim col_len As Integer
    Dim X As Double, y As Double
    
    Call ClearPoints
    
    col_len = coll(1).Count
    For i = 1 To col_len
        X = coll(1)(i)
        y = coll(2)(i)
        Me.AddPoint X, y, isStepFunction
    Next i
End Sub
' cut curve by argument based on arg value
Public Function CutByValue(Optional cut_top_value As Double = 1E+20, _
                           Optional cut_bottom_value As Double = -1E-20) As CInterpolation
                  
            Dim i As Integer
            Dim j As Integer
            Dim FPts() As TDPoint
            
            
            j = 1
            For i = 1 To num_points
                If pointX(i) < cut_top_value And pointX(i) > cut_bottom_value Then
                    If j = 1 And i > 1 And cut_bottom_value < FPoints(i - 1).X Then
                        ReDim Preserve FPts(j)
                        FPts(j - 1).X = cut_bottom_value
                        FPts(j - 1).y = getPoint(cut_bottom_value)
                        FPts(j - 1).stable = False
                        j = j + 1
                    End If
                    
                    ReDim Preserve FPts(j)
                    FPts(j - 1) = FPoints(i - 1)
                    j = j + 1
                                        
                End If
            Next i
            
            If cut_top_value < FPoints(i - 2).X Then
                ReDim Preserve FPts(j - 1)
                FPts(j - 1).X = cut_top_value
                FPts(j - 1).y = getPoint(cut_top_value)
                FPts(j - 1).stable = False
                j = j + 1
            End If
            If j < 3 Then
                Err.Raise kErrCurvePointIndex, , "CInterpolation.CutByValue: too little points after cut = " & CStr(j - 1)
            End If
            FPoints = FPts
            FkPoint = j - 1
            Call UpdateStablePointsList
End Function
Public Function CutByCurve(crv As CInterpolation) As CInterpolation
' обрезание кривой с использованием другой кривой
    Dim i As Integer
    Dim J1, J2 As Integer
    J1 = 0
    J2 = 0
    Dim pcur As New CInterpolation
    Dim crv_min As CInterpolation
    Dim crv_val As Double
    Dim val As Double
    For i = 1 To num_points
        crv_val = crv.getPoint(pointX(i))
        If PointY(i) > crv_val Then
            pcur.AddPoint pointX(i), PointY(i)
            J1 = J1 + 1
        Else
            pcur.AddPoint pointX(i), crv_val
            J2 = J2 + 1
        End If
    Next i
    If J1 > 0 And J2 > 0 Then
        ' for sure there is an intersection - need to find and add it
        Set crv_min = SubtractCurve(crv)
        i = crv_min.FindSolutions(0)
        If i = 1 Then
            val = crv_min.SolutionPointX(1)
        Else
        End If
        ' adding Hdyn point as stable - to make sure to have pretty charts later
        pcur.AddPoint val - 1, MaxReal(crv.getPoint(val - 1), getPoint(val - 1)), isStable:=True
        pcur.AddPoint val, getPoint(val), isStable:=True
    End If
    Set CutByCurve = pcur
End Function
Public Sub FillByTemplate(crv1 As CInterpolation, crv2 As CInterpolation, crv_comb As CInterpolation, ctempl1 As CInterpolation, ctempl2 As CInterpolation)
' fills new curve by values from two others comparing crv_comb with templates
    Dim i As Integer
    Dim xval As Double, yval As Double
    Const eps = 0.001
    For i = 1 To crv_comb.num_points
        xval = crv_comb.pointX(i)
        yval = crv_comb.PointY(i)
        If Abs(yval - ctempl1.getPoint(xval)) < eps Then
            AddPoint xval, crv1.getPoint(xval), crv_comb.pointStable(i)
        ElseIf Abs(yval - ctempl2.getPoint(xval)) < eps Then
            AddPoint xval, crv2.getPoint(xval), crv_comb.pointStable(i)
        End If
    Next i
End Sub
Public Function SubtractCurve(curv As CInterpolation) As CInterpolation
' находит разность двух кривых
    Dim i As Integer
    Dim curve As New CInterpolation
    
    For i = 1 To num_points
        curve.AddPoint pointX(i), PointY(i) - curv.getPoint(pointX(i))
    Next i
    
    For i = 1 To curv.num_points
        curve.AddPoint curv.pointX(i), getPoint(curv.pointX(i)) - curv.PointY(i)
    Next i
    Set SubtractCurve = curve
End Function
' инициализация интерполяции данных
Public Sub init_interpolation(Optional interpolation_type As String = "Linear", _
                              Optional ByVal BoundLType As Long = 0, _
                              Optional ByVal BoundL As Double = 0, _
                              Optional ByVal BoundRType As Long = 0, _
                              Optional ByVal BoundR As Double = 0, _
                              Optional ByVal CRBoundType As Double = 0, _
                              Optional ByVal CRTension As Double = 0)
    
    
    
    Dim xval() As Double
    Dim yval() As Double
    Dim dval() As Double
    Dim NVAL As Long
    
    Dim i As Integer
On Error GoTo err1:
    NVAL = FkPoint
    ReDim xval(NVAL)
    ReDim yval(NVAL)
    ReDim dval(NVAL)
    
    For i = 0 To FkPoint - 1
        xval(i) = FPoints(i).X
        yval(i) = FPoints(i).y
        dval(i) = 0 ' todo - need find a way to specify derivatives
    Next i
    
    Select Case interpolation_type
        Case "Linear"
            If NVAL > 2 Then
                Spline1DBuildLinear xval, yval, NVAL, spline_interpolant
            Else
            End If
        Case "Cubic"
            If NVAL > 2 Then
                Spline1DBuildCubic xval, yval, NVAL, BoundLType, BoundL, BoundRType, BoundR, spline_interpolant
            Else
            End If
        Case "Akima"
            If NVAL > 5 Then
                Spline1DBuildAkima xval, yval, NVAL, spline_interpolant
            Else
            End If
        Case "CatmullRom"
            If NVAL > 2 Then
                Spline1DBuildCatmullRom xval, yval, NVAL, CRBoundType, CRTension, spline_interpolant
            Else
            End If
        Case "Hermite"
            If NVAL > 2 Then
                Spline1DBuildHermite xval, yval, dval, NVAL, spline_interpolant
            Else
            End If
    End Select
    Exit Sub
err1:
            ' унифицированная реакция на ошибочный ввод ключевых параметров класса
        Dim msg As String, fname As String
        fname = "init_interpolation"
        msg = class_name_ & "." & fname & ": spline error, spline type = " & interpolation_type
        add_log_msg msg
        Err.Raise kErrPVTinput, class_name_ & "." & fname, msg
End Sub
' функция для возврата значения интерполированного сплайнами
Public Function get_interpolation_point(ByVal X As Double) As Double
On Error GoTo err1:
  get_interpolation_point = Spline1DCalc(spline_interpolant, X)
  
  Exit Function
err1:
            ' унифицированная реакция на ошибочный ввод ключевых параметров класса
        Dim msg As String, fname As String
        fname = "get_interpolation_point"
        msg = class_name_ & "." & fname & ": spline error, x = " & s(X)
        add_log_msg msg
        Err.Raise kErrPVTinput, class_name_ & "." & fname, msg
End Function

