'=======================================================================================
'Unifloc 7.51  2025.03                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2025
'
'=======================================================================================
'
Option Explicit
' класс для описания свойств пород окружающих скважину на всем протяжении скважины
' задает геотермальный градиент в скважине  (в том числе с учетом зависимости от глубины и например наличия вечной мерзлоты)
' позволяет рассчитать общие коэффициент теплопроводности для различных условий
' необходим для корректного расчета распределения температуры в скважине
'
'
' пока положим эти параметры не зависящими от глубины, хотя потом можно будет поменять
Public therm_cond_form_WmC As Double      ' теплопроводность породы Дж/сек/м/С
Public sp_heat_capacity_form_JkgC As Double        ' удельная теплоемкость породы  specific heat capacity
Public density_formation_kgm3 As Double       ' плотность породы вокруг скважины
' termal conductivity теплопроводность
Public therm_cond_cement_WmC  As Double          ' теплопроводность цемента вокруг скважины
Public therm_cond_tubing_WmC  As Double          ' теплопроводность металла НКТ
Public therm_cond_casing_WmC  As Double          ' теплопроводность металла эксплуатационной колонны
' convective heat transfer coeficients
Public heat_transfer_casing_liquid_Wm2C As Double       ' конвективная теплопередача через затруб с жидкостью  Дж/м2/сек/С
Public heat_transfer_casing_gas_Wm2C As Double       ' теплопередача через затруб с газом (радиационная)
Public heat_transfer_fluid_convection_Wm2C As Double       ' теплопередача конвективная в потоке жидкости
' радиусы для проведения расчета по температуре
' хотя это больше относится к конструкции скважины, но тут удобнее это разместить, тем более что значительного влияния на расчет нет
' в перспективе можно будет перевести в массивы и формировать снаружи
Public rti_m As Double           ' НКТ внутренний
Public rto_m As Double           ' НКТ наружный
Public rci_m As Double           ' Эксп колонна внутренний
Public rco_m As Double           ' Эксп колонна наружный
Public rcem_m As Double          ' Радиус цементного кольца вокруг скважины
Public rwb_m As Double           ' Радиус цементного кольца вокруг скважины
Public t_calc_hr As Double               ' время на которое вычисляется распределение давления
'Private td_d_ As Double                ' безразмерное время расчета
'Private TD_ As Double                  ' безразмерное температура
Public amb_temp_curve As New CInterpolation
Public TGeoGrad_C100m_ As Double
Public h_vert_data_m As Double
Public reservoir_temp_data_C As Double
Public surf_temp_data_C As Double
Public h_dyn_m As Double
Public h_pump_m As Double
Private Sub Class_Initialize()
    ' Зададим параметры по умолчанию
     therm_cond_form_WmC = 2.4252        ' теплопроводность породы Дж/сек/м/С
     sp_heat_capacity_form_JkgC = 200    ' теплоемкость породы
     
     density_formation_kgm3 = 4000       ' плотность породы вокруг скважины
     
     therm_cond_cement_WmC = 6.965       ' теплопроводность цемента вокруг скважины
     therm_cond_tubing_WmC = 32          ' теплопроводность металла НКТ
     therm_cond_casing_WmC = 32          ' теплопроводность металла эксплуатационной колонны
    ' convective heat transfer coeficients
     heat_transfer_casing_liquid_Wm2C = 200        ' конвективная теплопередача через затруб с жидкостью  Дж/м2/сек/С
     heat_transfer_casing_gas_Wm2C = 10            ' теплопередача через затруб с газом (радиационная)
     heat_transfer_fluid_convection_Wm2C = 200     ' теплопередача конвективная в потоке жидкости
     ' радиусы для проведения расчета
     rti_m = 0.06           ' НКТ внутренний
     rto_m = rti_m + 0.01 ' НКТ наружный
     rci_m = 0.124          ' Эксп колонна внутренний
     rco_m = rci_m + 0.01 ' Эксп колонна наружный
     rcem_m = 0.3           ' Радиус цементного кольца вокруг скважины
     rwb_m = 0.3
    
     ' исходные данные по умолчанию, чтобы все считало
     h_vert_data_m = 2500
     reservoir_temp_data_C = 95
     surf_temp_data_C = 25
     t_calc_hr = 10 * 24   ' задаем по умолчанию время расчета распределения температуры через 10 дней
     h_dyn_m = -1
     h_pump_m = -1
     
     amb_temp_curve.AddPoint 0, surf_temp_data_C
     amb_temp_curve.AddPoint h_vert_data_m, reservoir_temp_data_C
     
     TGeoGrad_C100m_ = h_vert_data_m / 100 / (reservoir_temp_data_C - surf_temp_data_C)
     ' не все параметры передаются для изменений снаружи
     ' наверное это имеет смысл поправить
End Sub
' градиент давления от температуры
Public Function amb_temp_grad_Cm(h_vert_m As Double) As Double
    If amb_temp_curve Is Nothing Then
        amb_temp_grad_Cm = TGeoGrad_C100m_ / 100
    Else
        amb_temp_grad_Cm = (amb_temp_curve.getPoint(h_vert_m + 1) - amb_temp_curve.getPoint(h_vert_m)) / 1
    End If
End Function
' температура на глубине
Public Function amb_temp_C(h_vert_m As Double) As Double
    If amb_temp_curve Is Nothing Then
        amb_temp_C = reservoir_temp_data_C + (h_vert_m - h_vert_data_m) * amb_temp_grad_Cm(h_vert_m)
    Else
        amb_temp_C = amb_temp_curve.getPoint(h_vert_m)
    End If
End Function
Private Property Get td_d() As Double
    td_d = therm_cond_form_WmC * t_calc_hr * const_convert_hr_sec / density_formation_kgm3 / sp_heat_capacity_form_JkgC / (rwb_m ^ 2)
End Property
Private Property Get td() As Double
    td = Log(Exp(-0.2 * td_d) + (1.5 - 0.3719 * Exp(-td_d)) * (td_d ^ 0.5))
End Property
Private Function Lr_1m(wt_kgsec As Double, Uto_Jm2secC As Double, Cp_JkgC As Double) As Double
    If wt_kgsec <> 0 Then
        Lr_1m = 2 * const_Pi / (Cp_JkgC * wt_kgsec) * (Uto_Jm2secC * therm_cond_form_WmC / (therm_cond_form_WmC + Uto_Jm2secC * td))
    Else
        Lr_1m = 10000
    End If
End Function
 
' функция расчета градиента температуры
Function calc_dtdl_Cm(h_vert_m As Double, _
                       sinTheta_deg As Double, _
                       T1_C As Double, _
                       w_kgsec As Double, _
                       Cp_JkgC As Double, _
                       Optional dPdL_atmm As Double = 0, _
                       Optional v_ms As Double = 0, _
                       Optional dvdL_msm As Double = 0, _
                       Optional Cj_Catm As Double = 0, _
                       Optional flow_along_coord As Boolean = True)
 ' h_vert_m     -  vertical depth where calculation take place
 ' sinTheta_deg - angle sin
 ' T1_C         - fluid temp at depth gien
 ' W_kgsec      - mass rate of fluid
 ' Cp_JkgC      - heat capasity
 ' dPdL_atmm    - pressure gradient at depth given (needed to account Joule Tompson effect)
 ' v_ms         - velocity of fluid mixture
 ' dvdL_msm     - acceleration of fluid mixture. acount inetria force influence (should be small but ..)
 ' Cj_Catm      - коэффициент Джоуля Томсона Joule Thomson coeficient
 ' flowUp       - flow direction
    Dim Lr As Double
    Dim Uto As Double
    Dim h As Double
    Dim sign As Integer
    ' если потока нет, то берем температуру извне
    ' if mass flow rate is zero - take ambient temp gradient
    If w_kgsec = 0 Then
        calc_dtdl_Cm = amb_temp_grad_Cm(h_vert_m)
        Exit Function
    End If
    ' set Uto - temperature emission depents on well condition
    If h_vert_m > h_pump_m Then
            Uto = Uto_cas_Jm2secC
    ElseIf h_vert_m > h_dyn_m Then
            Uto = Uto_tub_liqcas_Jm2secC
    Else
            Uto = Uto_tub_gascas_Jm2secC
    End If
    
    If flow_along_coord Then
        sign = -1
    Else
        sign = 1
    End If
    
    Lr = Lr_1m(w_kgsec, Uto, Cp_JkgC)
    calc_dtdl_Cm = sign * (T1_C - amb_temp_C(h_vert_m)) * Lr
    calc_dtdl_Cm = calc_dtdl_Cm - (const_g * sinTheta_deg / Cp_JkgC + v_ms / Cp_JkgC * dvdL_msm - Cj_Catm * dPdL_atmm)
End Function
Public Property Get Uto_cas_Jm2secC() As Double
    Uto_cas_Jm2secC = 1 / ( _
                                 Log(rwb_m / rco_m) / therm_cond_cement_WmC + _
                                 Log(rco_m / rci_m) / therm_cond_casing_WmC + _
                                 1 / rci_m / heat_transfer_fluid_convection_Wm2C _
                            )
End Property
 
Public Property Get Uto_tub_liqcas_Jm2secC() As Double
    Uto_tub_liqcas_Jm2secC = 1 / ( _
                                1 * Log(rwb_m / rco_m) / therm_cond_cement_WmC + _
                                1 * Log(rco_m / rci_m) / therm_cond_casing_WmC + _
                                1 / rto_m / (heat_transfer_casing_gas_Wm2C + heat_transfer_casing_liquid_Wm2C) + _
                                1 * Log(rto_m / rti_m) / therm_cond_tubing_WmC + _
                                1 / rti_m / heat_transfer_fluid_convection_Wm2C _
                            )
End Property
Public Property Get Uto_tub_gascas_Jm2secC() As Double
    Uto_tub_gascas_Jm2secC = 1 / ( _
                                1 * Log(rwb_m / rco_m) / therm_cond_cement_WmC + _
                                1 * Log(rco_m / rci_m) / therm_cond_casing_WmC + _
                                1 / rto_m / (heat_transfer_casing_gas_Wm2C) + _
                                1 * Log(rto_m / rti_m) / therm_cond_tubing_WmC + _
                                1 / rti_m / heat_transfer_fluid_convection_Wm2C _
                            )
End Property
Public Sub init_amb_temp_points(ByVal h1 As Double, _
                                ByVal T1 As Double, _
                                ByVal H2 As Double, _
                                ByVal T2 As Double)
                                
    Dim geo_grad_curve As New CInterpolation
    geo_grad_curve.AddPoint h1, T1
    geo_grad_curve.AddPoint H2, T2
    Set Me.amb_temp_curve = geo_grad_curve
End Sub
Public Sub init_amb_temp_arr(ByVal tamb_arr_C, _
                    Optional ByVal tamb_arr_hmes_m)
    
    Dim geo_grad_curve As New CInterpolation
    Dim t As Double
    Dim h As Double
   
    If IsMissing(tamb_arr_hmes_m) Then
        tamb_arr_C = array_num_from_range(tamb_arr_C, True) ' 2d array generated here
        If UBound(tamb_arr_C, 2) > 1 Then
            Call geo_grad_curve.loadFromVertRange(tamb_arr_C) ' read deviation survey from one table
        Else
            t = tamb_arr_C(1, 1)
            geo_grad_curve.AddPoint 0, t
            geo_grad_curve.AddPoint 1000, t
        End If
    ElseIf Not IsMissing(tamb_arr_C) And Not IsMissing(tamb_arr_hmes_m) Then
        Call geo_grad_curve.loadFromVertRange(tamb_arr_hmes_m, tamb_arr_C) ' read deviation survey from two collumns
    End If
    
    ' correction if only one number pre curve have been read
    If geo_grad_curve.num_points = 1 Then
        t = geo_grad_curve.PointY(1)
        h = geo_grad_curve.pointX(1)
        geo_grad_curve.AddPoint h + 1000, t
    End If
    
    Set Me.amb_temp_curve = geo_grad_curve
End Sub
Public Sub set_props_json(json As String)
    Dim dict As Dictionary
    If Len(json) > 3 Then
        Call set_props_dict(dict)
    End If
End Sub
Public Sub set_props_dict(dict As Dictionary)
    Dim val As Double
    With dict
        If .Exists(prm_thermal_conductivity_formation_WmC) Then
            val = .Item(prm_thermal_conductivity_formation_WmC)
            If val > 0 Then therm_cond_form_WmC = val
        End If
        If .Exists(prm_specific_heat_capacity_formation_JkgC) Then 'sp_heat_capacity_form_JkgC = .Item(prm_specific_heat_capacity_formation_JkgC)
            val = .Item(prm_specific_heat_capacity_formation_JkgC)
            If val > 0 Then sp_heat_capacity_form_JkgC = val
        End If
        If .Exists(prm_thermal_conductivity_cement_WmC) Then 'therm_cond_cement_WmC = .Item(prm_thermal_conductivity_cement_WmC)
            val = .Item(prm_thermal_conductivity_cement_WmC)
            If val > 0 Then therm_cond_cement_WmC = val
        End If
        If .Exists(prm_thermal_conductivity_tubing_WmC) Then 'therm_cond_tubing_WmC = .Item(prm_thermal_conductivity_tubing_WmC)
            val = .Item(prm_thermal_conductivity_tubing_WmC)
            If val > 0 Then therm_cond_tubing_WmC = val
        End If
        If .Exists(prm_thermal_conductivity_casing_WmC) Then 'therm_cond_casing_WmC = .Item(prm_thermal_conductivity_casing_WmC)
            val = .Item(prm_thermal_conductivity_casing_WmC)
            If val > 0 Then therm_cond_casing_WmC = val
        End If
        If .Exists(prm_heat_transfer_casing_liquid_Wm2C) Then 'heat_transfer_casing_liquid_Wm2C = .Item(prm_heat_transfer_casing_liquid_Wm2C)
            val = .Item(prm_heat_transfer_casing_liquid_Wm2C)
            If val > 0 Then heat_transfer_casing_liquid_Wm2C = val
        End If
        If .Exists(prm_heat_transfer_casing_gas_Wm2C) Then 'heat_transfer_casing_gas_Wm2C = .Item(prm_heat_transfer_casing_gas_Wm2C)
            val = .Item(prm_heat_transfer_casing_gas_Wm2C)
            If val > 0 Then heat_transfer_casing_gas_Wm2C = val
        End If
        If .Exists(prm_heat_transfer_fluid_convection_Wm2C) Then 'heat_transfer_fluid_convection_Wm2C = .Item(prm_heat_transfer_fluid_convection_Wm2C)
            val = .Item(prm_heat_transfer_fluid_convection_Wm2C)
            If val > 0 Then heat_transfer_fluid_convection_Wm2C = val
        End If
        If .Exists(prm_time_calc_hr) Then 't_calc_hr = .Item(prm_time_calc_hr)
            val = .Item(prm_time_calc_hr)
            If val > 0 Then t_calc_hr = val
        End If
    End With
        
End Sub

