'=======================================================================================
'Unifloc 7.51  2025.03                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2025
'
'=======================================================================================
' class for calc general well production system
' production system includes well and Reservoir (IPR)
' main functions
'           nodal analysis - liquid rate estimation for specific GL condition
'                            either gas injection rate or gas injection pressure
'           gas lift curves_ building - liquid rate vs gas injection rate
'           potential estimation
'                          - liquid production potential with given gas cost function
'                          - minimal gas injection for given liquid rate
Option Explicit
 ' reservoir
 'Public Reservoir As New IReservoir
 'Public well As IWell                       '  can be any CWellESP class with sufficient interface
 ' параметры решения системы
 Public qsol_scm3day As Double
 Public p_wfsol_atma As Double
' набор кривых для описания системы добычи нефти
 Private curves_ As New CCurves     ' коллекция кривых с результатами расчетов
 Public Event ReportProgress(msg As String)
  ' конструктор класса
  ' вызывается при создании класса - гарантирует что все объекты будут созданы
Private Sub Class_Initialize()
   ' создадим объекты скважин чтобы они были готовы
  ' Set fluid_ = New CPVT
  qsol_scm3day = 0
  p_wfsol_atma = 0
End Sub
' =================================================
' properties
' =================================================
' ==================================================
' general fuctions
' ==================================================
Public Function Nodal_Qgas_inj_scm3day()
End Function
Public Sub build_curves()
End Sub
Public Property Get curve(name As String) As CInterpolation
    Set curve = curves_.Item(name)
End Property
 Public Sub BuildNodalWHCurve_pi(Optional Pwh_targ_atma As Double = 1)
'  метод для расчета кривой узлового анализа системы добычи на поверхности для заданной продуктивности
' Pwh_targ_atma целевое значение устьевого давления, которое надо точнее найти
'
' цель построения кривой - иметь возможность по ней восстановить пересечение с заданным значением устьевого давления
' поэтому, чтобы избежать числовой ошибки надо точнее нарисовать кривую около этих точек.
    Dim i As Integer, j As Integer
    Dim Minp_wf As Double, Maxp_wf As Double
    Dim pwf_0 As Double, Pwh_0 As Double
    Dim pwf_1 As Double, Pwh_1 As Double
    Dim pwh_atma As Double
    Dim q As Double, p_wf As Double, p_wfstep As Double, Pintake As Double
    Dim NumIntervals As Integer
    Dim done As Boolean
    Dim PointDone As Boolean
    Dim FirstPointDone As Boolean
    Dim errmsg As String
' On Error GoTo err1:
'    PointDone = False
'    Done = False
'    FirstPointDone = False
'    NumIntervals = 20
'    Minp_wf = 1
'    Maxp_wf = Reservoir.pres * 0.99  ' для максимальной границы расчета берем 0.99 от пластового чтобы не натыкаться на нулевой дебит
' ' первую точку все равно надо считать, сделаем это вне основного цикла
'    p_wf = Maxp_wf
'    curves_("c_p_linQl_curves_").ClearPoints
'    p_wfstep = (Maxp_wf - Minp_wf) / NumIntervals
'    q = Reservoir.calcQliq(p_wf)
'
'  '  Me.q_liq_sm3day = Q
'  '  well.isCalcCasing = False
'    well.qliq = q
'    pwh_atma = well.CalcUp(p_wf, well.PTwf.t_C)
'
'    Pintake = well.PTintake.p_atma           ' вытаскиваем значение из скважины
'    curves_("c_p_linQl_curves_").AddPoint q, pwh_atma
'    pwf_0 = p_wf
'    Pwh_0 = pwh_atma
'    i = 0
'    RaiseEvent ReportProgress("BuildNodalWHCurve_pi: start WH nodal curves_ build for p_lin = " & S(Pwh_targ_atma))
'    Do
'         If Pintake = 1 And i > 0 Then Exit Do
'         p_wf = p_wf - p_wfstep
'         If p_wf < 1 Then p_wf = 1
'         q = Reservoir.calcQliq(p_wf)                          ' нашли точку по индикаторной кривой
'         well.qliq = q                                      ' установили дебит для расчета
'        ' well.isCalcCasing = False
'         pwh_atma = well.CalcUp(p_wf, well.PTwf.t_C)
'         If pwh_atma > 1 Then FirstPointDone = True
'         If pwh_atma > Pwh_targ_atma And p_wf = 1 Then
'         ' значит даже при атмосферном давлении устьевое будет выше необходимого
'             curves_("c_p_linQl_curves_").AddPoint q - 0.0001, pwh_atma
'             curves_("c_p_linQl_curves_").AddPoint q, Pwh_targ_atma
'             Exit Sub
'         End If
'         curves_("c_p_linQl_curves_").AddPoint q, pwh_atma
'
'         RaiseEvent ReportProgress("BuildNodalWHCurve_pi: point i = " & i & ":  p_wf = " & S(p_wf) & ":  Pwh_atma =" & S(pwh_atma))
'
'         ' фиксируем вторую точку
'         pwf_1 = p_wf
'         Pwh_1 = pwh_atma
'         j = 0
'         If isBetween(Pwh_targ_atma, Pwh_0, Pwh_1) Then
'         ' здесь надо точнее найти точку пересения кривой, для этого используем метод дихотомии
'             Do
'                 j = j + 1
'                 p_wf = (pwf_0 + pwf_1) / 2
'                 well.qliq = Reservoir.calcQliq(p_wf)
'                ' well.isCalcCasing = False
'                 pwh_atma = well.CalcUp(p_wf, well.PTwf.t_C)
'                 curves_("c_p_linQl_curves_").AddPoint well.qliq, pwh_atma
'
'                 RaiseEvent ReportProgress("BuildNodalWHCurve_pi: Looking for intersection. Points i = " & i & " j = " & j & ":  p_wf = " & S(p_wf) & ":  Pwh_atma =" & S(pwh_atma))
'
'                 If isBetween(Pwh_targ_atma, Pwh_0, pwh_atma) Then
'                     pwf_1 = p_wf
'                     Pwh_1 = pwh_atma
'                 Else
'                     pwf_0 = p_wf
'                     Pwh_0 = pwh_atma
'                 End If
'             Loop Until j > 100 Or Abs(pwf_1 - pwf_0) < 0.1
'             If FirstPointDone And j < 100 Then Done = True    ' можно вместо  Pwh_atma поставить Pwh_1 и сократить 1 расчет
'        End If
'        pwf_0 = pwf_1
'        Pwh_0 = Pwh_1
'
'        i = i + 1
'    Loop Until i > 100 Or Done
'
'    RaiseEvent ReportProgress("BuildNodalWHCurve_pi: Готово для Рлин = " & S(Pwh_targ_atma))
'
''                Me.q_liq_sm3day = curves_("c_p_linQl_curves_").FindMaxOneSolution(Pwh_targ_atma)
''                p_wf = Reservoir.calc_p_wf_atma(Me.q_liq_sm3day)
''                Pwh_atma = well.calc_plin_p_wf_atma(set_PT(p_wf, well.t_bh_C), CalcCasing:=False)
'
'    Exit Sub
err1:
    errmsg = "CProdSystem_old.BuildNodalWHCurve_pi: Ошибка при построении кривой узлового анализа на устье " & sDELIM & Err.Description
    RaiseEvent ReportProgress("CProdSystem_old.BuildNodalWHCurve_pi: ошибка какая то: " & errmsg)
'    Err.Raise Err.Number, Err.Source, Err.Description
    Err.Raise kErrBuildCurve, Err.source, errmsg
 End Sub
 Public Sub calc_nodal(ByVal plin_atma As Double)
  ' поиск решения задачи узлового анализа по заданной продуктивности скважины
 '
 Dim errmsg As String
 On Error GoTo err1:
'    Dim num_points As Integer
'    Call BuildNodalWHCurve_pi(plin_atma)          'после построения кривой можно найти параметры
'    num_points = curves_("c_p_linQl_curves_").FindSolutions(plin_atma)
'    If num_points >= 1 Then
'        qsol_scm3day = curves_("c_p_linQl_curves_").FindMaxOneSolution(plin_atma)
'        p_wfsol_atma = Reservoir.calcPwf(qsol_scm3day)
'    Else
'        qsol_scm3day = 0
'        p_wfsol_atma = Reservoir.calcPwf(qsol_scm3day)
'    End If
'
'    Exit Sub
err1:
    errmsg = "CProdSystem_old.calc_Nodal_pi: Nodal solution error " & sDELIM & Err.Description
    RaiseEvent ReportProgress("CProdSystem_old.calc_Nodal_pi: Решение не найдено:" & errmsg)
'    Err.Raise Err.Number, Err.Source, Err.Description
    Err.Raise kErrNodalCalc, Err.source, errmsg
 End Sub

