'=======================================================================================
'Unifloc 7.51  2025.03                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2025
'
'=======================================================================================
' Расчеты многофазного поток
' Расчет корреляции Ансари
Option Explicit
Const c_p = 0.000009871668    ' переводной коэффициент
Public Function unf_GasGradient(ByVal arr_d_m As Double, _
                                  ByVal arr_theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal qg_rc_m3day As Double, _
                                  ByVal Mug_rc_cP As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  ByVal p_atma As Double, _
                                  Optional calibr_grav As Double = 1, _
                                  Optional calibr_fric As Double = 1)
    ' gas gradient - for gaslift and annulus calculations
    
    ' for start - simplest estimation without friction and other
    Dim dPdLg_out_atmm As Double
    Dim dPdLf_out_atmm As Double
    Dim dPdLa_out_atmm As Double
    Dim vsl_msec As Double
    Dim vsg_msec As Double
    Dim Ap_m2 As Double
    Dim Hl_out_fr As Double
    Dim fpat_out_num As Double
    Dim n_Re As Double, roughness_d As Double, f_n As Double
    
    vsl_msec = 0
    Ap_m2 = const_Pi * arr_d_m ^ 2 / 4
    Hl_out_fr = 0
    vsl_msec = 0
    vsg_msec = const_conver_sec_day * qg_rc_m3day / Ap_m2
    fpat_out_num = 101 ' " gas" = gas
  
    'Calculate normalized friction factor
    n_Re = 1000 * rho_grc_kgm3 * vsg_msec * arr_d_m / Mug_rc_cP
    roughness_d = eps_m / arr_d_m
    f_n = unf_friction_factor(n_Re, roughness_d)
    
    dPdLg_out_atmm = rho_grc_kgm3 * const_g * const_convert_Pa_atma * Sin(arr_theta_deg * const_Pi / 180)
    dPdLf_out_atmm = const_convert_Pa_atma * f_n * rho_grc_kgm3 * vsg_msec ^ 2 / (2 * arr_d_m) 'calculate pressure gradient due to friction
    dPdLa_out_atmm = 0
    
    unf_GasGradient = Array(dPdLg_out_atmm * calibr_grav + dPdLf_out_atmm * calibr_fric, _
                            dPdLg_out_atmm * calibr_grav, _
                            dPdLf_out_atmm * calibr_fric, _
                            dPdLa_out_atmm, _
                            vsl_msec, _
                            vsg_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
End Function
 
Public Function unf_AnsariGradient(ByVal arr_d_m As Double, _
                                  ByVal arr_theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal ql_rc_m3day As Double, ByVal qg_rc_m3day As Double, _
                                  ByVal Mul_rc_cP As Double, ByVal Mug_rc_cP As Double, _
                                  ByVal sigma_l_Nm As Double, _
                                  ByVal rho_lrc_kgm3 As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  ByVal p_atma As Double, _
                                  Optional calibr_grav As Double = 1, _
                                  Optional calibr_fric As Double = 1)
  
     Dim dPdLg_out_atmm As Double
     Dim dPdLf_out_atmm As Double
     Dim Hl_out_fr As Double
     Dim fpat_out_num
     Dim dPdLa_out_atmm As Double
     Dim dPdL_out_atmm As Double
     Dim pgf_out_atmm As Double
     Dim pge_out_atmm As Double
     Dim pga_out_atmm As Double
     Dim pgt_out_atmm As Double
    
     ' znlf - calculates zero net liquid flow - gas flow through liquid column
     '=================
     
     Dim roughness_d As Double
     Dim Ap_m2 As Double ' площадь трубы
     Dim lambda_l   As Double
     Dim vsl_msec As Double, vsg_msec As Double
     Dim flow_pattern As Integer
     Dim IERR
     Dim ang1 As Double
     Dim timeStamp
     
     timeStamp = Time()
On Error GoTo err1:
     roughness_d = eps_m / arr_d_m
     Ap_m2 = const_Pi * arr_d_m ^ 2 / 4
     If ql_rc_m3day = 0 Then
        lambda_l = 1
     Else
         lambda_l = ql_rc_m3day / (ql_rc_m3day + qg_rc_m3day)
     End If
     vsl_msec = const_conver_sec_day * ql_rc_m3day / Ap_m2
     vsg_msec = const_conver_sec_day * qg_rc_m3day / Ap_m2
     ang1 = arr_theta_deg
     If arr_theta_deg < 0 Then
        ' Ansari not working for downward flow
        add_log_msg "AnsariGradient: arr_theta_deg = " & arr_theta_deg & " negative. Ansari not for downward flow. Angle inverted"
        arr_theta_deg = -arr_theta_deg
     End If
     If arr_theta_deg < 75 Then
        ang1 = 75
     '   add_log_msg "AnsariGradient: arr_theta_deg = " & arr_theta_deg & " less than 75 degrees. 75 used for calc"
     End If
     If arr_theta_deg > 90 Then
        ang1 = 90
        add_log_msg "AnsariGradient: arr_theta_deg = " & arr_theta_deg & " greater than 90 degrees. 90 deg used for calc"
     End If
     Call Ansari(ang1, arr_d_m, roughness_d, p_atma, vsl_msec, vsg_msec, lambda_l, _
                        rho_grc_kgm3, rho_lrc_kgm3, Mug_rc_cP, Mul_rc_cP, _
                        sigma_l_Nm, _
                        Hl_out_fr, pgf_out_atmm, pge_out_atmm, pga_out_atmm, pgt_out_atmm, fpat_out_num)
      
     dPdL_out_atmm = (pge_out_atmm * Sin(arr_theta_deg * const_Pi / 180) / Sin(ang1 * const_Pi / 180) + pgf_out_atmm + pga_out_atmm)
     dPdLg_out_atmm = pge_out_atmm * Sin(arr_theta_deg * const_Pi / 180) / Sin(ang1 * const_Pi / 180)
     dPdLf_out_atmm = pgf_out_atmm
     dPdLa_out_atmm = pga_out_atmm
      
               Select Case fpat_out_num
                  Case " liq": fpat_out_num = 100 ' " liq" = liquid
                  Case " gas": fpat_out_num = 101 ' " gas" = gas
                  Case "anul": fpat_out_num = 105 ' "anul" = annular
                  Case "dbub": fpat_out_num = 104 ' "dbub" = dispersed bubble
                  Case "slug": fpat_out_num = 103 ' "slug" = slug
                  Case "bubl": fpat_out_num = 102 ' "bubl" = bubbly
                  Case "  na": fpat_out_num = 199
              End Select '(fpat)
      
      
    unf_AnsariGradient = Array(dPdLg_out_atmm * calibr_grav + dPdLf_out_atmm * calibr_fric, _
                                dPdLg_out_atmm * calibr_grav, _
                                dPdLf_out_atmm * calibr_fric, _
                                dPdLa_out_atmm, _
                                vsl_msec, _
                                vsg_msec, _
                                Hl_out_fr, _
                                fpat_out_num)
    Exit Function
err1:
    add_log_msg Err.Description
    unf_AnsariGradient = "error"
End Function
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     comprehensive mechanistic model for pressure gradient, liquid
'     holdup and flow pattern predictions
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari
'     revised by,    tuffp                  last revision: november 89
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine calculates two phase liquid holdup, flow pattern
'     and pressure gradient using the mechanistic approach developed from
'     the separate models for flow pattern prediction and flow behavior
'     prediction of the individual flow patterns. the english system of
'     units is used for the input data but converted to si units for the
'     subsequent calculations.
'                               reference
'                               ---------
'     1.  ansari, a. m., " mechanistic model for two-phase upward flow."
'         m.s thesis, the university of tulsa (1988).
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'     ioerr = output file for error messages when input values passed
'             to the subroutine are out of range or error occurs in
'             the calculation.
'                          subsubroutines called
'                          ------------------
'     upfpdet = this subroutine predicts flow pattern only for upward
'               flow using taitel, barnea, & dukler model.
'     single = this subroutine calculates pressure gradient for single
'              phase flow of liquid or gas.
'     bubble = this subroutine calculates pressure gradient both for
'              dispersed bubble and bubbly flows.
'     slug   = this subroutine calculates pressure gradient for slug
'              flow.
'     anmist = this subroutine calculates pressure gradient for
'              annular-mist flow.
'                       variable description
'                       --------------------
'     *ang   = angle of flow from horizontal. (deg.)
'      angr  = angle of flow from horizontal. (rad)
'     *deng  = gas density. (lbm/ft^3)
'     *denl  = liquid density. (lbm/ft^3)
'     *di    = inside pipe diameter. (m)
'      e     = liquid holdup fraction.
'     *ed    = relative pipe roughness.
'     *ens   = no-slip liquid holdup fraction.
'      fpat  = flow pattern, (chr)
'                 " liq" = liquid
'                 " gas" = gas
'                 "bubl" = bubbly
'                 "slug" = slug
'                 "dbub" = dispersed bubble
'                 "anul" = annular
'     *p     = pressure. (psia)
'      pga   = acceleration pressure gradient. (psi/ft)
'      pge   = elevation pressure gradient. (psi/ft)
'      pgf   = friction pressure gradient. (psi/ft)
'      pgt   = total pressure gradient. (psi/ft)
'     *surl  = gas-liquid surface tension. (dynes/cm)
'     *visg  = gas viscosity. (cp)
'     *visl  = liquid viscosity. (cp)
'     *vm    = mixture velocity. (ft/sec)
'      vsg   = superficial gas velocity. (ft/sec)
'      vsl   = superficial liquid velocity. (ft/sec)
'      (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub Ansari(ang#, di_m#, ed#, p_atma#, vsl_m3sec#, vsg_m3sec#, ens#, deng_kgm3#, denl_kgm3#, _
                   visg#, visl#, surl#, e#, pgf#, pge#, pga#, pgt#, fpat, _
            Optional ByVal znlf As Boolean = False)
    '     --------------------------------
    '     initialize the output variables.
    '     --------------------------------
    e = 0#
    pgf = 0#
    pge = 0#
    pga = 0#
    pgt = 0#
    fpat = "    "
    '     --------------------------------------
    '     convert input variables into si units.
    '     --------------------------------------
    Dim angr As Double, p_Pa As Double
    angr = ang * 3.1416 / 180#
    p_Pa = p_atma * 101325# '/ 14.7
    visg = visg * 0.001
    visl = visl * 0.001
    '     ------------------------------------------
    '     check for single phase gas or liquid flow.
    '     ------------------------------------------
    If (ens > 0.99999) Then '        single phase liquid flow.
        fpat = " liq"
        Call single1(angr, di_m, ed, vsl_m3sec, denl_kgm3, visl, p_Pa, pgf, pge, pga, pgt)
        e = 1#
    ElseIf (ens < 0.00001) And Not znlf Then        '        single phase gas flow.
        fpat = " gas"
        Call single1(angr, di_m, ed, vsg_m3sec, deng_kgm3, visg, p_Pa, pgf, pge, pga, pgt)
        e = 0#
    Else
        '        -----------------------------------------------------------
        '        determine flow pattern using taitel, barnea & dukler model.
        '        -----------------------------------------------------------
        Call fpup(vsl_m3sec, vsg_m3sec, di_m, ed, denl_kgm3, deng_kgm3, visl, visg, ang, surl, fpat)
        If (fpat = "anul") Then '           annular-mist flow exists.
            Call anmist(angr, di_m, ed, denl_kgm3, deng_kgm3, visl, visg, vsl_m3sec, vsg_m3sec, _
                               surl, fpat, e, pgf, pge, pga, pgt)
            If (fpat = "slug") Then '              annular flow not confirmed. slug flow persists.
                Call slug(angr, di_m, ed, denl_kgm3, deng_kgm3, visl, visg, vsl_m3sec, vsg_m3sec, _
                                    surl, e, pgf, pge, pga, pgt)
            End If
        ElseIf (fpat = "slug") Then '           slug flow exists.
            Call slug(angr, di_m, ed, denl_kgm3, deng_kgm3, visl, visg, vsl_m3sec, vsg_m3sec, _
                             surl, e, pgf, pge, pga, pgt)
        ElseIf (fpat = "bubl" Or fpat = "dbub") Then '           bubble flow exists.
            Call bubble(angr, di_m, ed, denl_kgm3, deng_kgm3, visl, visg, vsl_m3sec, vsg_m3sec, _
                                   surl, fpat, e, pgf, pge, pga, pgt)
        Else
            fpat = "  na"
            Err.Raise kErrGradcalc, , "ansari: error in flow pattern detection"
            Exit Sub
        End If
    End If
    '     -----------------------------------------------------------
    '     convert pressure gradients and diameter into english units.
    '     -----------------------------------------------------------
    pge = pge / 101325#
    pgf = pgf / 101325#
    pga = pga / 101325#
    pgt = pgt / 101325#
    visg = visg * 1000#
    visl = visl * 1000#
L999:
End Sub
Private Sub anmist(angr#, Di#, ed#, denl#, deng#, visl#, visg#, vsl#, vsg#, surl#, fpat, e#, pgf#, pge#, pga#, pgt#)
    
    Dim nf As Double
    Dim NC As Double
    '     --------------------------------------
    '     calculate fe using wallis correlation.
    '     --------------------------------------
    Dim X As Double, fe As Double
    Dim c As Double
    Dim alfc As Double, vsc#, denc#, visc#, recs#, ffcs#, rels#, ffls#, relf#, fflf#, a#
    Dim pgfcs#, pgfls#, xm2#, xmo2#, ym#
    Dim deldmx#, deldmn#, deldac#, deld#, ec#, phic2#, phif2#
    
    X = (deng / denl) ^ 0.5 * 10000# * vsg * visg / surl
    fe = 1# - Exp(-0.125 * (X - 1.5))
    If (fe <= 0#) Then fe = 0#
    If (fe >= 1#) Then fe = 1#
    '     -----------------------------------------------------------
    '     use appropriate correlation factor for interfacial friction
    '     according to the entrainment fraction.
    '     -----------------------------------------------------------
    If (fe > 0.9) Then
        c = 300# '        use wallis correlation factor.
    Else
        c = 24# * (denl / deng) ^ (1# / 3#) '        use whalley correlation factor.
    End If
    '     ---------------------------------------------------
    '     calculate superficial pressure gradients for entire
    '     liquid and gas-liquid core.
    '     ---------------------------------------------------
    alfc = 1# / (1# + fe * vsl / vsg)
    vsc = vsg + fe * vsl
    denc = deng * alfc + denl * (1# - alfc)
    visc = visg * alfc + visl * (1# - alfc)
    recs = denc * vsc * Di / visc
    ffcs = unf_friction_factor(recs, ed, 2) / 4  '  Fanning friction factor required
    rels = denl * vsl * Di / visl
    ffls = unf_friction_factor(rels, ed, 2) / 4  '  Fanning friction factor required
    If (fe < 0.9999) Then
        relf = denl * vsl * (1 - fe) * Di / visl
        fflf = unf_friction_factor(relf, ed, 2) / 4  '  Fanning friction factor required
        a = (1# - fe) ^ 2 * (fflf / ffls)
    Else
        a = 1#
    End If
     
    pgfcs = 4# * ffcs * denc * vsc * vsc / (2# * Di)
    pgfls = 4# * ffls * denl * vsl * vsl / (2# * Di)
    '     --------------------------------------------------------
    '     calculate modified lockhart and martinelli parameters as
    '     defined by alves including entrainment fraction.
    '     --------------------------------------------------------
    xm2 = pgfls / pgfcs
    xmo2 = xm2 * a
    ym = 9.81 * Sin(angr) * (denl - denc) / pgfcs
    '     ------------------------------------------------------------
    '     calculate film thickness if entrainment is less than 99.99%.
    '     ------------------------------------------------------------
    If (fe < 0.9999) Then
        deldmx = 0.499
        deldmn = 0.000001
        deldac = 0.000001
        deld = itsafe(xmo2, ym, c, 0#, 0#, 0#, 4, deldmn, deldmx, deldac)
        '        ----------------------------------------------
        '        check whether annular flow could exist or not.
        '        ----------------------------------------------
        ec = 1# - alfc
        Call chkan(xmo2, ym, deld, ec, e, fpat)
        If (fpat = "slug") Then
            '            -----------------------------------------------------
            '            annular flow not confirmed by barnea"s criteria. slug
            '            flow continues to exist.
            '            -----------------------------------------------------
            Exit Sub
        End If
        '        ------------------------------------------------------
        '        calculate dimensionless groups defined by alves.
        '        ------------------------------------------------------
        phic2 = (1# + c * deld) / (1# - 2# * deld) ^ 5
        phif2 = (phic2 - ym) / xm2
    Else
        '        ------------------------------------------------------
        '        assume 100 % entrainment and therefore no liquid film.
        '        ------------------------------------------------------
        fe = 1#
        deld = 0#
        phic2 = 1#
        phif2 = 0#
        e = 1# - alfc
        If (e > 0.12) Then
            fpat = "slug"
            Exit Sub
        End If
    End If
    '     -----------------------------------------
    '     calculate pressure gradients in the core.
    '     -----------------------------------------
    Dim pgec#, pgfc#, pgtc#, pgef#, pgff#, pgtf#
    pgec = 9.81 * denc * Sin(angr)
    pgfc = pgfcs * phic2
    pgtc = pgec + pgfc
    '     -----------------------------------------
    '     calculate pressure gradients in the film.
    '     -----------------------------------------
    pgef = 9.81 * denl * Sin(angr)
    pgff = pgfls * phif2
    pgtf = pgef + pgff
    '     --------------------------------------------------------------
    '     assume core pressure gradients to be the gradients for annular
    '     flow pattern. the total pressure gradient can be that of film
    '     or core.
    '     --------------------------------------------------------------
    pge = pgec
    pgf = pgfc
    pgt = pgtc
    pga = 0#
    
End Sub
'================================================ Ansari =======================================================================
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     mechanistic model for pressure gradient in single phase (liquid
'     or gas) flow.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari     last revision: march 1989
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine calculates single phase pressure gradient using
'     simple mechanistic approach. an explicit equation developed by
'     zigrang and sylvester is used for friction factor.the si system
'     of units is used.
'                       variable description
'                       --------------------
'     *angr  = angle of flow from horizontal. (rad)
'     *den   = density of liquid or gas. (kg/cum)
'     *di    = inside pipe diameter. (m)
'     *ed    = relative pipe roughness.
'      ekk   = kinetic energy term used to determine if critical flow
'              exists.
'      ff    = friction factor.
'      icrit = critical flow indicator (0-noncritical, 1-critical)
'      ierr  = error code. (0=ok, 1=input variables out of range,
'              2=extrapolation of correlation occurring)
'     *ioerr = output file for error messages when input values
'              passed to the subroutine are out of range.
'     *p     = pressure. (pa)
'      pga   = acceleration pressure gradient. (pa/m)
'      pge   = elevation pressure gradient. (pa/m)
'      pgf   = friction pressure gradient. (pa/m)
'      pgt   = total pressure gradient. (pa/m)
'      re    = reynolds number for liquid or gas.
'     *vis   = viscosity. of liquid or gas (kg/m-s)
'     *v     = velocity. of liquid or gas (m/s)
'      (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub single1(angr#, Di#, ed#, V#, den#, vis#, p#, pgf#, pge#, pga#, pgt#)
    Dim Re As Double, FF As Double
    Dim ekk As Double
    
    pge = den * Sin(angr) * 9.81 '     calculate elevation pressure gradient.
    If V > 0 Then
        Re = Di * den * V / vis
        FF = unf_friction_factor(Re, ed, 2) '     calculate frictional pressure gradient.
    Else
        FF = 0
    End If
    pgf = 0.5 * den * FF * V * V / Di
    ekk = den * V * V / p
    If (ekk > 0.95) Then ekk = 0.95
    pgt = (pge + pgf) / (1# - ekk)
    pga = pgt * ekk '     calculate accelerational pressure gradient.
    pgt = (pge + pgf)
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     mechanistic model for pressure gradient and liquid holdup in
'     bubble flow.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari     last revision: march 1989
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine calculates liquid holdup and pressure gradient
'     both for dispersed bubble and bubbly flows using a mechanistic
'     approach. for dispersed bubble flow the subroutine assumes no
'     slippage, whereas for bubbly flow slippage is considered between
'     the two phases. an explicit equation developed by zigrang and
'     sylvester is used for friction factor. the si system of units is
'     used.
'                               references
'                               ----------
'     1.  ansari, a. m. and sylvester, n. d., " a mechanistic model for
'         upward bubble flow in pipes ", aiche j., 8, 34, 1392-1394,
'         (aug 1988).
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'                       variable description
'                       --------------------
'     *angr  = angle of flow from horizontal. (rad)
'      den   = slip / no-slip density (kg/cum)
'     *deng  = gas density. (kg/cum)
'     *denl  = liquid density. (kg/cum)
'      df    = derivative of the function used in newton-raphson method.
'     *di    = inside pipe diameter. (m)
'      e     = liquid holdup fraction.
'      eacc  = accuracy required in iteration for e.
'     *ed    = relative pipe roughness.
'      emax  = upper limit for e during iteration.
'      emin  = lower limit for e during iteration.
'      ens   = no-slip liquid holdup fraction.
'      emin  = lower limit for e during iteration.
'      f     = function defined for newton-raphson method.
'      ff    = friction factor
'      fpat  = flow pattern, (chr)
'                 "dbub" = dispersed bubble
'                 "bubl" = bubbly
'      ierr  = error code. (0=ok, 1=input variables out of range,
'              2=extrapolation of correlation occurring)
'     *ioerr = output file for error messages when input values
'              passed to the subroutine are out of range.
'      pga   = acceleration pressure gradient. (pa/m)
'      pge   = elevation pressure gradient. (pa/m)
'      pgf   = friction pressure gradient. (pa/m)
'      pgt   = total pressure gradient. (pa/m)
'      re    = reynolds number.
'     *visg  = gas viscosity. (kg/m-s)
'     *visl  = liquid viscosity. (kg/m-s)
'      visns = no-slip viscosity. (kg/m-s)
'      vs    = slip velocity (m/s)
'     *vsg   = superficial gas velocity. (m/s)
'     *vsl   = superficial liquid velocity. (m/s)
'      (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub bubble(angr#, Di#, ed#, denl#, deng#, visl#, visg#, vsl#, vsg#, surl#, fpat, e#, pgf#, pge#, pga#, pgt#)
    '     --------------------------------------
    '     calculate slip and no-slip parameters.
    '     --------------------------------------
    Dim ens#, visns#, vs#
    ens = vsl / (vsl + vsg)
    visns = visl * ens + visg * (1# - ens)
    vs = 1.53 * (surl * 9.81 * (denl - deng) / denl ^ 2) ^ 0.25
    If (fpat = "dbub") Then
        e = ens '        dispersed  bubble flow exists, calculate no-slip holdup.
    Else
        '        --------------------------------------------------
        '        bubbly flow exists, calculate actual liquid holdup
        '        using function itsafe for iteration.
        '        --------------------------------------------------
        Dim emin#, EMAX#, eacc#
        emin = ens
        EMAX = 0.999
        eacc = 0.001
        e = itsafe(vsl, vsg, vs, 0#, 0#, 0#, 1, emin, EMAX, eacc)
    End If
    '     --------------------------------------
    '     calculate elevation pressure gradient.
    '     --------------------------------------
    Dim den#
    den = denl * e + deng * (1# - e)
    pge = den * Sin(angr) * 9.81
    '     ---------------------------------------
    '     calculate frictional pressure gradient.
    '     ---------------------------------------
    Dim Re#, FF#
    Re = den * (vsl + vsg) * Di / visns
    FF = unf_friction_factor(Re, ed, 2)
    pgf = 0.5 * den * FF * (vsl + vsg) ^ 2 / Di
    '     ---------------------------------------------------------
    '     calculate total pressure gradient neglecting acceleration
    '     component.
    '     ---------------------------------------------------------
    pga = 0#
    pgt = pge + pgf + pga
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     mechanistic model for pressure gradient and liquid holdup in
'     slug flow.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari       last revision: nov 1988
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine calculates liquid holdup and pressure gradient
'     for slug flow based on the flow mechanics. the concept of develop-
'     ing slug flow adopted by e.f. caetano is incorporated in the model.
'     the si system of units is used.
'                               references
'                               ----------
'     1.  sylvester, n. d., " a mechanistic model for two-phase
'         vertical slug flow in pipes ", asme j.energy resources tech.,
'         vol. 109,(1987),206-213.
'     2.  caetano, e. f., " upward vertical two-phase flow through an
'         annulus ",phd dissertation, the university of tulsa (1985)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                       variable description
'                       --------------------
'     alfacc = accuracy required in iteration for alftb.
'     alfls  = void fraction in liquid slug.
'     alfns  = no-slip void fraction in liquid slug.
'     alfmax = upper limit for alftb during iteration.
'     alfmin = lower limit for alftb during iteration.
'     alftb  = av. void fraction in taylor bubble for a developed flow or
'              the local void fraction at the bubble tail for a develop-
'              ing slug flow.
'     alftba = av.void fraction in taylor bubble for a developing flow.
'     alftbn = void fraction in taylor bubble at nusselt thickness.
'     alfsu  = void fraction in slug unit for developed slug flow.
'    *angr   = angle of flow from horizontal. (rad)
'     beta   = ratio of ltb and lsu.
'     delacc = accuracy required in iteration for deln. (m)
'     delmax = upper limit for deln during iteration. (m)
'     delmin = lower limit for deln during iteration. (m)
'     deln   = nusselt film thickness. (m)
'    *deng   = gas density. (kg/cum)
'    *denl   = liquid density. (kg/cum)
'     denns  = no-slip density. (kg/cum)
'     dens   = slip density. kg.cum)
'    *di     = inside pipe diameter. (m)
'     e      = liquid holdup fraction.
'     esu    = liquid holdup fraction for a slug unit.
'    *ed     = relative pipe roughness.
'     ff     = friction factor
'     ffls   = friction factor for liquid slug.
'     ind    = indicator for the flow,
'                0 = developed flow.
'                + = developing flow.
'     lc     = length of taylor bubble cap in developing slug flow.(m)
'     lls    = length of liquid slug. (m)
'     lsu    = length of slug unit for developed slug flow. (m)            slug
'     lsua   = length of slug unit for developing slug flow. (m)
'     ltb    = length of taylor bubble in developed slug flow. (m)
'     ltba   = length of taylor bubble in developing slug flow. (m)
'     pga    = acceleration pressure gradient. (pa/m)
'     pgels  = elevation pressure gradient for liquid slug. (pa/m)
'     pgfls  = friction pressure gradient for liquid slug. (pa/m)
'     pgt    = total pressure gradient. (pa/m)
'     rels   = reynolds number for liquid slug.
'     vgls   = velocity of gas in liquid slug. (m/s)
'     vgtb   = velocity of gas in taylor bubble. (m/s)
'    *visg   = gas viscosity. (kg/m-s)
'    *visl   = liquid viscosity. (kg/m-s)
'     visns  = no-slip viscosity. (kg/m-s)
'     vlls   = velocity of liquid in  liquid slug. (m/s)
'     vltb   = velocity of liquid in taylor bubble. (m/s)
'     vmls   = velocity of mixture in liquid slug. (m/s)
'     vs     = slip velocity. (m/s)
'    *vsg    = superficial gas velocity. (m/s)
'     vsgls  = superficial gas velocity in liquid slug. (m/s)
'    *vsl    = superficial liquid velocity. (m/s)
'     vslls  = superficial liquid velocity in liquid slug. (m/s)
'     c,f and df are dummy variables.
'     (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub slug(angr#, Di#, ed#, denl#, deng#, visl#, visg#, vsl#, vsg#, surl#, e#, pgf#, pge#, pga#, pgt#)
    
    Dim lls As Double
    Dim lsu As Double
    Dim ltb As Double
    Dim ltb1 As Double
    Dim ltb2 As Double
    Dim LC As Double
    Dim msg As String
    Dim ind As Integer, c#, d#, f#, h#, alftba#, alfsu#, esu#, dens#, pgels#
    Dim vtb#, vs#, alfls#, alfmin#, alfmax#, alfacc#, alftb#, vltb#, vlls#, vgls#, vgtb#, beta1#, Beta2#, beta#, g_#, delmin#, delmax#, delacc#, deln#, alftbn#, vgtbn#, vltbn#
    '     -----------------------------------------------
    '     assume lls to be 30 times the diameter of pipe.
    '     -----------------------------------------------
    lls = 30# * Di
    '     -----------------------------------------------------
    '     calculate void fraction in taylor bubble using itsafe
    '     and assuming developed slug flow.
    '     -----------------------------------------------------
    vtb = 1.2 * (vsl + vsg) + 0.35 * Sqr(9.81 * Di * (denl - deng) / denl)
    vs = 1.53 * (9.81 * surl * (denl - deng) / denl ^ 2) ^ 0.25
    alfls = vsg / (0.425 + 2.65 * (vsl + vsg))
    alfmin = 0.7
    alfmax = 0.9999
    alfacc = 0.000001
    alftb = itsafe(vsl, vsg, vtb, vs, alfls, Di, 2, alfmin, alfmax, alfacc)
    '     --------------------------------
    '     calculate additional parameters.
    '     --------------------------------
    vltb = 9.916 * Sqr(9.81 * Di * (1# - Sqr(alftb)))
    vlls = vtb - (vtb + vltb) * (1# - alftb) / (1# - alfls)
    vgls = 1.2 * (vsl + vsg) + 1.53 * (9.81 * surl * (denl - deng) / denl ^ 2) ^ 0.25 * (1# - alfls) ^ 0.5
    If (alfls > 0.25) Then vgls = vlls
    vgtb = vtb * (1# - alfls / alftb) + vgls * alfls / alftb
    beta1 = (vlls * (1# - alfls) - vsl) / (vltb * (1# - alftb) + vlls * (1# - alfls))
    Beta2 = (vsg - alfls * vgls) / (alftb * vgtb - alfls * vgls)
    If (Abs(beta1 - Beta2) > 0.1) Then
        msg = "   slug: error in beta conv."
        GoTo L999
    End If
    beta = (beta1 + Beta2) / 2#
    If (beta <= 0# Or beta >= 1#) Then
        msg = "   slug: unreal value for beta"
        GoTo L999
    End If
    lsu = lls / (1# - beta)
    ltb = lsu - lls
    '     ---------------------------------------------------------
    '     calculate nusselt film thickness iteratively using itsafe
    '     ---------------------------------------------------------
    g_ = visl / (9.81 * (denl - deng))
    delmin = 0.00001
    delmax = 0.499 * Di
    delacc = 0.000001
    deln = itsafe(Di, vtb, vgls, vsl, vsg, g_, 3, delmin, delmax, delacc)
    '     --------------------------------------------------------
    '     calculate lc using the values of the parameters at deln.
    '     --------------------------------------------------------
    alftbn = (1# - 2# * deln / Di) ^ 2
    vgtbn = (vtb * alftbn - (vtb - vgls) * alfls) / alftbn
    vltbn = (vgtbn * alftbn - (vsl + vsg)) / (1# - alftbn)
    LC = (vltbn + vtb) ^ 2 / (2# * 9.81)
    '     ---------------------------------
    '     check for the nature of the flow.
    '     ---------------------------------
    If (LC > (0.75 * ltb)) Then
        '        --------------------------------------------------------
        '        developing slug flow exists. calculate new values for
        '        slug flow parameters starting with the length of
        '        taylor  bubble by solving a quadratic equation.
        '        --------------------------------------------------------
        ind = 1
        c = (vsg - vgls * alfls) / vtb
        d = 1# - vsg / vtb
        e = vtb - vlls
        f = (-2# * d * c * lls - 2# * (e * (1# - alfls)) ^ 2 / 9.81) / d ^ 2
        g_ = (c * lls / d) ^ 2
        h = f * f - 4# * g_
        If (h <= 0#) Then
            msg = "   slug: error in solving for ltb"
            GoTo L999
        End If
        ltb1 = (-f + Sqr(h)) / 2#
        ltb2 = (-f - Sqr(h)) / 2#
        If (ltb1 <= 0# And ltb2 <= 0#) Then
            msg = "   slug: error in ltb root"
            GoTo L999
        End If
        If (ltb1 > ltb2) Then ltb = ltb1
        If (ltb2 > ltb1) Then ltb = ltb2
        alftba = 1# - 2# * (vtb - vlls) * (1# - alfls) / Sqr(2# * 9.81 * ltb)
        lsu = ltb + lls
        beta = ltb / lsu
    Else
        '     ---------------------------------------------------------------
        '     developed slug flow exists. no new values of the parameters are
        '     required.
        '     ---------------------------------------------------------------
        ind = 0
    End If
    '     ----------------------------------------
    '     calculate liquid holdup for a slug unit.
    '     ----------------------------------------
    alfsu = alftb * beta + alfls * (1# - beta)
    If (ind = 1) Then alfsu = alftba * beta + alfls * (1# - beta)
    esu = 1# - alfsu
    '     -----------------------------------------------------
    '     calculate elevation pressure gradient for liquid slug
    '     using its slip density.
    '     -----------------------------------------------------
    dens = denl * (1# - alfls) + deng * alfls
    pgels = 9.81 * Sin(angr) * dens
    '     -----------------------------------------------------------
    '     calculate elevation pressure gradient for taylor  bubble
    '     using its average void fraction.
    '     -----------------------------------------------------------
    Dim pgetb#, vslls#, vsgls#, vmls#, alfns#, visns#, rels#, ffls#, pgfls#
    If (ind = 1) Then
        pgetb = 9.81 * Sin(angr) * (deng * alftba + denl * (1 - alftba))
    Else
        pgetb = 9.81 * Sin(angr) * deng
    End If
    '     --------------------------------------------------
    '     calculate frictional pressure gradient for liquid
    '     slug.
    '     --------------------------------------------------
    vslls = vlls * (1# - alfls)
    vsgls = vgls * alfls
    vmls = vslls + vsgls
    alfns = vsgls / vmls
    visns = visl * (1# - alfns) + visg * alfns
    rels = dens * vmls * Di / visns
    ffls = unf_friction_factor(rels, ed, 2)
    pgfls = dens * vmls ^ 2 * ffls / (2# * Di)
    pga = 0#    '     acceleration pressure gradient over a slug unit is zero.
    '     ---------------------------------------------------------
    '     assume constant pressure gradients and holdup for all the
    '     slug units within one pipe increment.
    '     ---------------------------------------------------------
    e = esu
    pge = pgels * (1# - beta) + pgetb * beta
    pgf = pgfls * (1# - beta)
    pgt = pge + pgf + pga
    Exit Sub
L999:
    Err.Raise kErrGradcalc, , msg
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine checks the taitel,barnea & dukler prediction of an-
'     nular flow by using criteria developed by barnea. it checks annular
'     flow bridging caused by liquid holdup of greater than 0.24. it also
'     calculates maximum stable film thickness for annular flow and com-
'     pares it with the existing film thickness for the stability of the
'     annular flow. the subroutine calls itasfe to calculate maximum
'     stable film thickness iteratively. it uses dimensionless parameters
'     as input.
'                              references
'                              ----------
'     1. barnea, d., " transition from annular flow and from dispersed
'        bubble flow - unified models for the whole range of pipe in-
'        clinations ", int. j. of multiphase flow, vol.12, (1986),
'        733-744.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'     ioerr = output file for error messages when input values passed
'             to the subroutine are out of range or error occurs in
'             the calculation.
'                           subsubroutines called
'                           ------------------
'     itsafe = this subroutine iterate safely within the specified
'              limits of the variable.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                           variable description
'                           --------------------
'    *deld   = ratio of film thickness to pipe diameter.
'     e      = liquid holdup fraction at a pipe cross-section.
'     ec     = liquid holdup for core with respect to pipe cross-
'              section.
'     ef    = liquid holdup for film with respect to pipe cross-
'              section.
'    *ensc   = no-slip holdup for core with respect to core cross-
'              section.
'      fpat  = flow pattern, (chr)
'                 "anul" = annular
'                 "slug" = slug
'     ierr   = error code, (0=ok, 1=input variable out of range.)
'    *ioerr  = error message file.
'    *xmo2   = dimensionless group defined in  anmist.
'    *ym     = dimensionless group defined in  anmist.
'     (* indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub chkan(xmo2#, ym#, deld#, ensc#, e#, fpat)
' sub parameter : do not dim ! Dim fpat as string * 4
'Dim itsafe As Double
'     ------------------------------------------------------
'     calculate total liquid holdup at a pipe cross-section.
'     ------------------------------------------------------
    Dim ef#, ec#, deldmx#, deldmn#, deldac#, delds#
    ef = 4# * deld * (1# - deld)
    ec = ensc * (1# - 2# * deld) ^ 2
    e = ef + ec
    If (e > 0.12) Then
        fpat = "slug" '        annular flow is bridged resulting in slug flow.
    Else
        '        ----------------------------------------------------
        '        calculate maximum stable film thickness using itsafe
        '        for iteration.
        '        ----------------------------------------------------
        deldmx = 0.499
        deldmn = 0.00001
        deldac = 0.00001
        delds = itsafe(xmo2, ym, 0#, 0#, 0#, 0#, 5, deldmn, deldmx, deldac)
        If (delds < deld) Then
            fpat = "slug" '            film is unstable causing slug flow.
        Else
            fpat = "anul" '            annular flow is confirmed by barnea criteria.
        End If
    End If
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this function carries out iteration within a fixed limits of a
'     variable.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari      last revision: march 1989
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this function uses newton-raphson technique for iteration. it
'     keeps the solution within the specified limits by using bisection
'     method when newton-raphson solution crosses the limits. subroutine
'     func is called to define function and its derivative needed by
'     newton-raphson technique. there is no restriction on the system of
'     units as long as func can incorporate it.
'                            references
'                            ----------
'    1. press, w. h., et al.," numerical recipes",cambridge university
'       press, new york (1986).
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                   input/output logical file variables
'                   -----------------------------------
'     ioerr = output file for error messages when input values passed
'             to the subroutine are out of range or error occurs in
'             the calculation.
'                           subsubroutines called
'                           ------------------
'     func = this defines function and its derivative to be used for
'            iteration.
'                          variable description
'                            --------------------
'     df    = value of the derivative of f during iteration.
'     dx    = difference between the two successive guesses.
'     dxold = previous dx.
'     f     = value of the function during iteration.
'     fh    = highest value of the function.
'     fl    = lowest value of the function.
'     i     = indicator for variable to be iterated,
'             + = holdup in  bubble flow.
'             2 = void fraction in taylor  bubble.
'             3 = nusselt film thickness around taylor  bubble.
'             4 = film thickness in annular flow.
'             5 = stable film thickness for annular film.
'     ierr  = error code, (0=ok, 1=input variable out of range.)
'    *ioerr = error message file.
'     j     = do loop variable.
'     maxit = iteration counter.
'     swap  = dummy variable used to swap or interchange fh and fl.
'     xh    = highest value for the variable.
'     xl    = lowest value for the variable.
'    *xacc  = accuracy acceptable for the solution.
'    *x1    = upper limit for the solution.
'    *x2    = lower limit for the solution.
'    *a,b,c,d,e and g are input dummy variables that define the
'     function.
'     (* indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Function itsafe(a#, B#, c#, d#, e#, g_#, i As Integer, X1#, X2#, xacc#) As Double
    '     ---------------------------------------------------------
    '     calculate values of the function and its derivative at x1
    '     and x2.
    '     ---------------------------------------------------------
    Dim fl#, DF#, fh#, xl#, xh#, swap#
    Dim dxold#, DX#
    Dim f#, j As Integer, temp As Double
    
    Call Func(a, B, c, d, e, g_, i, X1, fl, DF)
    Call Func(a, B, c, d, e, g_, i, X2, fh, DF)
    '     ---------------------------------------------------------
    '     interchange values of the function if it varies inversely
    '     with the variable.
    '     ---------------------------------------------------------
    If (fl < 0#) Then
        xl = X1
        xh = X2
    Else
        xh = X1
        xl = X2
        swap = fl
        fl = fh
        fh = swap
    End If
    '     -------------------------------------------------
    '     take the average of x1 and x2 as the first guess.
    '     -------------------------------------------------
    itsafe = 0.5 * (X1 + X2)
    '     ---------------------------------------------------
    '     define the difference in the two successive values.
    '     ---------------------------------------------------
    dxold = Abs(X2 - X1)
    DX = dxold
    '     ----------------------------------------
    '     call func again to use the guessed value.
    '     ----------------------------------------
    Call Func(a, B, c, d, e, g_, i, itsafe, f, DF)
    '     -----------------------------------------------------
    '     carry out iteration by using newton-raphson method
    '     together with bisection approach to keep the variable
    '     within its limits.
    '     -----------------------------------------------------
    For j = 1 To MAXIT
        If (((itsafe - xh) * DF - f) * ((itsafe - xl) * DF - f) >= 0# Or Abs(2# * f) > Abs(dxold * DF)) Then
            dxold = DX
            DX = 0.5 * (xh - xl)
            itsafe = xl + DX
            If (xl = itsafe) Then Exit Function
        Else
            dxold = DX
            DX = f / DF
            temp = itsafe
            itsafe = itsafe - DX
            If (temp = itsafe) Then Exit Function
        End If
        If (Abs(DX) < xacc Or Abs(f) < xacc) Then Exit Function
        Call Func(a, B, c, d, e, g_, i, itsafe, f, DF)
        If (f < 0#) Then
            xl = itsafe
            fl = f
        Else
            xh = itsafe
            fh = f
        End If
        If (f = 0#) Then Exit Function
    Next j
    Err.Raise kErrGradcalc, , " itsafe: no convergence even after 100", " iterations"
End Function
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine defines a function and its derivative to be used
'     for iteration.
'     written by,    asfandiar m. ansari
'     revised by,    asfandiar m. ansari     last revision: march 1989
'              * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine is called by itsafe to get standard function and
'     its derivative for newton-raphson iterative technique. the number
'     arguments for this subroutine are based on the number of variables
'     involved in the most complex function for which the subroutine is
'     called. for simpler functions most of the arguments are taken as
'     zero. the function to be used by itsafe is recognized by indicator
'     i.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                           variable description
'                           --------------------
'     df   = derivative of f.
'     f    = function to be defined for iteration.
'     i    = indicator to select f.
'     x    = variable to be iterated.
'     a,b,c,d,e and f are input variables that define f.
'     t"s and dt"s are dummy variables and their derivatives.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub Func(a#, B#, c#, d#, e#, g_#, i As Integer, X#, f#, DF#)
'     ----------------------------------------------------
'     initialize dummy variables that are repeatedly used.
'     ----------------------------------------------------
Dim T1#, dt1#, T2#, dt2#, T3#, dt3#, t4#, dt4#
T1 = 0#
dt1 = 0#
T2 = 0#
dt2 = 0#
T3 = 0#
dt3 = 0#
t4 = 0#
dt4 = 0#
Dim AN#, t5#, t6#, t7#, t8#, t9#, t10#, t11#, t12#, t13#, t14#, dt5#, dt6#, dt7#, dt8#, dt9#, dt10#, dt11#, dt12#, dt13#, dt14#, z#, DZ#
If (i = 1) Then
    '        ------------------------------------------------
    '        define f and df to iterate for holdup in bubble.
    '        ------------------------------------------------
    AN = 0.5
    f = c * X ^ AN + 1.2 * (a + B) - B / (1# - X)
    DF = AN * c * X ^ (AN - 1#) - B / (1# - X) ^ 2
ElseIf (i = 2) Then
    '        ------------------------------------------------------
    '        define f and df to iterate for void fraction in taylor
    '         bubble in slug.
    '        ------------------------------------------------------
    T2 = Sqr(9.81 * g_ * (1# - Sqr(X)))
    T3 = 1# - X
    t4 = 1# - e
    t5 = 9.961 * T2
    t6 = c - (c + t5) * T3 / t4
    t7 = 1.2 * (a + B) + d * t4 ^ 0.5
    If (e > 0.25) Then t7 = t6
    t8 = c * (1# - e / X) + t7 * e / X
    t9 = t6 * t4 - a
    t10 = t5 * T3 + t6 * t4
    t11 = B - e * t7
    t12 = X * t8 - e * t7
    t13 = t9 / t10
    t14 = t11 / t12
    f = t13 - t14
    dt2 = -0.25 * 9.81 * g_ / T2 / Sqr(X)
    dt5 = 9.961 * dt2
    dt6 = -(dt5 * T3 / t4 - (c + t5) / t4)
    dt7 = 0#
    If (e > 0.25) Then dt7 = dt6
    dt8 = c * (e / X ^ 2) + dt7 * e / X - t7 * e / X ^ 2
    dt9 = dt6 * t4
    dt10 = dt5 * T3 - t5 + dt6 * t4
    dt11 = -e * dt7
    dt12 = t8 + X * dt8 - e * dt7
    dt13 = dt9 / t10 - t9 * dt10 / t10 ^ 2
    dt14 = dt11 / t12 - t11 * dt12 / t12 ^ 2
    DF = dt13 - dt14
ElseIf (i = 3) Then
    '        --------------------------------------------------------------
    '        define f and df to iterate for nusselt film thickness in slug.
    '        --------------------------------------------------------------
    T1 = e / (0.425 + 2.65 * (d + e))
    T2 = (1# - 2# * X / a) ^ 2
    T3 = (B * T2 - (B - c) * T1) / T2
    t4 = (T3 * T2 - (d + e)) / (1# - T2)
    f = X ^ 3 - 0.75 * a * g_ * t4 * (1# - T2)
    dt2 = -4# * (1# - 2# * X / a) / a
    dt3 = (B - c) * T1 * dt2 / T2 ^ 2
    dt4 = (dt3 * T2 + T3 * dt2) / (1# - T2) + (T3 * T2 - (d + e)) * dt2 / (1# - T2) ^ 2
    DF = 3# * X ^ 2 - 0.75 * a * g_ * (dt4 * (1# - T2) - t4 * dt2)
ElseIf (i = 4) Then
    '        --------------------------------------------------------
    '        define f and df to iterate for film thickness in anmist.
    '        --------------------------------------------------------
    T1 = 4# * X * (1# - X)
    z = 1# + c * X
    dt1 = 4# * (1# - 2# * X)
    DZ = c
    f = B - z / T1 / (1# - T1) ^ 2.5 + a / T1 ^ 3
    DF = -DZ / T1 / (1# - T1) ^ 2.5 - 2.5 * z * dt1 / T1 / (1# - T1) ^ 3.5 + z * dt1 / T1 ^ 2 / (1# - T1) ^ 2.5 - 3# * a / T1 ^ 4 * dt1
ElseIf (i = 5) Then
    '         -----------------------------------------------------------
    '         define f and df to iterate  stable film thickness in chkan.
    '         -----------------------------------------------------------
    T1 = 1# - (1# - 2# * X) ^ 2
    dt1 = 4# * (1# - 2# * X)
    '         ---------------------------------------------------
    '         to avoid division of f by 0, adjust x if necessary.
    '         ---------------------------------------------------
    T2 = 1# / T1
    If (T2 = 1.5) Then X = X + 0.001
    T1 = 1# - (1# - 2# * X) ^ 2
    dt1 = 4# * (1# - 2# * X)
    f = B - (2# - 1.5 * T1) * a / T1 ^ 3 / (1# - 1.5 * T1)
    DF = 1.5 * dt1 * a / T1 ^ 3 / (1# - 1.5 * T1) + 3# * a * dt1 * (1# - 2# * T1) _
             * (2# - 1.5 * T1) / T1 ^ 4 / (1# - 1.5 * T1) ^ 2
End If
Exit Sub
Exit Sub
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine detects the flow pattern for inclined
'     and vertical upward flow (+15 to +90 degrees)
'     written by,  caetano, shoham and triggia
'     revised by,  lorri jefferson                      march 1989
'     revised by,  guohua zheng         last revision:  april 1989
'               * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine detects the flow pattern for inclined and vertical
'     upward flow (+15 to +90 degrees).  the si system of units is used.
'                                references
'                                ----------
'     1.  e.f. caetano, o. shoham and a.a. triggia, "gas liquid
'            two-phase flow pattern prediction computer library",
'            journal of pipelines, 5 (1986) 207-220.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                           variable description
'                           --------------------
'     alfa   = angle of flow from horizontal. (radians)
'    *ang    = angle of flow from horizontal. (deg)
'    *deng   = gas density. (kg/m^3)
'    *denl   = liquid density. (kg/m^3)
'    *di     = inside pipe diameter. (m)
'    *ed     = relative pipe roughness
'     fpat   = flow pattern, (chr)
'                 " liq" = liquid
'                 " gas" = gas
'                 "bubl" = bubbly
'                 "slug" = slug
'                 "dbub" = dispersed bubble
'                 "anul" = annular
'    *visg    = gas viscosity. (cp)
'    *visl    = liquid viscosity. (cp)
'    *vsg     = superficial gas velocity. (m/sec)
'    *vsl     = superficial liquid velocity. (m/sec)
'    *surl    = gas-liquid surface tension. (dynes/cm)
'     (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub fpup(vsl#, vsg#, Di#, ed#, denl#, deng#, visl#, visg#, ang#, surl#, fpat)
    ' sub parameter : do not dim ! Dim fpat as string * 4
    Dim alfa#, vsgo#, vsg1#, vsl1#, vsg2#, vsl2#, vsg3#, vsl3#
    Dim vslb As Double
    Dim vsgb As Double
    
    alfa = 0.0174533 * ang
    Call mpoint(Di, ed, denl, deng, visl, visg, ang, surl, vsgo, vsg1, vsl1, vsg2, vsl2, vsg3, vsl3) '     calculate points on transition boundaries
    '     ----------------------
    '     check for annular flow
    '     ----------------------
    If Not (vsg < vsg3) Then
        fpat = "anul"
        Exit Sub
    End If
    '     -----------------------------------------
    '     check for bubble/slug or dispersed-bubble
    '     -----------------------------------------
    If Not (vsg > vsg2) Then
        Call dbtran(0#, vslb, vsg, Di, ed, denl, deng, visl, visg, ang, surl)
        If (vsl < vslb) Then
            If (vsgo > 0#) Then
                vsgb = (vsl + 1.15 * (const_g * (denl - deng) * surl / denl ^ 2) ^ 0.25 * Sin(alfa)) / 3#
                If (vsg > vsgb) Then
                    fpat = "slug"
                Else
                    fpat = "bubl"
                End If
            Else
                fpat = "slug"
            End If
        Else
            fpat = "dbub"
        End If
    Else ' (vsg > vsg2)
        vslb = vsg / 0.76 - vsg
        If (vsl >= vslb) Then
            fpat = "dbub"
        Else
            fpat = "slug"
        End If
    End If
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     transition boundaries for upward vertical flow
'     written by,  caetano, shoham, and triggia
'     revised by,  lorri jefferson                      march 1989
'     revised by,  guohua zheng         last revision:  april 1989
'               * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine calculates points on the transition boundaries for
'     upward vertical flow.  the si system of units is used.
'                                references
'                                ----------
'     1.  e.f. caetano, o. shoham and a.a. triggia, "gas liquid
'            two-phase flow pattern prediction computer library",
'            journal of pipelines, 5 (1986) 207-220.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                          variable description
'                          --------------------
'     alfa   = angle of flow from horizontal. (radians)
'    *ang    = angle of flow from horizontal. (deg)
'    *deng   = gas density. (kg/m^3)
'    *denl   = liquid density. (kg/m^3)
'    *di     = inside pipe diameter. (m)
'    *ed     = relative pipe roughness
'    *visg   = gas viscosity. (cp)
'    *visl   = liquid viscosity. (cp)
'     vsgs   = superficial gas velocity on transition boundaries.
'              (m/sec)
'     vsls   = superficial liquid velocity on transition boundaries.
'              (m/sec)
'    *surl   = gas-liquid surface tension. (dynes/cm)
'     (*indicates input variables)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub mpoint(Di#, ed#, denl#, deng#, visl#, visg#, ang#, surl#, vsgo#, vsg1#, vsl1#, vsg2#, vsl2#, vsg3#, vsl3#)
 '   iErr = 0
    Dim alfa#, DMin#
    Dim vsl As Double
    
    alfa = 0.0174533 * ang
    '     -----------------------------------------------------------
    '     calculate vsgo
    '     minimum pipe diameter and inclination angle for bubble flow
    '     existed at low liquid flow rates
    '     -----------------------------------------------------------
    DMin = 19# * Sqr((denl - deng) * surl / (denl ^ 2 * const_g))
    If (ang > 70# And Di > DMin * 0.95) Then
        vsl = 0.001
        vsgo = (vsl + 1.15 * (const_g * (denl - deng) * surl / denl ^ 2) ^ 0.25 * Sin(alfa)) / 3#
    Else
        vsgo = -1#
    End If
    vsg3 = 3.1 * (surl * const_g * Sin(alfa) * (denl - deng)) ^ 0.25 / Sqr(deng) '     calculate vsg3
    '     --------------
    '     calculate vsg1
    '     --------------
    vsg1 = -1#
    vsl1 = -1#
    If (vsgo > 0#) Then Call dbtran(0.25, vsl1, vsg1, Di, ed, denl, deng, visl, visg, ang, surl)
    '     --------------
    '     calculate vsg2
    '     --------------
    vsg2 = 0.2
    Call dbtran(0.76, vsl2, vsg2, Di, ed, denl, deng, visl, visg, ang, surl)
    If (vsg2 >= vsg3) Then
        vsg2 = vsg3
        Call dbtran(0#, vsl2, vsg2, Di, ed, denl, deng, visl, visg, ang, surl)
        vsl3 = vsl2
        If (vsg1 < vsg2) Then GoTo L999
        vsg1 = vsg2
        GoTo L999
    End If
    '     -----------------------------------
    '     calculate vsl3 on boundary line "c"
    '     -----------------------------------
    vsl3 = (vsg3 / 0.76 - vsg3)
L999:
End Sub
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     dispersed bubble transition.
'     written by,  caetano, triggia and shoham
'     revised by,  lorri jefferson                      march 1989
'     revised by,  guohua zheng         last revision:  april 1989
'               * *  tulsa university fluid flow projects  * *
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'     this subroutine determines dispersed bubble transition boundaries.
'     the si system of units is used.
'                                references
'                                ----------
'     1.  e.f. caetano, o. shoham and a.a. triggia, "gas liquid
'            two-phase flow pattern prediction computer library",
'            journal of pipelines, 5 (1986) 207-220.
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
'                          variable description
'                          --------------------
'    *ang    = angle of flow from horizontal. (deg)
'    *deng   = gas density. (kg/m^3)
'    *denl   = liquid density. (kg/m^3)
'    *di     = inside pipe diameter. (m)
'    *ed     = relative pipe roughness
'    *hgg    = guessed gas void fraction
'    *visg   = gas viscosity. (cp)
'    *visl   = liquid viscosity. (cp)
'    *vsg    = superficial gas velocity. (m/sec)
'    *vsl    = superficial liquid velocity. (m/sec)
'     (*indicates input variables, vsg and vsl Close #ioerr:exit subed to calling
'      subroutine)
'     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Private Sub dbtran(hgg#, vsl#, vsg#, Di#, ed#, denl#, deng#, visl#, visg#, ang#, surl#)
    Dim vmc As Double, ratio As Double
    Dim c As Double, vme As Double, ITER As Long
    Dim Hg As Double
    Dim rhom, vism, Re, FFM
    Dim VM As Double
    
    '     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    '     trial and error calculation of dispersed bubble transition
    '     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    c = 2# * ((0.4 * surl) / ((denl - deng) * const_g)) ^ 0.5 * (denl / surl) ^ 0.6 * (2# / Di) ^ 0.4
    vme = vsg + 1.5 '     estimate a mixture velocity
    ITER = 0
    For ITER = 0 To 50
        If (hgg = 0#) Then
            Hg = vsg / vme
        Else
            Hg = hgg
            vsg = Hg * vme
            vsl = vme - vsg
        End If
        rhom = denl * (1# - Hg) + deng * Hg
        vism = visl * (1# - Hg) + visg * Hg
        Re = Di * rhom * vme / vism
        FFM = unf_friction_factor(Re, ed) '     get frictional factor
        vmc = ((0.725 + 4.15 * Sqr(Hg)) / c / (FFM / 4#) ^ 0.4) ^ 0.8333 '     calculate new mixture velocity
        ratio = vmc / vme
        If (ratio >= 0.99 And ratio <= 1.01) Then '     check for convergence
            Exit For
        End If
        vme = (vmc + vme) / 2#
    Next ITER
    If ratio < 0.8 Then
        add_log_msg "dbtran: calculation proceeds without ", "convergence on vm after 50 iterations. ratio = " & Format(ratio, "0.000")
    End If
    VM = (vmc + vme) / 2
    vsl = VM * (1# - hgg)
    If (hgg > 0#) Then vsg = VM * hgg
End Sub
         
Public Function unf_BegsBrillGradient(ByVal arr_d_m As Double, _
                                  ByVal arr_theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal ql_rc_m3day As Double, ByVal qg_rc_m3day As Double, _
                                  ByVal Mul_rc_cP As Double, ByVal Mug_rc_cP As Double, _
                                  ByVal sigma_l_Nm As Double, _
                                  ByVal rho_lrc_kgm3 As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  Optional Payne_et_all_holdup As Integer = 0, _
                                  Optional Payne_et_all_friction As Integer = 1, _
                                  Optional calibr_grav As Double = 1, _
                                  Optional calibr_fric As Double = 1)
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter ( (m))
'arr_theta_deg - pipe inclination angel (degrees)
'eps_m - pipe wall roughness ( (m))
'p - reference pressure ( (atma))
'q_oSC - oil rate at standard conditions ( (m3/day))
'q_wSC - water rate at standard conditions ( (m3/day))
'q_gSC - gas rate at standard conditions ((m3/day))
'Bo_m3m3 - oil formation volume factor at reference pressure ( (m3/sm3))
'Bw_m3m3 - water formation volume factor at reference pressure ( (m3/sm3))
'Bg_m3m3 - gas formation volume factorat reference pressure ( (m3/sm3))
'rs - gas-oil solution ratio at reference pressure ( (sm3/sm3))
'mu_oil_cP - oil viscosity at reference pressure (cp)
'mu_wat_cP - water viscosity at reference pressure (cp)
'mu_gas_cP - gAs viscosity at reference pressure (cp)
'sigma_oil_gas_Nm - oil-gAs surface tension coefficient ((Newton/m))
'sigma_wat_gas_Nm - water-gAs surface tension coefficient ( (Newton/m))
'rho_oSC - oil density at standard conditions ( (kg/m3))
'rho_wSC - water density at standard conditions ( (kg/m3))
'rho_gSC - gas density at standard conditions((kg/m3))
'
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)  obsolete
'dpdl_g - used to otput pressure gradient due to gravity ( (atma/m))
'dpdl_f - used to output pressure gradient due to friction ( (atma/m))
'v_sl - used to output liquid superficial velocity ( (m/sec))
'v_sg - used to output gas superficial velocity ( (m/sec))
'h_l - used to output liquid holdup
'Calculate auxilary values
Dim roughness_d As Double
 
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim Ap_m2 As Double ' площадь трубы
Dim lambda_l   As Double
Dim vsl_msec, vsg_msec, Vsm_msec As Double
Dim Rho_n_kgm3 As Double   ' no slip density
Dim rho_s As Double        ' mix density
Dim Mu_n_cP As Double
Dim n_Re As Double 'Reinolds number
Dim n_Fr As Double 'Froude number
Dim n_lv As Double 'Liquid velocity number
Dim flow_pattern As Integer
Dim l_2, l_3, AA As Double
Dim f_n As Double ' normalized friction factor
Dim f As Double ' friction factor
Dim y, s As Double
Dim FY As Double
Const c_p = 0.000009871668   ' переводной коэффициент
Ap_m2 = const_Pi * arr_d_m ^ 2 / 4
If ql_rc_m3day = 0 Then
  ' специально отработае случай нулевого дебита
    lambda_l = 1
    Hl_out_fr = 1
    f = 0
    Rho_n_kgm3 = rho_lrc_kgm3 * lambda_l + rho_grc_kgm3 * (1 - lambda_l) ' No-slip mixture density
    flow_pattern = 0
Else
    lambda_l = ql_rc_m3day / (ql_rc_m3day + qg_rc_m3day)
    roughness_d = eps_m / arr_d_m
    vsl_msec = const_conver_sec_day * ql_rc_m3day / Ap_m2
    vsg_msec = const_conver_sec_day * qg_rc_m3day / Ap_m2
    Vsm_msec = vsl_msec + vsg_msec
    Rho_n_kgm3 = rho_lrc_kgm3 * lambda_l + rho_grc_kgm3 * (1 - lambda_l) ' No-slip mixture density
    Mu_n_cP = Mul_rc_cP * lambda_l + Mug_rc_cP * (1 - lambda_l) ' No slip mixture viscosity
    n_Re = 1000 * Rho_n_kgm3 * Vsm_msec * arr_d_m / Mu_n_cP
    n_Fr = Vsm_msec ^ 2 / (const_g * arr_d_m)
    n_lv = vsl_msec * (rho_lrc_kgm3 / (const_g * sigma_l_Nm)) ^ 0.25
    '-----------------------------------------------------------------------
    'determine flow pattern
    If (n_Fr >= 316 * lambda_l ^ 0.302 Or n_Fr >= 0.5 * lambda_l ^ -6.738) Then
        flow_pattern = 2
    Else
        If (n_Fr <= 0.000925 * lambda_l ^ -2.468) Then
            flow_pattern = 0
        Else
            If (n_Fr <= 0.1 * lambda_l ^ -1.452) Then
                flow_pattern = 3
            Else
                flow_pattern = 1
            End If
        End If
    End If
    '-----------------------------------------------------------------------
    'determine liquid holdup
    If (flow_pattern = 0 Or flow_pattern = 1 Or flow_pattern = 2) Then
        Hl_out_fr = h_l_arr_theta_deg(flow_pattern, lambda_l, n_Fr, n_lv, arr_theta_deg, Payne_et_all_holdup)
    Else
        l_2 = 0.000925 * lambda_l ^ -2.468
        l_3 = 0.1 * lambda_l ^ -1.452
        AA = (l_3 - n_Fr) / (l_3 - l_2)
        Hl_out_fr = AA * h_l_arr_theta_deg(0, lambda_l, n_Fr, n_lv, arr_theta_deg, Payne_et_all_holdup) + _
                  (1 - AA) * h_l_arr_theta_deg(1, lambda_l, n_Fr, n_lv, arr_theta_deg, Payne_et_all_holdup)
    End If
    'Calculate normalized friction factor
    f_n = unf_friction_factor(n_Re, roughness_d)
    'calculate friction factor correction for multiphase flow
    y = MaxReal(lambda_l / Hl_out_fr ^ 2, 0.000001)
    FY = MaxReal(Log(y), 0.000001)
    If (y > 1 And y < 1.2) Then
      s = Log(2.2 * y - 1.2)
    Else
      s = FY / (-0.0523 + 3.182 * FY - 0.8725 * FY ^ 2 + 0.01853 * FY ^ 4)
    End If
    'calculate friction factor
    f = f_n * Exp(s)
End If
rho_s = rho_lrc_kgm3 * Hl_out_fr + rho_grc_kgm3 * (1 - Hl_out_fr) 'calculate mixture density
dPdLg_out_atmm = c_p * rho_s * const_g * sind(arr_theta_deg) 'calculate pressure gradient due to gravity
dPdLf_out_atmm = c_p * f * Rho_n_kgm3 * Vsm_msec ^ 2 / (2 * arr_d_m) 'calculate pressure gradient due to friction
dPdLa_out_atmm = 0  'calculate pressure gradient ' not acounted in BeggsBrill
fpat_out_num = flow_pattern
unf_BegsBrillGradient = Array(dPdLg_out_atmm * calibr_grav + dPdLf_out_atmm * calibr_fric, _
                            dPdLg_out_atmm * calibr_grav, _
                            dPdLf_out_atmm * calibr_fric, _
                            dPdLa_out_atmm, _
                            vsl_msec, _
                            vsg_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
End Function
Private Function h_l_arr_theta_deg(flow_pattern As Integer, ByVal lambda_l As Double, ByVal n_Fr As Double, _
                    ByVal n_lv As Double, ByVal arr_theta_deg As Double, ByVal Payne_et_all As Integer) As Double
    'function calculating liquid holdup
    'flow_pattern - flow pattern (0 -Segregated, 1 - Intermittent, 2 - Distributed)
    'lambda_l - volume fraction of liquid at no-slip conditions
    'n_fr - Froude number
    'n_lv - liquid velocity number
    'arr_theta_deg - pipe inclination angle, (Degrees)
    'payne_et_all - flag indicationg weather to applied Payne et all correction for holdup (0 - not applied, 1 - applied)
    'Constants to determine liquid holdup
    Dim a(3) As Double
    a(0) = 0.98
    a(1) = 0.845
    a(2) = 1.065
    Dim B(3) As Double
    B(0) = 0.4846
    B(1) = 0.5351
    B(2) = 0.5824
    Dim c(3) As Double
    c(0) = 0.0868
    c(1) = 0.0173
    c(2) = 0.0609
    'constants to determine liquid holdup correction
    Dim e(3) As Double
    e(0) = 0.011
    e(1) = 2.96
    e(2) = 1
    Dim f(3) As Double
    f(0) = -3.768
    f(1) = 0.305
    f(2) = 0
    Dim g(3) As Double
    g(0) = 3.539
    g(1) = -0.4473
    g(2) = 0
    Dim h(3) As Double
    h(0) = -1.614
    h(1) = 0.0978
    h(2) = 0
    
    Dim h_l_0 As Double
    Dim CC As Double
    Dim Psi As Double
    Dim arr_theta_deg_d As Double
    
    h_l_0 = a(flow_pattern) * lambda_l ^ B(flow_pattern) / n_Fr ^ c(flow_pattern) 'calculate liquid holdup at no slip conditions
    CC = MaxReal(0, (1 - lambda_l) * Log(e(flow_pattern) * lambda_l ^ f(flow_pattern) * n_lv ^ g(flow_pattern) * n_Fr ^ h(flow_pattern))) 'calculate correction for inclination angle
    
    arr_theta_deg_d = const_Pi / 180 * arr_theta_deg 'convert angle to radians
    Psi = 1 + CC * (Sin(1.8 * arr_theta_deg_d) - 0.333 * (Sin(1.8 * arr_theta_deg_d)) ^ 3)  ' corrected sign by issue #37
    'calculate liquid holdup with payne et al. correction factor
    If Payne_et_all > 0 Then
        If arr_theta_deg > 0 Then 'uphill flow
            h_l_arr_theta_deg = MaxReal(MinReal(1, 0.924 * h_l_0 * Psi), lambda_l)
        Else  'downhill flow
            h_l_arr_theta_deg = MaxReal(MinReal(1, 0.685 * h_l_0 * Psi), lambda_l)
        End If
    Else
        h_l_arr_theta_deg = MaxReal(MinReal(1, h_l_0 * Psi), lambda_l)
    End If
    
End Function
 
    
Public Function unf_UnifiedTUFFPGradient(ByVal arr_d_m As Double, _
                                  ByVal arr_theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal ql_rc_m3day As Double, ByVal qg_rc_m3day As Double, _
                                  ByVal Mul_rc_cP As Double, ByVal Mug_rc_cP As Double, _
                                  ByVal sigma_l_Nm As Double, _
                                  ByVal rho_lrc_kgm3 As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  ByVal p_atma As Double, _
                                  Optional calibr_grav As Double = 1, _
                                  Optional calibr_fric As Double = 1)
 
 Dim dPdLg_out_atmm As Double
 Dim dPdLf_out_atmm As Double
 Dim Hl_out_fr As Double
 Dim fpat_out_num As Integer
 Dim dPdLa_out_atmm As Double
 Dim dPdL_out_atmm As Double
 Dim roughness_d As Double
 Dim Ap_m2 As Double ' площадь трубы
' Dim lambda_l   As Double
 Dim vsl_msec As Double, vsg_msec As Double
 Dim pgf_out As Double
 Dim pge_out As Double
 Dim pga_out As Double
 Dim pgt_out As Double
 Dim IERR As Double
 Dim vf#, hlf#, SL#, FF#, hls#, cu#, fqn#, rsu#, icon#, cs#, cf#, VC#
 
 roughness_d = eps_m / arr_d_m
 Ap_m2 = const_Pi * arr_d_m ^ 2 / 4
' If Ql_rc_m3day > 0 Then
'     lambda_l = Ql_rc_m3day / (Ql_rc_m3day + Qg_rc_m3day)
' Else
'    lambda_l = 1
' End If
 vsl_msec = const_conver_sec_day * ql_rc_m3day / Ap_m2
 vsg_msec = const_conver_sec_day * qg_rc_m3day / Ap_m2
 'On Error Resume Next
 On Error GoTo lblCloseFile
 Dim flpat As String
' Debug.Print "start" + " arr_d_m  =" + CStr(arr_d_m) + " roughness_d  =" + CStr(roughness_d) + " arr_theta_deg  =" + CStr(arr_theta_deg) _
'                     + " Vsl_msec  =" + CStr(Vsl_msec) + " Vsg_msec  =" + CStr(Vsg_msec) + " rho_lrc_kgm3  =" + CStr(rho_lrc_kgm3) + " rho_grc_kgm3  =" + CStr(rho_grc_kgm3)
' Debug.Print " Mul_rc_cP  =" + CStr(Mul_rc_cP) _
'                    + " Mug_rc_cP  =" + CStr(Mug_rc_cP) + "  sigma_l_Nm =" + CStr(sigma_l_Nm) + " p_atma = " + CStr(p_atma)
 Call zhangmodel(arr_d_m, roughness_d, arr_theta_deg, vsl_msec, vsg_msec, rho_lrc_kgm3, rho_grc_kgm3, Mul_rc_cP, Mug_rc_cP, sigma_l_Nm, p_atma, _
                 Hl_out_fr, pgt_out, pgf_out, flpat, _
                 vf, hlf, SL, FF, hls, cu, fqn, rsu, icon, cs, cf, VC, pge_out, pga_out)
' Debug.Print "done -------" + " pgt_out  =" + CStr(-pgt_out)
lblCloseFile:
 dPdL_out_atmm = -pgt_out
 dPdLg_out_atmm = -pge_out
 dPdLf_out_atmm = -pgf_out
 dPdLa_out_atmm = -pga_out
 
 Select Case flpat
    Case "liq": fpat_out_num = 200  '                 " liq" = liquid
    Case "gas": fpat_out_num = 201  '                 " gas" = gas
    Case "ann": fpat_out_num = 207  '                 "anul" = annular
    Case "d-b":  fpat_out_num = 206 '                 "dbub" = dispersed bubble
    Case "slug": fpat_out_num = 205 '                 "slug" = slug
    Case "bub": fpat_out_num = 202  '                 "bubl" = bubbly
    Case "int": fpat_out_num = 203
    Case "str": fpat_out_num = 204
    Case "n-a": fpat_out_num = 299
End Select '(fpat)
'Debug.Assert Abs(dPdL_out_atmm - (dPdLg_out_atmm + dPdLf_out_atmm)) < 0.1
' check of gradient calculation output. general output from correlation calc must be equal to its patrs
' otherwise - error in correlation output
          
unf_UnifiedTUFFPGradient = Array(dPdLg_out_atmm * calibr_grav + dPdLf_out_atmm * calibr_fric, _
                            dPdLg_out_atmm * calibr_grav, _
                            dPdLf_out_atmm * calibr_fric, _
                            dPdLa_out_atmm, _
                            vsl_msec, _
                            vsg_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
 
End Function
'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     unified model for gas-liquid pipe flow via slug dynamics
'     written by,          hong-quan (holden) zhang          july 20, 2001
'     revised by,          hong-quan (holden) zhang          july 30, 2002
'     revised by,          hong-quan (holden) zhang          oct. 16, 2002
'     revised by,          hong-quan (holden) zhang          apr. 23, 2003
'          * *          tulsa university fluid flow projects (tuffp)     * *
'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'     this subroutine is for predictions of flow pattern, pressure gradient,
'     liquid holdup and slug characteristics in gas-liquid pipe flow at
'     different inclination angles from -90 to 90 deg.
'     the main subroutine handles the input and output. calculations are made
'     in gal (gas and liquid) and its subroutines.
'                                   references
'                                   ----------
'     1. h.-q. zhang, "unified model for gas-liquid pipe flow - model development,"
'       etce 2002, houston.
'     2. h.-q. zhang, "unified model for gas-liquid pipe flow - model validation,"
'       etce 2002, houston.
'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
'                              subroutines called
'                              ------------------
'
'     gal          =     overall calculations
'     dislug     =     calculates the superficial liquid velocity on the
'                    boundary between dispersed bubble flow and slug flow
'                    with a given superficial gas velocity
'     stslug     =     calculates the superficial liquid velocity on the
'                    boundary between slug flow and stratified (or annular)
'                    flow with a given superficial gas velocity
'                    (for horizontal and downward flow)
'     anslug     =     calculates the superficial gas velocity on the
'                    boundary between slug flow and annular (or stratified)
'                    flow with a given superficial liquid velocity
'                    (for upward flow)
'     buslug     =     calculates the superficial gas velocity on the
'                    boundary between slug flow and bubbly flow
'                    with a given superficial liquid velocity
'                    (for near vertical upward flow, >60 deg, and large d)
'     single     =     calculates pressure gradient for single phase flow
'                    of liquid or gas
'     buflow     =     calculates pressure gradient and liquid holdup for bubbly
'                    flow (with bubble rise velocity vo)
'     dbflow     =     calculates pressure gradient and liquid holdup for dispersed
'                    bubble flow (without bubble rise velocity)
'     itflow     =     calculates pressure gradient, liquid holdup and slug
'                    characteristics for intermittent flow
'     saflow     =     calculates pressure gradient and liquid holdup for stratified
'                    or annular flow
'                              variable description
'                              --------------------
'     ac          =     cross sectional area of gas core (ft^2 m^2)
'     af          =     cross sectional area of film (ft^2 m^2)
'     *ang          =     angle of flow (pipe) from horizontal (deg.)
'     axp          =     cross sectional area of pipe (m2)
'     cf          =     film length in a slug unit (m)
'     cs          =     slug length (m)
'     cu          =     slug unit length (m)
'     *d          =     inside pipe diameter (in. or m)
'     *deng     =     gas density (lbm/ft3 or kg/m3)
'     *dengo     =     gas density at atmospheric conditions (lbm/ft3 or kg/m3)
'     *denl     =     liquid density (lbm/ft3 or kg/m3)
'     *ea          =     absolute pipe wall roughness (in. or m)
'     ed          =     relative pipe wall roughness (in. or m)
'     ens          =     no-slip liquid holdup
'     fe          =     entrainment fraction in gas core
'     fec          =     maximum entrainment fraction in gas core
'     fc          =     friction factor between gas core and pipe wall
'     ff          =     friction factor between film and pipe wall
'     fi          =     interfacial friction factor between gas and film
'     fpt(fpo)=     flow pattern (chr.),               ifpt
'                    "n-a"     =     not available           0
'                    "int"     =     intermittent           1
'                    "str"     =     stratified                2
'                    "ann"     =     annular                3
'                    "d-b"     =     dispersed bubble      4
'                    "bub"     =     bubbly                     5
'                    "liq"     =     liquid                     6
'                    "gas"     =     gas                     7
'     fqn           =     slug freq_Hz (1/s)
'     fro          =     froude number
'     *g          =     gravitational acceleration (m/s2)
'     hl          =     liquid holdup
'     hlc          =     liquid holdup in gas core
'     hlf          =     liquid holdup in film
'     hls          =     liquid holdup in slug body
'     hlsc     =     maximum liquid holdup in slug body
'     icon     =     counter of iteration times
'     *iunit     =     unit indicator, 0 for si and 1 for british
'     *p          =     pressure (psia or pa)
'     pga          =     acceleration pressure gradient (psi/ft or pa/m)
'     pge          =     elevation pressure gradient (psi/ft or pa/m)
'     pgf          =     friction pressure gradient (psi/ft or pa/m)
'     pgt          =     total pressure gradient (psi/ft or pa/m)
'     const_Pi          =     ratio of the circumference of a circle to its diameter
'     re          =     reynolds number
'     rsu          =     ratio of slug length to slug unit length
'     sc          =     perimeter contacted by gas core (ft or m)
'     sf          =     perimeter wetted by film (ft or m)
'     si          =     perimeter of interface (ft or m)
'     sl          =     perimeter of of pipe wetted by liquid (ft or m)
'     *surl     =     liquid surface tension (lbf/ft or n/m)
'     *surw     =     water surface tension (lbf/ft or n/m)
'     thf          =     film thickness (ft or m)
'     vc          =     gas core velocity (ft/s or m/s)
'     vf          =     film velocity (ft/s or m/s)
'     *visg     =     gas viscosity (cp)
'     *visl     =     liquid viscosity (cp)
'     vm          =     mixture or slug velocity (ft/s or m/s)
'     *vsg          =     superficial gas velocity (ft/s or m/s)
'     *vsl          =     superficial liquid velocity (ft/s or m/s)
'     vt          =     slug traslational (tail and front) velocity (ft/s or m/s)
'     we          =     weber number
'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*
Private Sub zhangmodel(d#, ed#, ang#, vsl#, vsg#, denl#, deng#, visl#, visg#, surl#, p#, _
 Hl#, pgt#, pgf#, fpt As String, vf#, hlf#, SL#, FF#, hls#, cu#, fqn#, rsu#, icon#, cs#, cf#, VC#, pgg#, pga#)
    p = p * 101325#
    visg = visg * 0.001
    visl = visl * 0.001
    ' mixture velocity
    Dim VM#, E1#, fec#, hlsc#, surw#, dengo#, axp#, ens#
    VM = vsl + vsg
    ' tolerances for iterations
    E1 = 0.0001
    ' limitation for liquid entraiment fraction in gas core
    fec = 0.75
    ' limitation for liquid holdup in slug body
    hlsc = 0.36
    ' constants
    'const_Pi = 3.1415926
    'g = 9.81
    ' surface tension of water against air
    surw = 0.0731
    ' density of air at atmospheric pressure
    dengo = 1.2
    ' cross sectional area of the pipe
    axp = const_Pi * d * d / 4#
    '     ---------------------------
    '     check for single phase flow
    '     ---------------------------
    If vsl + vsg > 0 Then
        ens = vsl / (vsl + vsg)
    Else
        ens = 1
    End If
    
    If (ens >= 0.99999) Then
        fpt = "liq"
        Hl = 1#
        SL = d * const_Pi
        Call singlee(d, ed, ang, p, denl, vsl, visl, FF, pgt, pgf, pgg, pga)
        GoTo L60
    ElseIf (ens <= 0.00001) Then
        fpt = "gas"
        Hl = 0#
        SL = 0#
        Call singlee(d, ed, ang, p, deng, vsg, visg, FF, pgt, pgf, pgg, pga)
        GoTo L60
    End If
    '     -------------------------------
    '     check int - d-b transition boundary
    '     -------------------------------
    Dim vdb, vst
    Call dislug(d, ed, ang, vsg, denl, deng, visl, surl, vdb)
    If (vsl > vdb) Then
        fpt = "d-b"
        SL = d * const_Pi
        Call dbflow(d, ed, ang, vsl, vsg, denl, deng, visl, Hl, FF, pgt, pgf, pgg, pga)
        GoTo L60
    End If
    If (ang > 0#) Then GoTo L50
    '     -------------------------------
    '     check i-sa transition boundary for downward flow (mostly i-s)
    '     -------------------------------
    Dim SF#, thf#
    Call stslug(d, ed, ang, vsg, denl, deng, dengo, visl, visg, surl, vst)
    If (vsl < vst) Then
        Call saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, surl, _
                    Hl, FF, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hls, VC, pgg, pga)
        SL = SF
        Else
        fpt = "int"
        SL = d * const_Pi
        Call itflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, surl, Hl, FF, pgt, pgf, fpt, cu, hlf, vf, fqn, rsu, hls, icon, _
        VC, cs, cf, pgg, pga)
        If (fpt = "d-b") Then
            SL = d * const_Pi
            Call dbflow(d, ed, ang, vsl, vsg, denl, deng, visl, Hl, FF, pgt, pgf, pgg, pga)
        End If
        If (fpt = "str" Or fpt = "ann") Then
            Call saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, surl, _
            Hl, FF, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hls, VC, pgg, pga)
            SL = SF
        End If
    End If
    GoTo L60
    '     -------------------------------
    ' check i-sa transition boundary for upward flow (mostly i-a)
    '     -------------------------------
L50:
    'continue
    Dim van
    Call anslug(d, ed, ang, vsl, denl, deng, dengo, visl, visg, surl, van)
    If (vsg > van) Then
        fpt = "ann"
        SL = d * const_Pi
        Call saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
           surl, Hl, FF, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hls, VC, pgg, pga)
        SL = SF
        GoTo L60
    End If
    '     -------------------------------
    ' check i-bu transition boundary
    '     -------------------------------
    Dim ckd
    ckd = (denl * denl * const_g * d / ((denl - deng) * surl)) ^ 0.25
    If (ckd <= 4.37) Then
        fpt = "int"
        SL = d * const_Pi
        Call itflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
          surl, Hl, FF, pgt, pgf, fpt, cu, hlf, vf, fqn, rsu, hls, icon, VC, cs, cf, pgg, pga)
        If (fpt = "d-b") Then
            SL = d * const_Pi
            Call dbflow(d, ed, ang, vsl, vsg, denl, deng, visl, Hl, FF, pgt, pgf, pgg, pga)
        End If
        If (fpt = "str" Or fpt = "ann") Then
            Call saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
                  surl, Hl, FF, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hls, VC, pgg, pga)
            SL = SF
        End If
        GoTo L60
    End If
    Dim vbu
    Call buslug(d, vsl, vbu)
    If (vsg < vbu And ang > 60#) Then
        fpt = "bub"
        SL = d * const_Pi
        Call buflow(d, ed, ang, vsl, vsg, denl, deng, visl, surl, Hl, FF, pgt, pgf, pgg, pga)
        Else
        fpt = "int"
        SL = d * const_Pi
        Call itflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
             surl, Hl, FF, pgt, pgf, fpt, cu, hlf, vf, fqn, rsu, hls, icon, VC, cs, cf, pgg, pga)
        If (fpt = "d-b") Then
            SL = d * const_Pi
            Call dbflow(d, ed, ang, vsl, vsg, denl, deng, visl, Hl, FF, pgt, pgf, pgg, pga)
        End If
        If (fpt = "str" Or fpt = "ann") Then
            Call saflow(d, ed, ang, vsl, vsg, denl, deng, dengo, visl, visg, _
                    surl, Hl, FF, pgt, pgf, fpt, p, hlf, vf, SF, thf, icon, hls, VC, pgg, pga)
            SL = SF
        End If
    End If
L60:
    'continue
    '     --------------------------------------
    '     change variables back to british units
    '     --------------------------------------
    pgf = pgf / 101325#
    pgg = pgg / 101325#
    pga = pga / 101325#
    pgt = pgt / 101325#
    p = p / 101325#
    visg = visg * 1000#
    visl = visl * 1000#
L900:
End Sub
 
Private Sub stslug(d, ed, ang, vsg, denl, deng, dengo, visl, visg, surl, vst)
    ' tolerances for iterations
    Dim E1, fec, hlsc, g, surw, axp, cs, CC, an1, fi, vdb, VM
    E1 = 0.0001
    ' limitation for liquid entraiment fraction in gas core
    fec = 0.75
    ' limitation for liquid holdup in slug body
    hlsc = 0.36
    ' constants
    'const_Pi = 3.1415926
    g = 9.81
    ' surface tension of water against air
    surw = 0.0731
    ' density of air at atmospheric pressure
    dengo = 1.2
    ' cross sectional area of the pipe
    axp = const_Pi * d * d / 4#
    cs = (32# * cosd(ang) ^ 2 + 16# * sind(ang) ^ 2) * d
    CC = 1.25 - 0.5 * Abs(sind(ang))
    an1 = const_Pi * 0.5
    fi = 0.0142
    Call dislug(d, ed, ang, vsg, denl, deng, visl, surl, vdb)
    ' guess a vst
    vst = 0.5
    VM = vst + vsg
    Dim hls, feo, hlfo, hlso, icon
    hls = 1# / (1# + (VM / 8.66) ^ 1.39)
    If (hls < hlsc) Then hls = hlsc
    feo = 0#
    hlfo = vst / VM
    hlso = hls
    icon = 0
L5:
    If (vst > vdb) Then GoTo L90
    ' entrainment fraction according to oliemans et al."s (1986) correlation
    Dim resg, web, fro, resl, ccc, fe, VT, hlf, hlc, af, ac
    resg = Abs(deng * vsg * d / visg)
    web = Abs(deng * vsg * vsg * d / surl)
    fro = Abs(Sqr(g * d) / vsg)
    resl = Abs(denl * vst * d / visl)
    ccc = 0.003 * web ^ 1.8 * fro ^ 0.92 * resl ^ 0.7 * (denl / deng) ^ 0.38 * (visl / visg) ^ 0.97 / resg ^ 1.24
    fe = ccc / (1# + ccc)
    If (fe > fec) Then fe = fec
    fe = (fe + 9# * feo) / 10#
    feo = fe
    ' translational velocity according to nicklin (1962), bendiksen (1984)
    ' and zhang et al. (2000)
    VT = 1.3 * VM + (0.54 * cosd(ang) + 0.35 * sind(ang)) * Sqr(g * d * (denl - deng) / denl)
    hlf = ((hls * (VT - VM) + vst) * (vsg + vst * fe) - VT * vst * fe) / (VT * vsg)
    If (hlf <= 0#) Then hlf = Abs(hlf)
    If (hlf >= 1#) Then hlf = 1# / hlf
    hlf = (hlf + 9# * hlfo) / 10#
    hlfo = hlf
    hlc = (1# - hlf) * vst * fe / (VM - vst * (1# - fe))
    If (hlc < 0#) Then hlc = 0#
    af = hlf * axp
    ac = (1# - hlf) * axp
    ' wetted angle
    ' calculate wetted angle using newton"s method
    Dim an2, tha, AN, th0, Th
    If (af < axp) Then
L10:
        an2 = an1 - 0.5 * (8# * af / d / d + Sin(an1) - an1) / (Cos(an1) - 1#)
        If (an2 > 2# * const_Pi Or an2 < 0#) Then an2 = 1.5 * const_Pi
        tha = Abs((an2 - an1) / an1)
        If (tha > E1) Then
            an1 = an2
            GoTo L10
            Else
            AN = an2
        End If
        Else
        AN = 2# * const_Pi
        af = axp
    End If
    ' wetted wall fraction according to grolman et al., aiche (1996)
    If (Abs(ang) < 85#) Then
        th0 = AN / (2# * const_Pi)
        Th = th0 * (surw / surl) ^ 0.15 + deng * (denl * vst * vst * d / surl) ^ 0.25 _
        * (vsg * vsg / ((1# - hlf) ^ 2 * g * d)) ^ 0.8 / ((denl - deng) * cosd(ang))
        If (Th > 1#) Then Th = 1#
        Else
        Th = 1#
    End If
    ' wetted perimeters
    Dim SF, sc, AB, si, DF, thf, DC, vf, VC, denc, ref, REC, FF, fc
    SF = const_Pi * d * Th
    sc = const_Pi * d * (1# - Th)
    AB = d * d * (const_Pi * Th - Sin(2# * Th * const_Pi) / 2#) / 4#
    si = (SF * (AB - af) + d * Sin(const_Pi * Th) * af) / AB
    ' the hydraulic diameters
    DF = 4# * af / SF
    thf = 2# * af / (SF + si)
    DC = 4# * ac / (sc + si)
    vf = vst * (1# - fe) / hlf
    VC = (VM - vst * (1# - fe)) / (1# - hlf)
    ' reynolds numbers
    denc = (denl * hlc + deng * (1# - hlf - hlc)) / (1# - hlf)
    ref = Abs(denl * vf * DF / visl)
    REC = Abs(deng * VC * DC / visg)
    ' friction factors
    FF = 0.046 / (ref) ^ 0.2
    fc = 0.046 / (REC) ^ 0.2
    '      ff=1.0/(3.6*log10(6.9/ref+(ed/3.7)^1.11))^2
    '      fc=1.0/(3.6*log10(6.9/rec+(ed/3.7)^1.11))^2
    ' interfacial friction factor
    ' stratified flow interfacial friction factor
    ' interfacial friction factor according to andritsos et al. (1987)
    ' modified by zhang (2001)
    Dim vsgt, abcd, vfn, abu, dpex, remx, FM, dpsl, ad
    
    vsgt = 5# * Sqr(dengo / deng)
    fi = fc * (1# + 15# * (2# * thf / d) ^ 0.5 * (vsg / vsgt - 1#))
    If (fi < fc) Then fi = fc
    abcd = (sc * fc * deng * VC * Abs(VC) / (2# * ac) + si * fi * deng * (VC - vf) * Abs(VC - vf) * (1# / af + 1# / ac) / 2# _
         - (denl - denc) * g * sind(ang)) * af * 2# / (SF * FF * denl)
    If (abcd < 0#) Then
        vfn = vf * 0.9
        GoTo L20
        Else
    End If
    vfn = Sqr(abcd)
L20:
    abu = Abs((vfn - vf) / vf)
    If (abu > E1) Then
        vf = (vfn + 9# * vf) / 10#
        vst = vf * hlf / (1# - fe)
        VM = vst + vsg
        dpex = (denl * (VM - vf) * (VT - vf) * hlf + denc * (VM - VC) * (VT - VC) * (1# - hlf)) * d / cs / 4#
        '          denm=denl*hls+deng*(1.0-hls)
        remx = Abs(d * VM * denl / visl)
        FM = 1# / (3.6 * Log10(6.9 / remx + (ed / 3.7) ^ 1.11)) ^ 2
        dpsl = FM * denl * VM * VM / 2#
        ad = (dpsl + dpex) / (3.16 * CC * Sqr(surl * (denl - deng) * g))
        hls = 1# / (1# + ad)
        If (hls < hlsc) Then hls = hlsc
        hls = (hls + 9# * hlso) / 10#
        hlso = hls
        icon = icon + 1
        GoTo L5
        Else
    End If
    vst = vfn * hlf / (1# - fe)
L90:
    If (vst > vdb) Then vst = vdb
    Exit Sub
End Sub
Private Sub anslug(d, ed, ang, vsl, denl, deng, dengo, visl, visg, surl, van)
    Dim E1, fec, hlsc, g, surw, axp, cs, CC, an1, fi, vdb, VM, hls, hlso, feo, hlfo, web, fro
    Dim resl, resg, ccc, fe, VT, hlf, hlc, af, ac, an2, tha, AN, th0, Th
    Dim SF, sc, AB, si, DF, thf, DC, vf, VC, denc, ref, REC, fr2, fr3, FF, fc, vsgt
    Dim abcd, vcn, abu, dpex, remx, FM, dpsl, ad
    
    ' tolerances for iterations
    E1 = 0.0001
    ' limitation for liquid entraiment fraction in gas core
    fec = 0.75
    ' limitation for liquid holdup in slug body
    hlsc = 0.36
    ' constants
    'const_Pi = 3.1415926
    g = 9.81
    ' surface tension of water against air
    surw = 0.0731
    ' density of air at atmospheric pressure
    dengo = 1.2
    ' cross sectional area of the pipe
    axp = const_Pi * d * d / 4#
    cs = (32# * cosd(ang) ^ 2 + 16# * sind(ang) ^ 2) * d
    CC = 1.25 - 0.5 * Abs(sind(ang))
    an1 = const_Pi * 0.5
    fi = 0.0142
    ' guess a van
    van = 10#
    VM = vsl + van
    hls = 1# / (1# + (VM / 8.66) ^ 1.39)
    If (hls < hlsc) Then hls = hlsc
    hlso = hls
    feo = 0#
    hlfo = vsl / VM
    ' entrainment fraction according to oliemans et al"s (1986) correlation
L105:
    web = deng * van * van * d / surl
    fro = Sqr(g * d) / van
    resl = denl * vsl * d / visl
    resg = deng * van * d / visg
    ccc = 0.003 * web ^ 1.8 * fro ^ 0.92 * resl ^ 0.7 * (denl / deng) ^ 0.38 * (visl / visg) ^ 0.97 / resg ^ 1.24
    fe = ccc / (1# + ccc)
    If (fe > fec) Then fe = fec
    fe = (fe + 9# * feo) / 10#
    feo = fe
    ' translational velocity according to nicklin (1962), bendiksen (1984)
    ' and zhang et al. (2000)
    VT = 1.3 * VM + (0.54 * cosd(ang) + 0.35 * sind(ang)) * Sqr(g * d * (denl - deng) / denl)
    hlf = ((hls * (VT - VM) + vsl) * (van + vsl * fe) - VT * vsl * fe) / (VT * van)
    If (hlf <= 0#) Then hlf = Abs(hlf)
    If (hlf >= 1#) Then hlf = 1# / hlf
    hlf = (hlf + 9# * hlfo) / 10#
    hlfo = hlf
    hlc = (1# - hlf) * vsl * fe / (VM - vsl * (1# - fe))
    If (hlc < 0#) Then hlc = 0#
    af = hlf * axp
    ac = (1# - hlf) * axp
    ' wetted angle
L110:
    an2 = an1 - 0.5 * (8# * af / d / d + Sin(an1) - an1) / (Cos(an1) - 1#)
    If (an2 > 2# * const_Pi) Then an2 = 1.75 * const_Pi
    If (an2 < 0#) Then an2 = 0.25 * const_Pi
    tha = Abs((an2 - an1) / an1)
    If (tha > E1) Then
        an1 = an2
        GoTo L110
        Else
        AN = an2
    End If
    ' wetted wall fraction according to grolman and fortuin (1996)
    If (Abs(ang) < 85#) Then
        th0 = AN / (2# * const_Pi)
        Th = th0 * (surw / surl) ^ 0.15 + deng * (denl * vsl * vsl * d / surl) ^ 0.25 _
             * (van * van / ((1# - hlf) ^ 2 * g * d)) ^ 0.8 / ((denl - deng) * cosd(ang))
        If (Th > 1#) Then Th = 1#
        Else
        Th = 1#
    End If
    ' wetted perimeters
    SF = const_Pi * d * Th
    sc = const_Pi * d * (1# - Th)
    AB = d * d * (const_Pi * Th - Sin(2# * Th * const_Pi) / 2#) / 4#
    si = (SF * (AB - af) + d * Sin(const_Pi * Th) * af) / AB
    ' the hydraulic diameters
    DF = 4# * af / SF
    thf = 2# * af / (SF + si)
    DC = 4# * ac / (sc + si)
    vf = vsl * (1# - fe) / hlf
    VC = (VM - vsl * (1# - fe)) / (1# - hlf)
    ' reynolds numbers
    denc = (denl * hlc + deng * (1# - hlf - hlc)) / (1# - hlf)
    ref = Abs(denl * vf * DF / visl)
    REC = Abs(deng * VC * DC / visg)
    ' frictional factors
    fr2 = 16# / 2000#
    fr3 = 1# / (3.6 * Log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
    '      fr3=0.046/(3000.0)^0.2
    If (ref < 2000#) Then FF = 16# / ref
    If (ref > 3000#) Then FF = 1# / (3.6 * Log10(6.9 / ref + (ed / 3.7) ^ 1.11)) ^ 2
    '      if(ref > 3000.0) ff=0.046/(ref)^0.2
    If (ref >= 2000# And ref <= 3000#) Then FF = fr2 + (fr3 - fr2) * (ref - 2000#) / 1000#
    '      ff=1.0/(3.6*log10(6.9/ref+(ed/3.7)^1.11))^2
    fc = 1# / (3.6 * Log10(6.9 / REC + (ed / 3.7) ^ 1.11)) ^ 2
    '      ff=0.046/(ref)^0.2
    '      fc=0.046/(rec)^0.2
    ' interfacial friction factor according to andritsos et al. (1987)
    ' modified by zhang (2001)
    vsgt = 5# * Sqr(dengo / deng)
    fi = fc * (1# + 15# * (2# * thf / d) ^ 0.5 * (van / vsgt - 1#))
    If (fi < fc) Then fi = fc
    abcd = (SF * FF * denl * vf * Abs(vf) / (2# * af) - sc * fc * deng * VC * VC / (2# * ac) _
         + (denl - denc) * g * sind(ang)) * 2# / (si * fi * deng * (1# / af + 1# / ac))
    If (abcd < 0#) Then
        vcn = VC * 0.9
        GoTo L120
        Else
    End If
    vcn = Sqr(abcd) + vf
L120:
    abu = Abs((vcn - VC) / VC)
    If (abu > E1) Then
        VC = (vcn + 9# * VC) / 10#
        van = VC * (1# - hlf) - vsl * fe
        VM = vsl + van
        dpex = (denl * (VM - vf) * (VT - vf) * hlf + denc * (VM - VC) * (VT - VC) * (1# - hlf)) * d / cs / 4#
        '          denm=denl*hls+deng*(1.0-hls)
        remx = Abs(d * VM * denl / visl)
        FM = 1# / (3.6 * Log10(6.9 / remx + (ed / 3.7) ^ 1.11)) ^ 2
        dpsl = FM * denl * VM * VM / 2#
        ad = (dpsl + dpex) / (3.16 * CC * Sqr(surl * (denl - deng) * g))
        hls = 1# / (1# + ad)
        If (hls < hlsc) Then hls = hlsc
        hls = (hls + 9# * hlso) / 10#
        hlso = hls
        GoTo L105
        Else
    End If
    van = vcn * (1# - hlf) - vsl * fe
    Exit Sub
End Sub
' boundary between slug and dispersed bubble flows
Private Sub dislug(d, ed, ang, vsg, denl, deng, visl, surl, vdb)
    
    Dim E1, fec, hlsc, g, surw, axp, cs, CC, an1, fi, VM, hls, hlso, feo, hlfo, web, fro
    Dim resl, resg, ccc, fe, VT, hlf, hlc, af, ac, an2, tha, AN, th0, Th
    Dim SF, sc, AB, si, DF, thf, DC, vf, VC, denc, ref, REC, fr2, fr3, FF, fc, vsgt
    Dim abcd, vcn, abu, dpex, remx, FM, dpsl, ad, dengo, vdb1, hlb, denm, rem1, vmn, abm, vdb2
    ' tolerances for iterations
    E1 = 0.0001
    ' limitation for liquid entraiment fraction in gas core
    fec = 0.75
    ' limitation for liquid holdup in slug body
    hlsc = 0.36
    ' constants
    'const_Pi = 3.1415926
    g = 9.81
    ' surface tension of water against air
    surw = 0.0731
    ' density of air at atmospheric pressure
    dengo = 1.2
    ' cross sectional area of the pipe
    axp = const_Pi * d * d / 4#
    CC = 1.25 - 0.5 * Abs(sind(ang))
    ' guess a vdb
    vdb1 = 2#
    Dim i As Long
    i = 0
L10:
    i = i + 1
    VM = vdb1 + vsg
    hlb = vdb1 / VM
    denm = (1# - hlb) * deng + hlb * denl
    rem1 = Abs(denm * d * VM / visl)
    FM = 1# / (3.6 * Log10(6.9 / rem1 + (ed / 3.7) ^ 1.11)) ^ 2
    'Open report.txt For Append As #1
    '      add_log_msg "ppp2",hlb,vdb1,vm,denm,rem1,fm,d,visl
    '      fm=0.046/abs(rem1)^0.2
    '      dc=2.0* sqr (0.4*surl/((denl-deng)*g))
    '      en=fm*denm*vm^2*hlb
    vmn = Sqr(((1# / hlb - 1#) * 6.32 * CC * Sqr((denl - deng) * g * surl)) / (FM * denm))
    abm = Abs((vmn - VM) / VM)
    If (abm > E1) And i < 100 Then
        VM = (vmn + 19# * VM) / 20#
        vdb1 = VM - vsg
        GoTo L10
        Else
    End If
    vdb1 = vmn - vsg
    vdb2 = 2#
    Dim ve, DV, En, vn, VD
    ve = vdb2
L30:
    hlb = ve / (vsg + ve)
    VM = vsg + ve
    denm = (1# - hlb) * deng + hlb * denl
    rem1 = Abs(denm * d * VM / visl)
    FM = 1# / (3.6 * Log10(6.9 / rem1 + (ed / 3.7) ^ 1.11)) ^ 2
    '      fm=0.046/abs(rem1)^0.2
    DC = 2# * Sqr(0.4 * surl / ((denl - deng) * g))
    DV = (denl / surl) ^ 0.6 * (2# * FM / d) ^ 0.4
    En = 4.15 * Sqr(1# - hlb) + 0.725
    vn = (En / (DC * DV)) ^ 0.83 - vsg
    VD = Abs((vn - ve) / ve)
    If (VD > E1) Then
        ve = (vn + 9# * ve) / 10#
        GoTo L30
        Else
    End If
L40:
    vdb2 = vn
    If (vdb2 > vdb1) Then
        vdb = vdb2
        Else
        vdb = vdb1
    End If
End Sub
Private Sub buslug(d, vsl, vbu)
    ' constants
    'const_Pi = 3.1415926
    Dim g, axp, vo, hgc
    g = 9.81
    ' cross sectional area of the pipe
    axp = const_Pi * d * d / 4#
    vo = 0.35 * Sqr(g * d)
    hgc = 0.25
    vbu = vsl * hgc / (1# - hgc) + vo * hgc
End Sub
'     single phase flow calculation
Private Sub singlee(d#, ed#, ang#, p#, den#, V#, vis#, FF#, pgt#, pgf#, pge#, pga#)
    Dim E1#, fec#, hlsc#, surw#, dengo#, axp#, Re#, fr2#, fr3#, ekk#
    
    E1 = 0.0001 ' tolerances for iterations
    fec = 0.75 ' limitation for liquid entraiment fraction in gas core
    hlsc = 0.36 'limitation for liquid holdup in slug body
    surw = 0.0731 ' surface tension of water against air
    dengo = const_rho_air ' 1.2 ' density of air at atmospheric pressure
    axp = const_Pi * d * d / 4# ' cross sectional area of the pipe
    pge = -den * sind(ang) * const_g '     calculate elevation pressure gradient.
    Re = Abs(d * den * V / vis)
    FF = unf_friction_factor(Re, ed, 4) / 4
    pgf = -2# * FF * den * V * V / d '     calculate frictional pressure gradient.
    ekk = den * V * V / p
    If (ekk > 0.95) Then ekk = 0.95
    pgt = (pge + pgf) / (1# - ekk)
    pga = pgt * ekk '     calculate accelerational pressure gradient.
    pgt = (pge + pgf + pga)
    If (den > 400#) Then
        pgt = (pge + pgf)
        pga = 0#
    End If
End Sub
Private Sub dbflow(d#, ed#, ang#, vsl#, vsg#, denl#, deng#, visl#, Hl#, FM#, pgt#, pgf#, pge#, pga#)
    Dim E1#, fec#, hlsc#, surw#, dengo#, axp#, ekk#, icrit, VM#, denm#, dens#, rem1#
    
    ' tolerances for iterations
    E1 = 0.0001
    ' limitation for liquid entraiment fraction in gas core
    fec = 0.75
    ' limitation for liquid holdup in slug body
    hlsc = 0.36
    ' surface tension of water against air
    surw = 0.0731
    ' density of air at atmospheric pressure
    dengo = 1.2
    ' cross sectional area of the pipe
    axp = const_Pi * d * d / 4#
    VM = vsg + vsl
    '     calculate liquid holdup
    Hl = vsl / (vsg + vsl)
    '     calculate pressure gradients
    denm = (1# - Hl) * deng + Hl * denl
    dens = denm + Hl * (denl - denm) / 3#
    rem1 = Abs(dens * d * VM / visl)
    FM = unf_friction_factor(rem1, ed, 4) / 4
    pgf = -2# * FM * dens * VM ^ 2 / d
    pge = -const_g * denm * sind(ang)
    pga = 0#
    pgt = (pgf + pge + pga)
End Sub
Private Sub buflow(d#, ed#, ang#, vsl#, vsg#, denl#, deng#, visl#, surl#, Hl#, FM#, pgt#, pgf#, pge#, pga#)
    Dim E1#, fec#, hlsc#, surw#, dengo#, axp#, Re#, fr2#, fr3#, ekk#, icrit#, VM#, vo#, denm#, dens#, rem1#
    ' tolerances for iterations
    E1 = 0.0001
    ' limitation for liquid entraiment fraction in gas core
    fec = 0.75
    ' limitation for liquid holdup in slug body
    hlsc = 0.36
    ' surface tension of water against air
    surw = 0.0731
    ' density of air at atmospheric pressure
    dengo = 1.2
    ' cross sectional area of the pipe
    axp = const_Pi * d * d / 4#
    VM = vsg + vsl
    vo = 1.53 * (const_g * (denl - deng) * surl / denl / denl) ^ 0.25 * sind(ang)
    '     calculate liquid holdup
    If (Abs(ang) < 10#) Then
        Hl = vsl / (vsg + vsl)
        Else
        Hl = (Sqr((VM - vo) ^ 2 + 4# * vsl * vo) - vsg - vsl + vo) / (2# * vo)
    End If
    '     calculate pressure gradients
    denm = (1# - Hl) * deng + Hl * denl
    dens = denm + Hl * (denl - denm) / 3#
    rem1 = Abs(dens * d * VM / visl)
    FM = unf_friction_factor(rem1, ed, 4) / 4
    pgf = -2# * FM * dens * VM ^ 2 / d
    pge = -const_g * denm * sind(ang)
    pga = 0#
    pgt = (pgf + pge + pga)
End Sub
' intermittent flow calculation
Private Sub itflow(d#, ed#, ang#, vsl#, vsg#, denl#, deng#, dengo#, visl#, visg#, _
 surl#, Hl#, FF#, pgt#, pgf#, fpt As String, cu#, hlf#, vf#, fqn#, rsu#, hls#, icon#, _
 VC#, cs#, cf#, pgg#, pga#)
 
    Dim VM#, eq#, hlsc#, surw#, axp#, hlso#, VT#, CC#, an1#, E1#
    icon = 0
    VM = vsl + vsg
    E1 = 0.0001 ' tolerances for iterations
    hlsc = 0.36 ' limitation for liquid holdup in slug body
    surw = 0.0731 ' surface tension of water against air
    dengo = 1.2 ' density of air at atmospheric pressure
    axp = const_Pi * d * d / 4# ' cross sectional area of the pipe
    hls = 1# / (1# + (VM / 8.66) ^ 1.39)
    If (hls < hlsc) Then hls = hlsc
    hlso = hls
    ' translational velocity according to nicklin (1962), bendiksen (1984)
    ' and zhang et al. (2000)
    VT = 1.3 * VM + (0.54 * cosd(ang) + 0.35 * sind(ang)) * Sqr(const_g * d * (denl - deng) / denl)
    ' slug length
    cs = (32# * cosd(ang) ^ 2 + 16# * sind(ang) ^ 2) * d
    CC = 1.25 - 0.5 * Abs(sind(ang))
    ' guess cu and cf
    cu = cs * VM / vsl
    cf = cu - cs
    hlf = vsl / VM
    ' frictional factors based on superfacial velocities and pipe diameter
    ' assuming the flow state is turbulent
    an1 = const_Pi * 0.7
L5:
    cu = cf + cs
    Dim vfn, hlfn, af, ac, dpex, rem1, FM, dpsl, ad
    vfn = (cu * vsl - cs * hls * VM) * VT / (cf * VT * hls + cu * (vsl - hls * VM))
    vf = (vfn + 9# * vf) / 10#
    '      vf=vfn
    hlfn = (cf * VT * hls + cu * (vsl - hls * VM)) / (cf * VT)
    If (hlfn <= 0#) Then
      hlfn = vsl / VM 'Abs(hlfn)
    End If
    If (hlfn >= 1#) Then
      hlfn = vsl / VM '1# - 1# / hlfn
    End If
    hlf = (hlfn + 4# * hlf) / 5#
    '      hlf=hlfn
    VC = (VM - hlf * vf) / (1# - hlf)
    af = hlf * axp
    ac = (1# - hlf) * axp
    ' slug liquid holdup
    dpex = (denl * (VM - vf) * (VT - vf) * hlf + deng * (VM - VC) * (VT - VC) * (1# - hlf)) * d / cs / 4#
    '       denm=denl*hls+deng*(1.0-hls)
    rem1 = Abs(denl * VM * d / visl)
    FM = 1# / (3.6 * Log10(6.9 / rem1 + (ed / 3.7) ^ 1.11)) ^ 2
    dpsl = FM * denl * VM * VM / 2#
    ad = (dpsl + dpex) / (3.16 * CC * Sqr(surl * (denl - deng) * const_g))
    hls = 1# / (1# + ad)
    If (hls < hlsc) Then hls = hlsc
    hls = (hls + 9# * hlso) / 10#
    hlso = hls
    ' wetted angle assuming flat film surface
    ' calculated using newton"s method
    Dim an2, tha, AN, vsgf, vslf, th0, Th
    If (af < axp) Then
L10:
        an2 = an1 - 0.5 * (8# * af / d / d + Sin(an1) - an1) / (Cos(an1) - 1#)
        If (an2 > 2# * const_Pi) Then an2 = 1.75 * const_Pi
        If (an2 < 0#) Then an2 = 0.25 * const_Pi
        tha = Abs((an2 - an1) / an1)
        If (tha > E1) Then
            an1 = an2
            GoTo L10
            Else
            AN = an2
        End If
        Else
        AN = 2# * const_Pi
        af = axp
    End If
    ' wetted wall fraction according to grolman et al., aiche (1996)
    vsgf = VC * (1# - hlf)
    vslf = vf * hlf
    If (Abs(ang) < 85#) Then
        th0 = AN / (2# * const_Pi)
        Th = th0 * (surw / surl) ^ 0.15 + deng * (denl * vslf * vslf * d / surl) ^ 0.25 _
             * (vsgf * vsgf / ((1# - hlf) ^ 2 * const_g * d)) ^ 0.8 / ((denl - deng) * cosd(ang))
        If (Th > 1#) Then Th = 1#
        Else
        Th = 1#
    End If
    ' wetted perimeters
    Dim SF, sc, AB, si, DF, thf, DC, denc, ref, REC, fr2, fr3, fc, vsgt
    Dim abcd, vcn, abu, remx, vdb1, hlb, denm, vmn, abm, vdb2
    
    SF = const_Pi * d * Th
    sc = const_Pi * d * (1# - Th)
    AB = d * d * (const_Pi * Th - Sin(2# * Th * const_Pi) / 2#) / 4#
    si = (SF * (AB - af) + d * Sin(const_Pi * Th) * af) / AB
    ' the hydraulic diameters
    DF = 4# * af / SF
    thf = 2# * af / (SF + si)
    DC = 4# * ac / (sc + si)
    ' reynolds numbers
    ref = Abs(denl * vf * DF / visl)
    REC = Abs(deng * VC * DC / visg)
    ' frictional factors
    fr2 = 16# / 2000#
    fr3 = 1# / (3.6 * Log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
    '      fr3=0.046/(3000.0)^0.2
    If (ref < 2000#) Then FF = 16# / ref
    If (ref > 3000#) Then FF = 1# / (3.6 * Log10(6.9 / ref + (ed / 3.7) ^ 1.11)) ^ 2
    '      if(ref > 3000.0) ff=0.046/(ref)^0.2
    If (ref >= 2000# And ref <= 3000#) Then FF = fr2 + (fr3 - fr2) * (ref - 2000#) / 1000#
    If (REC < 2000#) Then fc = 16# / REC
    If (REC > 3000#) Then fc = 1# / (-3.6 * Log10(6.9 / REC + (ed / 3.7) ^ 1.11)) ^ 2
    '      if(rec > 3000.0) fc=0.046/(rec)^0.2
    If (REC >= 2000# And REC <= 3000#) Then fc = fr2 + (fr3 - fr2) * (REC - 2000#) / 1000#
    ' interfacial friction factor according to andritsos et al. (1987)
    ' modified by zhang (2001)
    vsgt = 5# * Sqr(dengo / deng)
    Dim fi, fsl
    fi = fc * (1# + 15# * (2# * thf / d) ^ 0.5 * (vsgf / vsgt - 1#))
    '      fi=fc*(1.0+14.3*abs(hlf)^0.5*(vsgf/vsgt-1.0))
    ' interfacial friction factor (annular) according to ambrosini et al. (1991)
    '       reg=abs(vc*deng*d/visg)
    '       wed=deng*vc*vc*d/surl
    '       fs=0.046/reg^0.2
    '      shi=fi*deng*(vc-vf)^2/2.0
    '      thfo=thf* sqr (shi*deng)/visg
    '      fra=fs*(1.0+13.8*(thfo-200.0* sqr (deng/denl))*wed^0.2/reg^0.6)
    '      fi=(frs+fra)/2.0
    If (fi < fc) Then fi = fc
    If (fi > 1#) Then fi = 1#
    '      if(fi < 0.0142) fi=0.0142
    ' calculate film length cf using the combined momentum eqaution
    fsl = denl * (VM - vf) * (VT - vf) - deng * (VM - VC) * (VT - VC)
    abcd = SF * FF * denl * vf * Abs(vf) / 2# / af _
         - sc * fc * deng * VC * Abs(VC) / 2# / ac _
         - si * fi * deng * (VC - vf) * Abs(VC - vf) / 2# * (1# / af + 1# / ac) _
         + (denl - deng) * const_g * sind(ang)
    Dim abef, cfn, cfm, cfo, dens
    abef = 3# * SF * visl * vf / thf / af _
         - SF * fi * deng * (VC - vf) * Abs(VC - vf) / 4# / af _
         - sc * fc * deng * VC * Abs(VC) / 2# / ac _
         - si * fi * deng * (VC - vf) * Abs(VC - vf) / 2# * (1# / af + 1# / ac) _
         + (denl - deng) * const_g * sind(ang)
    cfn = fsl / abcd
    cfm = fsl / abef
    icon = icon + 1
    If (ref > 3000#) Then cfo = cfn
    If (ref < 2000#) Then cfo = cfm
    If (ref <= 3000# And ref >= 2000#) Then cfo = (cfn * (ref - 2000#) + cfm * (3000# - ref)) / 1000#
    If (cfo < 0#) Then
      cfo = 0.5 * cs * (VM / vsl - 1) '-cfo
    End If
    abu = Abs((cfo - cf) / cf)
    If (abu < E1 Or icon > 100) Then GoTo L100
    cf = (cfo + 9# * cf) / 10#
    GoTo L5
L100:
    cf = cfo
    ' slug unit length
    cu = cf + cs
    '      vf=(cu*vsl-cs*hls*vm)*vt
    '     & /(cf*vt*hls+cu*(vsl-hls*vm))
    '      hlf=(cf*vt*hls+cu*(vsl-hls*vm))/(cf*vt)
    '      vc=(vm-hlf*vf)/(1.0-hlf)
    denm = denl * hls + deng * (1# - hls)
    dens = denm + hls * (denl - denm) / 3#
    Dim res, fs, fos, dps, fof, dpf
    res = Abs(dens * VM * d / visl)
    fr2 = 16# / 2000#
    fr3 = 1# / (3.6 * Log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
    '      fr3=0.046/(3000.0)^0.2
    If (res < 2000#) Then fs = 16# / res
    If (res > 3000#) Then fs = 1# / (3.6 * Log10(6.9 / res + (ed / 3.7) ^ 1.11)) ^ 2
    '      if(res > 3000.0) fs=0.046/(res)^0.2
    If (res >= 2000# And res <= 3000#) Then fs = fr2 + (fr3 - fr2) * (res - 2000#) / 1000#
    ' slug freq_Hz
    fqn = VT / cu
    ' slug to slug unit length ratio
    rsu = cs / cu
    ' pressure gradient in slug
    fos = (denl * (VM - vf) * (VT - vf) * hlf + deng * (VM - VC) * (VT - VC) * (1# - hlf)) / cs
    dps = -fs * dens * VM * VM * 2# / d - denm * const_g * sind(ang) - fos
    ' pressure gradient in film
    fof = fos * cs / cf
    dpf = fof - SF * FF * denl * vf * Abs(vf) / (2# * axp) _
     - sc * fc * deng * VC * Abs(VC) / (2# * axp) _
     - (denl * hlf + deng * (1# - hlf)) * const_g * sind(ang)
    ' total pressure gradient
    pgt = (dps * cs + dpf * cf) / cu
    ' total pressure gradient due to friction
    pgf = -((fs * dens * VM * VM * 2# / d) * cs _
     + (SF * FF * denl * vf * Abs(vf) / (2# * axp) _
     + sc * fc * deng * VC * Abs(VC) / (2# * axp)) * cf) / cu
    pgg = pgt - pgf
    pga = 0
    ' overall liquid holdup
    Hl = (cf * hlf + hls * cs) / cu
    If (Abs(cf) < d) Then '
     If (res < 2000) Then
        fpt = "bub"
     Else
        fpt = "d-b"
     End If
    End If
    'If (Abs(cf) < d) Then fpt = "d-b"
    If (Abs(cf) > 199# * cs Or hlf > hls) Then
        fpt = "ann"
        If (vf < 0#) Then vf = vsl / hlf
    End If
L280:
    Exit Sub
End Sub
' stratified and/or annular flow calculation
Private Sub saflow(d#, ed#, ang#, vsl#, vsg#, denl#, deng#, dengo#, visl#, visg#, _
                    surl#, Hl#, FF#, pgt#, pgf#, fpt As String, p#, hlf#, vf#, SF#, thf#, icon#, hlc#, VC#, pgg#, pga#)
 
    Dim E1, fec, hlsc, g, surw, axp, cs, CC, an1, fi, vdb, VM, hls, hlso, feo, hlfo, web, fro
    Dim resl, resg, ccc, fe, VT, af, ac, an2, tha, AN, th0, Th
    Dim sc, AB, si, DF, DC, denc, ref, REC, fr2, fr3, fc, vsgt
    Dim abcd, vcn, abu, dpex, remx, FM, dpsl, ad
    'Dim fpt As String * 3
    icon = 0
    ' tolerances for iterations
    E1 = 0.0001
    ' limitation for liquid entraiment fraction in gas core
    fec = 0.75
    ' limitation for liquid holdup in slug body
    hlsc = 0.36
    ' constants
    'const_Pi = 3.1415926
    g = 9.81
    ' surface tension of water against air
    surw = 0.0731
    ' density of air at atmospheric pressure
    dengo = 1.2
    ' cross sectional area of the pipe
    axp = const_Pi * d * d / 4#
    fi = 0.0142
    ' entrainment fraction according to oliemans et al"s (1986) correlation
    resg = Abs(deng * vsg * d / visg)
    web = Abs(deng * vsg * vsg * d / surl)
    fro = Abs(Sqr(g * d) / vsg)
    resl = Abs(denl * vsl * d / visl)
    ccc = 0.003 * web ^ 1.8 * fro ^ 0.92 * resl ^ 0.7 _
     * (denl / deng) ^ 0.38 * (visl / visg) ^ 0.97 / resg ^ 1.24
    fe = ccc / (1# + ccc)
    If (fe > 1#) Then fe = 1#
    ' guess a film velocity
    vf = vsl
    hlf = vsl / (vsl + vsg)
    an1 = 0.7 * const_Pi
L5:
    Dim hlfn
    hlfn = vsl * (1# - fe) / vf
    If (hlfn <= 0#) Then hlfn = Abs(hlfn)
    If (hlfn >= 1#) Then hlfn = 1# - 1# / hlfn
    hlf = (hlfn + 4# * hlf) / 5#
    '      hlf=hlfn
    VC = (vsg + fe * vsl) / (1# - hlf)
    af = hlf * axp
    ac = (1# - hlf) * axp
    hlc = vsl * fe / VC
    If (hlc < 0#) Then hlc = 0#
    denc = (denl * hlc + deng * (1# - hlf - hlc)) / (1# - hlf)
    ' wetted angle assuming flat film surface
    ' calculated using newton"s method
    If (af < axp) Then
L10:
        an2 = an1 - 0.5 * (8# * af / d / d + Sin(an1) - an1) / (Cos(an1) - 1#)
        If (an2 > 2# * const_Pi) Then an2 = 1.75 * const_Pi
        If (an2 < 0#) Then an2 = 0.25 * const_Pi
        tha = Abs((an2 - an1) / an1)
        If (tha > E1) Then
            an1 = an2
            GoTo L10
            Else
            AN = an2
        End If
        Else
        AN = 2# * const_Pi
        af = axp
    End If
    ' wetted wall fraction according to grolman et al., aiche (1996)
    If (Abs(ang) < 85#) Then
        th0 = AN / (2# * const_Pi)
        Th = th0 * (surw / surl) ^ 0.15 + deng * (denl * vsl * vsl * d / surl) ^ 0.25 _
             * (vsg * vsg / ((1# - hlf) ^ 2 * g * d)) ^ 0.8 _
             / ((denl - deng) * cosd(ang))
        If (Th > 1#) Then Th = 1#
        Else
        Th = 1#
    End If
    If (Th > 0.9) Then
        fpt = "ann"
        Else
        fpt = "str"
    End If
    ' wetted perimeters
    SF = const_Pi * d * Th
    sc = const_Pi * d * (1# - Th)
    AB = d * d * (const_Pi * Th - Sin(2# * Th * const_Pi) / 2#) / 4#
    si = (SF * (AB - af) + d * Sin(const_Pi * Th) * af) / AB
    ' the hydraulic diameters
    DF = 4# * af / SF
    thf = 2# * af / (SF + si)
    DC = 4# * ac / (sc + si)
    ' reynolds numbers
    ref = Abs(denl * vf * DF / visl)
    REC = Abs(deng * VC * DC / visg)
    ' friction factors
    fr2 = 16# / 2000#
    fr3 = 1# / (3.6 * Log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
    '      fr3=0.046/(3000.0)^0.2
    If (ref < 2000#) Then FF = 16# / ref
    If (ref > 3000#) Then FF = 1# / (3.6 * Log10(6.9 / ref + (ed / 3.7) ^ 1.11)) ^ 2
    '      if(ref > 3000.0) ff=0.046/(ref)^0.2
    If (ref >= 2000# And ref <= 3000#) Then FF = fr2 + (fr3 - fr2) * (ref - 2000#) / 1000#
    If (REC < 2000#) Then fc = 16# / REC
    If (REC > 3000#) Then fc = 1# / (3.6 * Log10(6.9 / REC + (ed / 3.7) ^ 1.11)) ^ 2
    '      if(rec > 3000.0) fc=0.046/(rec)^0.2
    If (REC >= 2000# And REC <= 3000#) Then fc = fr2 + (fr3 - fr2) * (REC - 2000#) / 1000#
    ' interfacial friction factor (stratified) according to andritsos et al. (1987)
    ' modified by zhang (2001)
    vsgt = 5# * Sqr(dengo / deng)
    Dim frs
    frs = fc * (1# + 15# * (2# * thf / d) ^ 0.5 * (vsg / vsgt - 1#))
    '      frs=fc*(1.0+14.3*abs(hlf)^0.5*(vsg/vsgt-1.0))
    '      if(frs < fc) frs=fc
    ' interfacial friction factor (annular) according to ambrosini et al. (1991)
    Dim reg, wed, shi, thfo, fra, fs, vfn, vfm, vfo
    reg = Abs(VC * deng * d / visg)
    wed = deng * VC * VC * d / surl
    fs = 0.046 / reg ^ 0.2
    shi = Abs(fi * deng * (VC - vf) ^ 2 / 2#)
    thfo = thf * Sqr(shi * deng) / visg
    fra = fs * (1# + 13.8 * (thfo - 200# * Sqr(deng / denl)) * wed ^ 0.2 / reg ^ 0.6)
    If (REC > 10000#) Then
        fi = (10000# * frs / REC + fra) / (1# + 10000# / REC)
        Else
        fi = (fra + frs) / 2#
    End If
    If (fpt = "ann") Then fi = fra
    If (fi < fc) Then fi = fc
    If (fi > 1#) Then fi = 1#
    ' iterations
    abcd = (sc * fc * deng * VC * Abs(VC) / (2# * ac) + si * fi * deng * (VC - vf) * Abs(VC - vf) * (1# / af + 1# / ac) / 2# _
         - (denl - denc) * g * sind(ang)) * af * 2# / (SF * FF * denl)
    If (abcd > 0#) Then
        vfn = Sqr(abcd)
        Else
        vfn = -Sqr(-abcd)
    End If
    vfm = (sc * fc * deng * VC * Abs(VC) / (2# * ac) _
         + si * fi * deng * (VC - vf) * Abs(VC - vf) * (1# / af + 1# / ac) / 2# _
          - (denl - denc) * g * sind(ang) _
         + SF * fi * deng * (VC - vf) * Abs(VC - vf) / (4# * af)) * af * thf / (3# * SF * visl)
    icon = icon + 1
    If (ref > 3000#) Then vfo = vfn
    If (ref < 2000#) Then vfo = vfm
    If (ref <= 3000# And ref >= 2000#) Then vfo = (vfn * (ref - 2000#) + vfm * (3000# - ref)) / 1000#
L20:
    abu = Abs((vfo - vf) / vf)
    If (abu < E1 Or icon > 10000) Then GoTo L100
    vf = (vfo + 9# * vf) / 10#
    GoTo L5
L100:
    vf = vfo
    hlfn = vsl * (1# - fe) / vf
    If (hlfn <= 0#) Then hlfn = Abs(hlfn)
    If (hlfn >= 1#) Then hlfn = 1# - 1# / hlfn
    hlf = (hlfn + 4# * hlf) / 5#
    VC = (vsg + fe * vsl) / (1# - hlf)
    af = hlf * axp
    ac = (1# - hlf) * axp
    hlc = vsl * fe / VC
    If (hlc < 0#) Then hlc = 0#
    ' frictional factors
    denc = (denl * hlc + deng * (1# - hlf - hlc)) / (1# - hlf)
    ' pressure gradient
    Dim dpf
    If (fpt = "ann") Then
        dpf = -si * fi * deng * (VC - vf) * Abs(VC - vf) / (2# * ac) - denc * g * sind(ang)
        Else
        dpf = -SF * FF * denl * vf * Abs(vf) / (2# * axp) _
             - sc * fc * deng * VC * Abs(VC) / (2# * axp) _
             - (denl * hlf + denc * (1# - hlf)) * g * sind(ang)
    End If
    ' total pressure gradient
    pgt = dpf / (1# - deng * VC * vsg / (p * (1# - hlf)))
    ' total pressure gradient due to friction
    pgf = dpf + (denl * hlf + denc * (1# - hlf)) * g * sind(ang)
    pgg = -(denl * hlf + denc * (1# - hlf)) * g * sind(ang)
    pga = pgt - pgf - pgg
    ' liquid holdup
    Hl = hlf + hlc
    Exit Sub
End Sub
Function unf_friction_factor(ByVal n_Re As Double, _
                             ByVal roughness_d As Double, _
                    Optional ByVal friction_corr_type As Integer = 3, _
                    Optional ByVal smoth_transition As Boolean = False)
    'Calculates friction factor given pipe relative roughness and Reinolds number
    'Parameters
    'n_re - Reinolds number
    'roughness_d - pipe relative roughness
    'friction_corr_type - flag indicating correlation type selection
    ' 0 - Colebrook equation solution
    ' 1 - Drew correlation for smooth pipes
    '
    
    Dim f_n, f_n_new, f_int As Double
    Dim i As Integer
    Dim ed As Double
    Dim Svar As Double
    Dim f_1 As Double
    Dim Re_save As Double
    Const lower_Re_lim = 2000#
    Const upper_Re_lim = 4000#
    
    ed = roughness_d
    
    If n_Re = 0 Then
        f_n = 0
    ElseIf n_Re < lower_Re_lim Then 'laminar flow
        f_n = 64 / n_Re
    Else 'turbulent flow
        Re_save = -1
        If smoth_transition And (n_Re > lower_Re_lim And n_Re < upper_Re_lim) Then
        ' be ready to interpolate for smooth transition
            Re_save = n_Re
            n_Re = upper_Re_lim
        End If
        Select Case friction_corr_type
            Case 0
                'calculate friction factor for rough pipes according to Moody method - Payne et all modification for Beggs&Brill correlation
                ' Zigrang and Sylvester  1982  https://en.wikipedia.org/wiki/Darcy_friction_factor_formulae
                f_n = (2 * Log10(2 / 3.7 * ed - 5.02 / n_Re * Log10(2 / 3.7 * ed + 13 / n_Re))) ^ -2
                  
                i = 0
                Do 'iterate until error in friction factor is sufficiently small
                       'https://en.wikipedia.org/wiki/Darcy_friction_factor_formulae
                       ' expanded form  of the Colebrook equation
                      f_n_new = (1.7384 - 2 * Log10(2 * ed + 18.574 / (n_Re * f_n ^ 0.5))) ^ -2
                      i = i + 1
                      f_int = f_n
                      f_n = f_n_new
                      'stop when error is sufficiently small or max number of iterations exceedied
                Loop Until (Abs(f_n_new - f_int) <= 0.001 Or i > 19)
            Case 1
                'Calculate friction factor for smooth pipes using Drew correlation - original Begs&Brill with no modification
                f_n = 0.0056 + 0.5 * n_Re ^ -0.32
            
            Case 2
                ' Zigrang and Sylvester  1982  https://en.wikipedia.org/wiki/Darcy_friction_factor_formulae
                f_n = (2 * Log10(1 / 3.7 * ed - 5.02 / n_Re * Log10(1 / 3.7 * ed + 13 / n_Re))) ^ -2
            Case 3
                ' Brkic shows one approximation of the Colebrook equation based on the Lambert W-function
                '  Brkic, Dejan (2011). "An Explicit Approximation of Colebrook's equation for fluid flow friction factor" (PDF). Petroleum Science and Technology. 29 (15): 1596–1602. doi:10.1080/10916461003620453
                ' http://hal.archives-ouvertes.fr/hal-01586167/file/article.pdf
                ' https://en.wikipedia.org/wiki/Darcy_friction_factor_formulae
                ' http://www.math.bas.bg/infres/MathBalk/MB-26/MB-26-285-292.pdf
                Svar = Log(n_Re / (1.816 * Log(1.1 * n_Re / (Log(1 + 1.1 * n_Re)))))
                f_1 = -2 * Log10(ed / 3.71 + 2 * Svar / n_Re)
                f_n = 1 / (f_1 ^ 2)
            Case 4
                ' from unified TUFFP model
                ' Haaland equation   Haaland, SE (1983). "Simple and Explicit Formulas for the Friction Factor in Turbulent Flow". Journal of Fluids Engineering. 105 (1): 89–90. doi:10.1115/1.3240948
                ' with smooth transition zone
                Dim fr2 As Double, fr3 As Double
                fr2 = 16# / 2000#
                fr3 = 1# / (3.6 * Log10(6.9 / 3000# + (ed / 3.7) ^ 1.11)) ^ 2
                If n_Re = 0 Then
                    f_n = 0
                ElseIf (n_Re < 2000#) Then
                    f_n = 16# / n_Re
                ElseIf (n_Re > 3000#) Then
                    f_n = 1# / (3.6 * Log10(6.9 / n_Re + (ed / 3.7) ^ 1.11)) ^ 2
                ElseIf (n_Re >= 2000# And n_Re <= 3000#) Then
                    f_n = fr2 + (fr3 - fr2) * (n_Re - 2000#) / 1000#
                End If
                f_n = 4 * f_n
            Case 5
                ' from unified TUFFP model
                ' Haaland equation   Haaland, SE (1983). "Simple and Explicit Formulas for the Friction Factor in Turbulent Flow". Journal of Fluids Engineering. 105 (1): 89–90. doi:10.1115/1.3240948
                f_n = 4# / (3.6 * Log10(6.9 / n_Re + (ed / 3.7) ^ 1.11)) ^ 2
        End Select
        
        Dim X1 As Double, X2 As Double, Y1 As Double, Y2 As Double
        
        If smoth_transition And Re_save > 0 Then
          X1 = lower_Re_lim
          Y1 = 64# / lower_Re_lim
          X2 = n_Re
          Y2 = f_n
          f_n = ((Y2 - Y1) * Re_save + (Y1 * X2 - Y2 * X1)) / (X2 - X1)
        End If
    
    End If
    
    unf_friction_factor = f_n
End Function
'
' Данный модуль содержит функцию расчета градиента давления по методике Грея
'
' Федоров, Халиков (2016)
        
Public Function unf_GrayModifiedGradient(ByVal d_m As Double, _
                                  ByVal theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal ql_rc_m3day As Double, ByVal qg_rc_m3day As Double, _
                                  ByVal Mul_rc_cP As Double, ByVal Mug_rc_cP As Double, _
                                  ByVal sigma_l_Nm As Double, _
                                  ByVal rho_lrc_kgm3 As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  Optional Payne_et_all_holdup As Integer = 0, _
                                  Optional Payne_et_all_friction As Integer = 1, _
                                  Optional ByVal correl3 As Double = 0, _
                                  Optional calibr_grav As Double = 1, _
                                  Optional calibr_fric As Double = 1)
                                  
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter (ft (m))
'theta - pipe inclination angel (degrees)
'eps - pipe wall roughness (ft (m))
'p - reference pressure (psi (atma))
'q_oSC - oil rate at standard conditions (Stb/day (m3/day))
'q_wSC - water rate at standard conditions (Stb/day (m3/day))
'q_gSC - gas rate at standard conditions (scf/day (m3/day))
'b_o - oil formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_w - water formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_g - gas formation volume factorat reference pressure (ft3/scf (m3/sm3))
'rs - gas-oil solution ratio at reference pressure (Scf/stb (sm3/sm3))
'mu_o - oil viscosity at reference pressure (cp)
'mu_w - water viscosity at reference pressure (cp)
'mu_g - gAs viscosity at reference pressure (cp)
'sigma_o - oil-gAs surface tension coefficient (dynes/sm (Newton/m))
'sigma_w - water-gAs surface tension coefficient (dynes/sm (Newton/m))
'rho_oSC - oil density at standard conditions (lbm/ft3 (kg/m3))
'rho_wSC - water density at standard conditions (lbm/ft3 (kg/m3))
'rho_gSC - gas density at standard conditions(lbm/ft3 (kg/m3))
'units - input/output units (0-field, 1 - metric)
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity (psi/ft (atma/m))
'dpdl_f - used to output pressure gradient due to friction (psi/ft (atma/m))
'v_sl - used to output liquid superficial velocity (ft/sec (m/sec))
'v_sg - used to output gas superficial velocity (ft/sec (m/sec))
'h_l - used to output liquid holdup
Dim roughness_d As Double
 
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim Ap_m2 As Double ' площадь трубы
Dim lambda_l   As Double
Dim vsl_msec, vsg_msec, Vsm_msec As Double
Dim Rho_n_kgm3 As Double   ' no slip density
Dim rho_s As Double        ' mix density
Dim Mu_n_cP As Double
Dim n_Re As Double 'Reinolds number
Dim n_Fr As Double 'Froude number
Dim n_lv As Double 'Liquid velocity number
Dim flow_pattern As Integer
Dim f_n As Double ' normalized friction factor
Dim f As Double ' friction factor
Dim y, s As Double
Dim R As Double 'dimensionless'superficial liquid to gas ratio parameter
Dim e As Double    'Pipe relative roughness
Dim E1 As Double
Dim crit As Double
Dim nv As Double ' dimensionless 'velocity number
Dim Nd As Double 'nominal diameter
Dim B As Double
Dim h_l 'liquid holdup by original Gray
Dim dpdl_g As Double, dpdl_f As Double, dpdl_g1 As Double, dpdl_f1 As Double
Dim dPdL_out_atmm
    
Const c_p = 0.000009871668   ' переводной коэффициент
Ap_m2 = const_Pi * d_m ^ 2 / 4
If ql_rc_m3day + qg_rc_m3day > 0 Then
    lambda_l = ql_rc_m3day / (ql_rc_m3day + qg_rc_m3day)
Else
    lambda_l = 1
End If
roughness_d = eps_m / d_m
vsl_msec = const_conver_sec_day * ql_rc_m3day / Ap_m2
vsg_msec = const_conver_sec_day * qg_rc_m3day / Ap_m2
Vsm_msec = vsl_msec + vsg_msec
Rho_n_kgm3 = rho_lrc_kgm3 * lambda_l + rho_grc_kgm3 * (1 - lambda_l) ' No-slip mixture density
Mu_n_cP = Mul_rc_cP * lambda_l + Mug_rc_cP * (1 - lambda_l) ' No slip mixture viscosity
n_Re = 1000 * Rho_n_kgm3 * Vsm_msec * d_m / Mu_n_cP
n_Fr = Vsm_msec ^ 2 / (const_g * d_m)
n_lv = vsl_msec * (rho_lrc_kgm3 / (const_g * sigma_l_Nm)) ^ 0.25
    'liquid holdup is calculated by Gray Original formula
If Vsm_msec = 0 Then
    h_l = 1
    correl3 = 1
    f = 0
Else
    If vsg_msec > 0 Then
        R = vsl_msec / vsg_msec
    Else
        R = 1000
    End If
    e = roughness_d
    
    
    E1 = 28.5 * sigma_l_Nm / (Rho_n_kgm3 * Vsm_msec ^ 2)
    If R >= 0.007 Then e = E1
    If R < 0.007 Then e = eps_m + R * (E1 - eps_m) / 0.007  ' corrected error by Kiyan Artem from /0.0007
    
    crit = 2.8
    nv = Rho_n_kgm3 ^ 2 * Vsm_msec ^ 4 / (const_g * sigma_l_Nm * (rho_lrc_kgm3 - rho_grc_kgm3))
    Nd = const_g * (rho_lrc_kgm3 - rho_grc_kgm3) * d_m ^ 2 / sigma_l_Nm
    
    B = 0.0814 * (1 - 0.0554 * Log(1 + 730 * R / (R + 1)))
    h_l = (R + Exp(-2.314 * (nv * (1 + 250 / Nd)) ^ B)) / (R + 1)
    
    'Calculate normalized friction factor
    roughness_d = e / d_m
    f_n = unf_friction_factor(n_Re, roughness_d, Payne_et_all_friction)
    'calculate friction factor correction for multiphase flow
    y = MaxReal(sigma_l_Nm / h_l ^ 2, 0.001)
    If (y > 1 And y < 1.2) Then
        s = Log(2.2 * y - 1.2)
    Else
        s = Log(y) / (-0.0523 + 3.182 * Log(y) - 0.8725 * (Log(y)) ^ 2 + 0.01853 * (Log(y)) ^ 4)
    End If
    f = f_n
End If
    rho_s = rho_lrc_kgm3 * h_l + rho_grc_kgm3 * (1 - h_l) 'calculate mixture density
    dpdl_g = c_p * rho_s * const_g * sind(theta_deg)  'calculate pressure gradient due to gravity
    dpdl_f = c_p * f * Rho_n_kgm3 * Vsm_msec ^ 2 / (2 * d_m)  'calculate pressure gradient due to friction
    dpdl_g1 = c_p * Rho_n_kgm3 * const_g * sind(theta_deg)
    dpdl_f1 = c_p * f * Rho_n_kgm3 * Vsm_msec ^ 2 / (2 * d_m) 'calculate pressure gradient due to friction
   Select Case correl3
   Case 0
    dPdL_out_atmm = dpdl_g + dpdl_f
    dPdLg_out_atmm = dpdl_g
    dPdLf_out_atmm = dpdl_f
    dPdLa_out_atmm = 0
   Case 1
    dPdL_out_atmm = dpdl_g1 + dpdl_f1
    dPdLg_out_atmm = dpdl_g1
    dPdLf_out_atmm = dpdl_f1
    dPdLa_out_atmm = 0
   End Select
    Hl_out_fr = h_l
    fpat_out_num = 0
    unf_GrayModifiedGradient = Array(dPdLg_out_atmm * calibr_grav + dPdLf_out_atmm * calibr_fric, _
                            dPdLg_out_atmm * calibr_grav, _
                            dPdLf_out_atmm * calibr_fric, _
                                dPdLa_out_atmm, _
                                vsl_msec, _
                                vsg_msec, _
                                Hl_out_fr, _
                                fpat_out_num)
End Function
Public Function unf_Gron_Gradient(ByVal d As Double, ByVal THETA As Double, ByVal eps As Double, ByVal p As Double, _
                                  ByVal q_osc As Double, ByVal q_wsc As Double, ByVal q_gsc As Double, _
                                  ByVal b_o As Double, ByVal b_w As Double, ByVal b_g As Double, ByVal r_s As Double, ByVal mu_o As Double, _
                                  ByVal mu_w As Double, ByVal mu_g As Double, ByVal sigma_o As Double, ByVal sigma_w As Double, _
                                  ByVal rho_osc As Double, ByVal rho_wsc As Double, ByVal rho_gsc As Double, _
                                  Optional Units As Integer = 1)
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter (ft (m))
'theta - pipe inclination angel (degrees)
'eps - pipe wall roughness (ft (m))
'p - reference pressure (psi (atma))
'q_oSC - oil rate at standard conditions (Stb/day (m3/day))
'q_wSC - water rate at standard conditions (Stb/day (m3/day))
'q_gSC - gas rate at standard conditions (scf/day (m3/day))
'b_o - oil formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_w - water formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_g - gas formation volume factorat reference pressure (ft3/scf (m3/sm3))
'rs - gas-oil solution ratio at reference pressure (Scf/stb (sm3/sm3))
'mu_o - oil viscosity at reference pressure (cp)
'mu_w - water viscosity at reference pressure (cp)
'mu_g - gAs viscosity at reference pressure (cp)
'sigma_o - oil-gAs surface tension coefficient (dynes/sm (Newton/m))
'sigma_w - water-gAs surface tension coefficient (dynes/sm (Newton/m))
'rho_oSC - oil density at standard conditions (lbm/ft3 (kg/m3))
'rho_wSC - water density at standard conditions (lbm/ft3 (kg/m3))
'rho_gSC - gas density at standard conditions(lbm/ft3 (kg/m3))
'units - input/output units (0-field, 1 - metric)
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity (psi/ft (atma/m))
'dpdl_f - used to output pressure gradient due to friction (psi/ft (atma/m))
'v_sl - used to output liquid superficial velocity (ft/sec (m/sec))
'v_sg - used to output gas superficial velocity (ft/sec (m/sec))
'h_l - used to output liquid holdup
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Vsl_out_msec As Double
Dim Vsg_out_msec As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim v_sl As Double, v_sg As Double
Dim e As Double
Dim dPdL_out_atmm
Dim dpdl_g As Double, dpdl_f As Double, dpdl_g1 As Double, dpdl_f1 As Double
Dim h_l As Double
'Conversion factors and constants (field / metric)
'acceleration due to gravity
Dim g(2) As Double
g(0) = 32.174: g(1) = 9.8
'Oil, water velocity conversion
Dim c_q(2) As Double
c_q(0) = 5.6146: c_q(1) = 1
'Gas-oil solution ratio conversion factor
Dim c_rs(2) As Double
c_rs(0) = 0.17811: c_rs(1) = 1
'Reinolds number conversion factor
Dim c_re(2) As Double
c_re(0) = 1.488: c_re(1) = 1
'Pressure gradient conversion factor
Dim c_p(2) As Double
c_p(0) = 0.00021583: c_p(1) = 0.000009871668
'liquid velocity number conversion
Dim c_sl(2) As Double
c_sl(0) = 4.61561: c_sl(1) = 1
'Calculate auxilary values
'Pipe cross-sectional area
Dim a_p As Double
a_p = const_Pi * d ^ 2 / 4
'Calculate flow rates at reference pressure
Dim q_o, q_w, q_l, q_g As Double
q_o = c_q(Units) * q_osc * b_o
q_w = c_q(Units) * q_wsc * b_w
q_l = q_o + q_w
q_g = b_g * (q_gsc - r_s * q_osc)
'if gas rate is negative - assign gas rate to zero
If q_g < 0 Then
 
 q_g = 0
End If
'calculate volume fraction of water in liquid at no-slip conditions
Dim f_w, lambda_l  As Double
f_w = q_w / q_l
'volume fraction of liquid at no-slip conditions
lambda_l = q_l / (q_l + q_g)
'Debug, remove
'lambda_l = 0.00001
'densities
Dim rho_o, rho_w, rho_l, rho_g, rho_n As Double
rho_o = (rho_osc + c_rs(Units) * r_s * rho_gsc) / b_o
rho_w = rho_wsc / b_w
rho_l = rho_o * (1 - f_w) + rho_w * f_w
rho_g = rho_gsc / b_g
'no-slip mixture density
rho_n = rho_l * lambda_l + rho_g * (1 - lambda_l)
'Liquid surface tension
Dim sigma_l As Double
sigma_l = sigma_o * (1 - f_w) + sigma_w * f_w
'Liquid viscosity
Dim mu_l As Double
mu_l = mu_o * (1 - f_w) + mu_w * f_w
'No slip mixture viscosity
Dim mu_n As Double
mu_n = mu_l * lambda_l + mu_g * (1 - lambda_l)
'Sureficial velocities
Dim v_m As Double
v_sl = 0.000011574 * q_l / a_p
v_sg = 0.000011574 * q_g / a_p
v_m = v_sl + v_sg
'Reinolds number
Dim n_Re As Double
n_Re = c_re(Units) * 1000 * rho_n * v_m * d / mu_n
'Froude number
Dim n_Fr As Double
n_Fr = v_m ^ 2 / (g(Units) * d)
'Liquid velocity number
Dim n_lv As Double
n_lv = c_sl(Units) * v_sl * (rho_l / (g(Units) * sigma_l)) ^ 0.25
'Pipe relative roughness
e = eps / d
Dim w As Double ' критерий, определяющий область течения потока смеси
Dim n_re_g As Double ' критерий Рейнольдса для газа
Dim W_boundary As Double ' граничное значение критерия W
Dim flow_pattern As Double
Dim C1 As Double
Dim C2 As Double
If d >= 0.015 And d <= 0.0762 Then
    If (d > 0.06 And d < 0.067 And mu_l > 0 And mu_l <= 450) Or (d > 0.035 And d < 0.04 And mu_l > 0 And mu_l <= 1500) Or (d > 0.048 And d < 0.053 And mu_l > 0 And mu_l <= 750) Or (d > 0.0732 And d < 0.0792 And mu_l > 0 And mu_l <= 300) Then
        
        n_re_g = c_re(Units) * 1000 * rho_g * v_m * d / mu_g
        w = (n_re_g * n_Fr * rho_g / (rho_l - rho_g)) ^ (1 / 3)
        W_boundary = (8.2 - 1.7 * 0.01 * (mu_g / mu_l) ^ (-0.6)) * Exp((8 + 62 * (mu_g / mu_l) * (1 - lambda_l)))
        If w <= W_boundary Then flow_pattern = 1 Else flow_pattern = 2
        
            C1 = (2.24 * Exp(0.05 * mu_l) / (1 + 1.1 * 0.05 * mu_l) - 8 * 0.001 * (mu_l ^ 0.6) * (d / 0.015 - 1))
        
        If mu_l <= 40 Then C2 = (1 + 0.11 * Exp(0.05 * mu_l) / (1 + 1.1 * 0.05 * mu_l) - (0.1 - 2.52 * 0.001 * (mu_l - 1)) * (d / 0.015 - 1))
        If mu_l > 40 Then C2 = (1 + 0.11 * Exp(0.05 * mu_l) / (1 + 1.1 * 0.05 * mu_l))
        Dim f As Double
        
        f = 0.067 * (158 / n_Re + 2 * e / d) ^ 0.2
        
        Dim rho_s As Double
        Dim delta_rho As Double
        Dim Hl As Double
        
        Hl = lambda_l / (C1 + C2 * n_Fr ^ (-0.5))
        delta_rho = rho_o - rho_g
        
        rho_s = rho_l + delta_rho
    End If
End If
'calculate pressure gradient due to gravity
dpdl_g = c_p(Units) * rho_s * g(Units) * sind(THETA)
'calculate pressure gradient due to friction
dpdl_f = c_p(Units) * f * (rho_l * (v_sl ^ 2) / (1 - Hl) + rho_g * (v_sg ^ 2) / Hl) / (2 * d)
'calculate pressure gradient
dPdL_out_atmm = dpdl_g + dpdl_f
    dPdLg_out_atmm = dpdl_g
    dPdLf_out_atmm = dpdl_f
    dPdLa_out_atmm = 0
Vsl_out_msec = v_sl
Vsg_out_msec = v_sg
Hl_out_fr = h_l
fpat_out_num = 0
unf_Gron_Gradient = Array(dPdL_out_atmm, _
                            dPdLg_out_atmm, _
                            dPdLf_out_atmm, _
                            dPdLa_out_atmm, _
                            Vsl_out_msec, _
                            Vsg_out_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
End Function
'
' Федоров, Халиков (2016)
'
'
'
Public Function unf_HagedornandBrawnmodified(ByVal d_m As Double, _
                                  ByVal theta_deg As Double, ByVal eps_m As Double, _
                                  ByVal ql_rc_m3day As Double, ByVal qg_rc_m3day As Double, _
                                  ByVal Mul_rc_cP As Double, ByVal Mug_rc_cP As Double, _
                                  ByVal sigma_l_Nm As Double, _
                                  ByVal rho_lrc_kgm3 As Double, _
                                  ByVal rho_grc_kgm3 As Double, _
                                  ByVal p_atma As Double, _
                                  Optional Payne_et_all_holdup As Integer = 0, _
                                  Optional Payne_et_all_friction As Integer = 1, _
                                  Optional ByVal correl3 As Double = 0, _
                                  Optional calibr_grav As Double = 1, _
                                  Optional calibr_fric As Double = 1)
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter (ft (m))
'theta - pipe inclination angel (degrees)
'eps - pipe wall roughness (ft (m))
'p - reference pressure (psi (atma))
'q_oSC - oil rate at standard conditions (Stb/day (m3/day))
'q_wSC - water rate at standard conditions (Stb/day (m3/day))
'q_gSC - gas rate at standard conditions (scf/day (m3/day))
'b_o - oil formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_w - water formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_g - gas formation volume factorat reference pressure (ft3/scf (m3/sm3))
'rs - gas-oil solution ratio at reference pressure (Scf/stb (sm3/sm3))
'mu_o - oil viscosity at reference pressure (cp)
'mu_w - water viscosity at reference pressure (cp)
'mu_g - gAs viscosity at reference pressure (cp)
'sigma_o - oil-gAs surface tension coefficient (dynes/sm (Newton/m))
'sigma_w - water-gAs surface tension coefficient (dynes/sm (Newton/m))
'rho_oSC - oil density at standard conditions (lbm/ft3 (kg/m3))
'rho_wSC - water density at standard conditions (lbm/ft3 (kg/m3))
'rho_gSC - gas density at standard conditions(lbm/ft3 (kg/m3))
'units - input/output units (0-field, 1 - metric)
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity (psi/ft (atma/m))
'dpdl_f - used to output pressure gradient due to friction (psi/ft (atma/m))
'v_sl - used to output liquid superficial velocity (ft/sec (m/sec))
'v_sg - used to output gas superficial velocity (ft/sec (m/sec))
'h_l - used to output liquid holdup
Dim roughness_d As Double
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim Ap_m2 As Double ' площадь трубы
Dim lambda_l   As Double
Dim vsl_msec, vsg_msec, Vsm_msec As Double
Dim Rho_n_kgm3 As Double   ' no slip density
Dim rho_s As Double        ' mix density
Dim Mu_n_cP As Double
Dim n_Re As Double 'Reinolds number
'Dim n_fr As Double 'Froude number
'Dim n_lv1 As Double 'Liquid velocity number
Dim flow_pattern As Integer
Dim f_n As Double ' normalized friction factor
Dim f As Double ' friction factor
Dim y, s As Double
    Dim R As Double 'dimensionless'superficial liquid to gas ratio parameter
    Dim e As Double    'Pipe relative roughness
    Dim E1 As Double
    Dim crit As Double
    Dim nv As Double ' dimensionless 'velocity number
    Dim Nd As Double 'nominal diameter
 '   Dim b As Double
    Dim h_l 'liquid holdup by original Gray
    Dim dpdl_g As Double, dpdl_f As Double, dpdl_g1 As Double, dpdl_f1 As Double
    Dim dPdL_out_atmm
'Liquid velocity number
Dim n_lv As Double
Dim n_gv As Double
Dim n_d As Double
Dim n_l As Double
Dim a As Double, HB_complex As Double
Dim N_lc As Double
Dim AA As Double, Hl_phi As Double
Dim B As Double
Dim l As Double
Dim b_1 As Double
Dim phi As Double
Dim rho_tp As Double
Dim mu_tp As Double
Dim b0 As Double
Dim b1 As Double
Dim b2 As Double
Dim b3 As Double
Dim b4 As Double
Dim C0 As Double
Dim C1 As Double
Dim C2 As Double
Dim C3 As Double
Dim C4 As Double
    
Ap_m2 = const_Pi * d_m ^ 2 / 4
If ql_rc_m3day + qg_rc_m3day > 0 Then
    lambda_l = ql_rc_m3day / (ql_rc_m3day + qg_rc_m3day)
Else
    lambda_l = 1
End If
roughness_d = eps_m / d_m
vsl_msec = const_conver_sec_day * ql_rc_m3day / Ap_m2
vsg_msec = const_conver_sec_day * qg_rc_m3day / Ap_m2
Vsm_msec = vsl_msec + vsg_msec
Rho_n_kgm3 = rho_lrc_kgm3 * lambda_l + rho_grc_kgm3 * (1 - lambda_l) ' No-slip mixture density
Mu_n_cP = Mul_rc_cP * lambda_l + Mug_rc_cP * (1 - lambda_l) ' No slip mixture viscosity
n_Re = 1000 * Rho_n_kgm3 * Vsm_msec * d_m / Mu_n_cP
'n_fr = Vsm_msec ^ 2 / (const_g * d_m)
'n_lv1 = Vsl_msec * (rho_lrc_kgm3 / (const_g * sigma_l_Nm)) ^ 0.25
If Vsm_msec > 0 Then
    
    b0 = -0.1030658
    b1 = 0.617774
    b2 = -0.632946
    b3 = 0.29598
    b4 = -0.0401
    
    C0 = 0.9116257
    C1 = -4.821756
    C2 = 1232.25
    C3 = -22253.58
    C4 = 116174.3
    
    'Determine Duns and ROs dimensionless groups
    
    'Determine Liquid velosity number
    n_lv = 1.938 * vsl_msec / 0.3048 * (rho_lrc_kgm3 * 0.06243 / (sigma_l_Nm * 1000)) ^ 0.25
    ''Determine Gas velosity number
    n_gv = 1.938 * vsg_msec / 0.3048 * (rho_lrc_kgm3 * 0.06243 / (sigma_l_Nm * 1000)) ^ 0.25
    ''Determine Diametr number
    n_d = 120.872 * d_m / 0.3048 * (rho_lrc_kgm3 * 0.06243 / (sigma_l_Nm * 1000)) ^ 0.5
    ''Determine Liquid viscosity number
    n_l = 0.15726 * Mul_rc_cP * (1 / (rho_lrc_kgm3 * 0.06243 * (sigma_l_Nm * 1000) ^ 3)) ^ 0.25
    
    ' проверим режим потока, чтобы определить надо использовать поправку Гриффитса для пузырькового режима
    a = 1.071 - (0.2218 * (Vsm_msec * const_convert_m_ft) ^ 2) / (d_m * const_convert_m_ft)
    If a < 0.13 Then a = 0.13
    B = vsg_msec / Vsm_msec
    If (B - a) >= 0 Then  ' считаем по Хайгедорну Брауну
            n_lv = vsl_msec * (rho_lrc_kgm3 / (const_g * sigma_l_Nm)) ^ 0.25 'Determine Liquid velosity number  dimensionless
            n_gv = vsg_msec * (rho_lrc_kgm3 / (const_g * sigma_l_Nm)) ^ 0.25 'Determine Gas velosity number
            n_d = d_m * (rho_lrc_kgm3 * const_g / sigma_l_Nm) ^ 0.5 'Determine Diametr number
            n_l = Mul_rc_cP * const_convert_cP_Pasec * (const_g / (rho_lrc_kgm3 * sigma_l_Nm ^ 3)) ^ 0.25 'Determine Liquid viscosity number
            N_lc = -0.0259 * n_l ^ 4 + 0.1011 * n_l ^ 3 - 0.1272 * n_l ^ 2 + 0.0619 * n_l + 0.0018  ' корреляция подобрана по графуку рнт
            HB_complex = (n_lv / n_gv ^ 0.575) * (N_lc / n_d) * (p_atma) ^ 0.1
            Hl_phi = b0 + b1 * (Log10(HB_complex) + 6) + b2 * (Log10(HB_complex) + 6) ^ 2 + b3 * (Log10(HB_complex) + 6) ^ 3 + b4 * (Log10(HB_complex) + 6) ^ 4
            B = (n_gv * n_l ^ 0.38) / n_d ^ 2.14
            phi = C0 + C1 * B + C2 * B ^ 2 + C3 * B ^ 3 + C4 * B ^ 4
              
            h_l = Hl_phi * phi 'determine liquid holdup
            If h_l < lambda_l Then h_l = lambda_l
            
    
    Else    ' считаем по гриффитсу
            Dim vs_ftsec As Double, vs_msec As Double   ' bubble rise velocity
            vs_ftsec = 0.8
            vs_msec = vs_ftsec * const_convert_ft_m
          '  Dim Hg As Double
            h_l = 1 - 0.5 * (1 + Vsm_msec / vs_msec - ((1 + Vsm_msec / vs_msec) ^ 2 - 4 * (vsg_msec / vs_msec)) ^ 0.5)
    End If
    
    
    rho_tp = rho_lrc_kgm3 * h_l + rho_grc_kgm3 * (1 - h_l)
    mu_tp = Mul_rc_cP ^ h_l + Mug_rc_cP ^ (1 - h_l)
    
    f_n = unf_friction_factor(n_Re, e, Payne_et_all_friction)
    f = f_n
    
    rho_s = rho_lrc_kgm3 * h_l + rho_grc_kgm3 * (1 - h_l) 'calculate mixture density
    dpdl_g = c_p * rho_tp * const_g * sind(theta_deg) 'calculate pressure gradient due to gravity
    dpdl_f = c_p * f * Rho_n_kgm3 ^ 2 * Vsm_msec ^ 2 / (2 * d_m * rho_tp) 'calculate pressure gradient due to friction
Else
    f = 0
    correl3 = 1
    rho_tp = Rho_n_kgm3
End If
dpdl_g1 = c_p * Rho_n_kgm3 * const_g * sind(theta_deg)
dpdl_f1 = c_p * f * Rho_n_kgm3 ^ 2 * Vsm_msec ^ 2 / (2 * d_m * rho_tp) 'calculate pressure gradient due to friction
Select Case correl3
Case 0
'calculate pressure gradient
    dPdL_out_atmm = dpdl_g + dpdl_f
 
    dPdLg_out_atmm = dpdl_g
    dPdLf_out_atmm = dpdl_f
    dPdLa_out_atmm = 0
 Case 1
'calculate pressure gradient
    dPdL_out_atmm = dpdl_g1 + dpdl_f1
 
    dPdLg_out_atmm = dpdl_g1
    dPdLf_out_atmm = dpdl_f1
    dPdLa_out_atmm = 0
End Select
Hl_out_fr = h_l
fpat_out_num = 0
unf_HagedornandBrawnmodified = Array(dPdLg_out_atmm * calibr_grav + dPdLf_out_atmm * calibr_fric, _
                            dPdLg_out_atmm * calibr_grav, _
                            dPdLf_out_atmm * calibr_fric, _
                            dPdLa_out_atmm, _
                            vsl_msec, _
                            vsg_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
End Function
' Федоров, Халиков (2016)
'
'
'
      
      Public Function unf_Krilov_Lutoshkin(ByVal d As Double, ByVal THETA As Double, ByVal eps As Double, ByVal p As Double, _
                                  ByVal q_osc As Double, ByVal q_wsc As Double, ByVal q_gsc As Double, _
                                  ByVal b_o As Double, ByVal b_w As Double, ByVal b_g As Double, ByVal r_s As Double, ByVal mu_o As Double, _
                                  ByVal mu_w As Double, ByVal mu_g As Double, ByVal sigma_o As Double, ByVal sigma_w As Double, _
                                  ByVal rho_osc As Double, ByVal rho_wsc As Double, ByVal rho_gsc As Double, _
                                  Optional Units As Integer = 1, _
                                  Optional Payne_et_all_friction As Integer = 1)
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter (ft (m))
'theta - pipe inclination angel (degrees)
'eps - pipe wall roughness (ft (m))
'p - reference pressure (psi (atma))
'q_oSC - oil rate at standard conditions (Stb/day (m3/day))
'q_wSC - water rate at standard conditions (Stb/day (m3/day))
'q_gSC - gas rate at standard conditions (scf/day (m3/day))
'b_o - oil formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_w - water formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_g - gas formation volume factorat reference pressure (ft3/scf (m3/sm3))
'rs - gas-oil solution ratio at reference pressure (Scf/stb (sm3/sm3))
'mu_o - oil viscosity at reference pressure (cp)
'mu_w - water viscosity at reference pressure (cp)
'mu_g - gAs viscosity at reference pressure (cp)
'sigma_o - oil-gAs surface tension coefficient (dynes/sm (Newton/m))
'sigma_w - water-gAs surface tension coefficient (dynes/sm (Newton/m))
'rho_oSC - oil density at standard conditions (lbm/ft3 (kg/m3))
'rho_wSC - water density at standard conditions (lbm/ft3 (kg/m3))
'rho_gSC - gas density at standard conditions(lbm/ft3 (kg/m3))
'units - input/output units (0-field, 1 - metric)
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity (psi/ft (atma/m))
'dpdl_f - used to output pressure gradient due to friction (psi/ft (atma/m))
'v_sl - used to output liquid superficial velocity (ft/sec (m/sec))
'v_sg - used to output gas superficial velocity (ft/sec (m/sec))
'h_l - used to output liquid holdup
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Vsl_out_msec As Double
Dim Vsg_out_msec As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim v_sl As Double, v_sg As Double
Dim e As Double
Dim dPdL_out_atmm
Dim dpdl_g As Double, dpdl_f As Double, dpdl_g1 As Double, dpdl_f1 As Double
Dim h_l As Double
'Conversion factors and constants (field / metric)
'acceleration due to gravity
Dim g(2) As Double
g(0) = 32.174: g(1) = 9.8
'Oil, water velocity conversion
Dim c_q(2) As Double
c_q(0) = 5.6146: c_q(1) = 1
'Gas-oil solution ratio conversion factor
Dim c_rs(2) As Double
c_rs(0) = 0.17811: c_rs(1) = 1
'Reinolds number conversion factor
Dim c_re(2) As Double
c_re(0) = 1.488: c_re(1) = 1
'Pressure gradient conversion factor
Dim c_p(2) As Double
c_p(0) = 0.00021583: c_p(1) = 0.000009871668
'liquid velocity number conversion
Dim c_sl(2) As Double
c_sl(0) = 4.61561: c_sl(1) = 1
'Calculate auxilary values
'Pipe cross-sectional area
Dim a_p As Double
a_p = const_Pi * d ^ 2 / 4
'Calculate flow rates at reference pressure
Dim q_o, q_w, q_l, q_g As Double
q_o = c_q(Units) * q_osc * b_o
q_w = c_q(Units) * q_wsc * b_w
q_l = q_o + q_w
q_g = b_g * (q_gsc - r_s * q_osc)
'if gas rate is negative - assign gas rate to zero
If q_g < 0 Then
 
 q_g = 0
End If
'calculate volume fraction of water in liquid at no-slip conditions
Dim f_w, lambda_l  As Double
f_w = q_w / q_l
'volume fraction of liquid at no-slip conditions
lambda_l = q_l / (q_l + q_g)
'Debug, remove
'lambda_l = 0.00001
'densities
Dim rho_o, rho_w, rho_l, rho_g, rho_n As Double
rho_o = (rho_osc + c_rs(Units) * r_s * rho_gsc) / b_o
rho_w = rho_wsc / b_w
rho_l = rho_o * (1 - f_w) + rho_w * f_w
rho_g = rho_gsc / b_g
'no-slip mixture density
rho_n = rho_l * lambda_l + rho_g * (1 - lambda_l)
'Liquid surface tension
Dim sigma_l As Double
sigma_l = sigma_o * (1 - f_w) + sigma_w * f_w
'Liquid viscosity
Dim mu_l As Double
mu_l = mu_o * (1 - f_w) + mu_w * f_w
'No slip mixture viscosity
Dim mu_n As Double
mu_n = mu_l * lambda_l + mu_g * (1 - lambda_l)
'Sureficial velocities
Dim v_m As Double
v_sl = 0.000011574 * q_l / a_p
v_sg = 0.000011574 * q_g / a_p
v_m = v_sl + v_sg
'Reinolds number
Dim n_Re As Double
n_Re = c_re(Units) * 1000 * rho_n * v_m * d / mu_n
'Froude number
Dim n_Fr As Double
n_Fr = v_m ^ 2 / (g(Units) * d)
'Liquid velocity number
Dim n_lv As Double
n_lv = c_sl(Units) * v_sl * (rho_l / (g(Units) * sigma_l)) ^ 0.25
'Pipe relative roughness
e = eps / d
Dim V_g_crit As Double
Dim Msm As Double
Dim slow_pattern As Double
Dim H_g As Double
Dim flow_pattern
V_g_crit = 1.75 * d ^ 2.5 + 1.25 * q_l
If q_g < V_g_crit Then
    flow_pattern = 1 ' пузырьковая
    H_g = q_g / (q_g + q_l + 0.233 * (d ^ 2) * (sigma_o / sigma_w) ^ (1 / 3))
If q_g > V_g_crit Then
    flow_pattern = 2 ' пробковая
    H_g = d * (q_g ^ 1 / 2) / (d * (q_g ^ 1 / 2) + 0.6023 * q_l + 0.0942 * (d ^ 1.5) * (sigma_o / sigma_w) ^ (1 / 3))
End If
End If
Dim rho_s As Double
rho_s = rho_g * H_g + rho_l * (1 - H_g)
Dim f_g As Double
Dim f_l As Double
f_g = 0.0094 / (d ^ 1 / 3)
f_l = 0.3164 / (n_Re ^ 1 / 4)
'calculate pressure gradient due to friction
Dim k As Double
If d > 0.035 And d < 0.04 Then k = 1.06
If d > 0.048 And d < 0.053 Then k = 0.87
If d > 0.059 And d < 0.068 Then k = 0.73
If d > 0.073 And d < 0.0792 Then k = 0.65
dpdl_f = c_p(Units) * 9.07 * (10 ^ (-9)) * (q_g ^ 2) / (d ^ 5.33) + 7.95 * (10 ^ (-6)) * (q_l ^ 1.75) * (mu_l ^ 1 / 4) / (d ^ 4.75) + 1.08 * (10 ^ (-7)) * (q_l ^ (1 / 3)) * (mu_l ^ 0.025) * ((q_g * q_l * 10 ^ 6) ^ k) / d ^ 3
'calculate pressure gradient due to gravity
dpdl_g = c_p(Units) * rho_s * g(Units) * Sin(const_Pi / 180 * THETA)
'calculate pressure gradient
 dPdL_out_atmm = dpdl_g + dpdl_f
    dPdLg_out_atmm = dpdl_g
    dPdLf_out_atmm = dpdl_f
    dPdLa_out_atmm = 0
Vsl_out_msec = v_sl
Vsg_out_msec = v_sg
Hl_out_fr = h_l
fpat_out_num = flow_pattern
unf_Krilov_Lutoshkin = Array(dPdL_out_atmm, _
                            dPdLg_out_atmm, _
                            dPdLf_out_atmm, _
                            dPdLa_out_atmm, _
                            Vsl_out_msec, _
                            Vsg_out_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
End Function
' Федоров, Халиков (2016)
'
'
'
Public Function unf_Saharov_Mokhov_Gradient(ByVal d As Double, ByVal THETA As Double, ByVal eps As Double, ByVal p As Double, _
                                  ByVal q_osc As Double, ByVal q_wsc As Double, ByVal q_gsc As Double, _
                                  ByVal b_o As Double, ByVal b_w As Double, ByVal b_g As Double, ByVal r_s As Double, ByVal mu_o As Double, _
                                  ByVal mu_w As Double, ByVal mu_g As Double, ByVal sigma_o As Double, ByVal sigma_w As Double, _
                                  ByVal rho_osc As Double, ByVal rho_wsc As Double, ByVal rho_gsc As Double, _
                                  Optional Units As Integer = 1, _
                                  Optional Payne_et_all_friction As Integer = 1, Optional correl3 As Double = 0, _
                                  Optional calibr_grav As Double = 1, _
                                  Optional calibr_fric As Double = 1)
'function for calculation of pressure gradient in pipe according to Begs and Brill method
'Return (psi/ft (atma/m))
'Arguments
'd - pipe internal diameter (ft (m))
'theta - pipe inclination angel (degrees)
'eps - pipe wall roughness (ft (m))
'p - reference pressure (psi (atma))
'q_oSC - oil rate at standard conditions (Stb/day (m3/day))
'q_wSC - water rate at standard conditions (Stb/day (m3/day))
'q_gSC - gas rate at standard conditions (scf/day (m3/day))
'b_o - oil formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_w - water formation volume factor at reference pressure (bbl/stb (m3/sm3))
'b_g - gas formation volume factorat reference pressure (ft3/scf (m3/sm3))
'rs - gas-oil solution ratio at reference pressure (Scf/stb (sm3/sm3))
'mu_o - oil viscosity at reference pressure (cp)
'mu_w - water viscosity at reference pressure (cp)
'mu_g - gAs viscosity at reference pressure (cp)
'sigma_o - oil-gAs surface tension coefficient (dynes/sm (Newton/m))
'sigma_w - water-gAs surface tension coefficient (dynes/sm (Newton/m))
'rho_oSC - oil density at standard conditions (lbm/ft3 (kg/m3))
'rho_wSC - water density at standard conditions (lbm/ft3 (kg/m3))
'rho_gSC - gas density at standard conditions(lbm/ft3 (kg/m3))
'units - input/output units (0-field, 1 - metric)
'Payne_et_all_holdup - flag indicationg weather to applied Payne et all correction and holdup (0 - not applied, 1 - applied)
'Payne_et_all_friction - flag indicationg weather to apply Payne et all correction for friction (0 - not applied, 1 - applied)
'dpdl_g - used to otput pressure gradient due to gravity (psi/ft (atma/m))
'dpdl_f - used to output pressure gradient due to friction (psi/ft (atma/m))
'v_sl - used to output liquid superficial velocity (ft/sec (m/sec))
'v_sg - used to output gas superficial velocity (ft/sec (m/sec))
'h_l - used to output liquid holdup
Dim dPdLg_out_atmm As Double
Dim dPdLf_out_atmm As Double
Dim Vsl_out_msec As Double
Dim Vsg_out_msec As Double
Dim Hl_out_fr As Double
Dim fpat_out_num
Dim dPdLa_out_atmm As Double
Dim v_sl As Double, v_sg As Double
Dim e As Double
Dim dPdL_out_atmm
Dim dpdl_g As Double, dpdl_f As Double, dpdl_g1 As Double, dpdl_f1 As Double
Dim h_l As Double
'Conversion factors and constants (field / metric)
'acceleration due to gravity
Dim g(2) As Double
g(0) = 32.174: g(1) = 9.8
'Oil, water velocity conversion
Dim c_q(2) As Double
c_q(0) = 5.6146: c_q(1) = 1
'Gas-oil solution ratio conversion factor
Dim c_rs(2) As Double
c_rs(0) = 0.17811: c_rs(1) = 1
'Reinolds number conversion factor
Dim c_re(2) As Double
c_re(0) = 1.488: c_re(1) = 1
'Pressure gradient conversion factor
Dim c_p(2) As Double
c_p(0) = 0.00021583: c_p(1) = 0.000009871668
'liquid velocity number conversion
Dim c_sl(2) As Double
c_sl(0) = 4.61561: c_sl(1) = 1
'Calculate auxilary values
'Pipe cross-sectional area
Dim a_p As Double
a_p = const_Pi * d ^ 2 / 4
'Calculate flow rates at reference pressure
Dim q_o, q_w, q_l, q_g As Double
q_o = c_q(Units) * q_osc * b_o
q_w = c_q(Units) * q_wsc * b_w
q_l = q_o + q_w
q_g = b_g * (q_gsc - r_s * q_osc)
'if gas rate is negative - assign gas rate to zero
If q_g < 0 Then
 q_g = 0
End If
Dim f_w, lambda_l  As Double
    Dim rho_o, rho_w, rho_l, rho_g, rho_n As Double
If q_l > 0 Then
    'calculate volume fraction of water in liquid at no-slip conditions
    f_w = q_w / q_l
    'volume fraction of liquid at no-slip conditions
    lambda_l = q_l / (q_l + q_g)
    'densities
    rho_o = (rho_osc + c_rs(Units) * r_s * rho_gsc) / b_o
    rho_w = rho_wsc / b_w
    rho_l = rho_o * (1 - f_w) + rho_w * f_w
    rho_g = rho_gsc / b_g
    'no-slip mixture density
    rho_n = rho_l * lambda_l + rho_g * (1 - lambda_l)
    'Liquid surface tension
    Dim sigma_l As Double
    sigma_l = sigma_o * (1 - f_w) + sigma_w * f_w
    'Liquid viscosity
    Dim mu_l As Double
    mu_l = mu_o * (1 - f_w) + mu_w * f_w
    'No slip mixture viscosity
    Dim mu_n As Double
    mu_n = mu_l * lambda_l + mu_g * (1 - lambda_l)
    'Sureficial velocities
    Dim v_m As Double
    v_sl = 0.000011574 * q_l / a_p
    v_sg = 0.000011574 * q_g / a_p
    v_m = v_sl + v_sg
    'Reinolds number
    Dim n_Re As Double
    n_Re = c_re(Units) * 1000 * rho_n * v_m * d / mu_n
    'Froude number
    Dim n_Fr As Double
    n_Fr = v_m ^ 2 / (g(Units) * d)
    'Liquid velocity number
    Dim n_lv As Double
    n_lv = c_sl(Units) * v_sl * (rho_l / (g(Units) * sigma_l)) ^ 0.25
    'Pipe relative roughness
    e = eps / d
    '-----------------------------------------------------------------------
    'determine flow pattern
    Dim delta_rho    ' увеличение плотности смеси за счёт относительного движения газа
    Dim We ' Число Вебера
    Dim Ku 'Безразмерный параметр, покритерию подобный критерию Кутателадзе
    Dim f_mohov  'коэффициентобщих потерь
    delta_rho = rho_o - rho_g
    We = sigma_o / (delta_rho * d ^ 2 * g(Units))
    Ku = ((rho_l ^ 2) / (delta_rho ^ 2) * (n_Fr ^ 2) / We) ^ (1 / 4)
    f_mohov = (0.13 * Ku + 1) / (1.13 * Ku + 1) * delta_rho / rho_l * 2 * (1 - lambda_l) / n_Fr * Sin(const_Pi / 180 * THETA) + 0.11 * (68 / n_Re + e / d) ^ 0.25
Else
    f_mohov = 0
    v_m = 0
    rho_n = rho_wsc / b_w
End If
'calculate pressure gradient due to gravity
dpdl_g = c_p(Units) * rho_n * g(Units) * Sin(const_Pi / 180 * THETA)
'calculate pressure gradient due to friction
dpdl_f = c_p(Units) * f_mohov * rho_n * v_m ^ 2 / (2 * d)
'calculate pressure gradient
dPdL_out_atmm = dpdl_g + dpdl_f
    dPdLg_out_atmm = dpdl_g
    dPdLf_out_atmm = dpdl_f
    dPdLa_out_atmm = 0
Vsl_out_msec = v_sl
Vsg_out_msec = v_sg
Hl_out_fr = lambda_l
fpat_out_num = 0
unf_Saharov_Mokhov_Gradient = Array(dPdLg_out_atmm * calibr_grav + dPdLf_out_atmm * calibr_fric, _
                            dPdLg_out_atmm * calibr_grav, _
                            dPdLf_out_atmm * calibr_fric, _
                            dPdLa_out_atmm, _
                            Vsl_out_msec, _
                            Vsg_out_msec, _
                            Hl_out_fr, _
                            fpat_out_num)
End Function
'=======================================================================================
'Unifloc 7.51  2025.03                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2025
'
'=======================================================================================
'Модуль расчетов физико-химических свойств нефтей
'
'префикс unf_ символизиует что это функции Unifloc для внутреннего использования при кодировании
Function unf_pvt_viscosity_dead_oil_Standing_cP(ByVal Temperature_K As Double, _
                                                ByVal gamma_oil As Double) As Double
        ' похоже изначально это корреляция Beal 1946
        '   в оригинальное работе
        '   Beal, Carlton. "The Viscosity of Air, Water, Natural Gas, Crude Oil and Its Associated Gases at Oil Field Temperatures and Pressures." Trans. 165 (1946): 94–115. doi: https://doi.org/10.2118/946094-G
        '   нет формул только палетки
        '
        ' изначально ссылка взята из  "Стандарт компании ЮКОС. Физические свойства нефти. Методы расчета" 2002
        '
        ' формулы можно найти в PEH
        '    https://petrowiki.spe.org/PEH:Oil_System_Correlations
        ' точнее в приложении таблица A-7
        '    https://petrowiki.spe.org/File:Vol1_Page_323_Image_0001.png
        
        unf_pvt_viscosity_dead_oil_Standing_cP = (0.32 + 1.8 * 10 ^ 7 / (141.5 / gamma_oil - 131.5) ^ 4.53) * (360 / (1.8 * Temperature_K - 260)) ^ (10 ^ (0.43 + 8.33 / (141.5 / gamma_oil - 131.5)))
End Function
Function unf_pvt_compressibility_oil_VB_1MPa(ByVal rs_m3m3 As Double, _
                                             ByVal gamma_gas As Double, _
                                             ByVal t_K As Double, _
                                             ByVal gamma_oil As Double, _
                                             ByVal p_MPa As Double) As Double
        
        unf_pvt_compressibility_oil_VB_1MPa = (28.1 * rs_m3m3 + 30.6 * t_K - 1180 * gamma_gas + 1784 / gamma_oil - 10910) / (100000 * p_MPa)
End Function
Function unf_pvt_compressibility_oil_saturated_McCain_1MPa( _
                                            ByVal rsb_m3m3 As Double, _
                                            ByVal gamma_oil As Double, _
                                            ByVal t_K As Double, _
                                            ByVal p_MPa As Double, _
                                            ByVal pb_MPa As Double) As Double
    Dim co_1psi As Double
    Dim rsb_scfstb As Double
    Dim t_F As Double
    Dim API As Double
    Dim p_psia As Double
    Dim Pb_psia As Double
    
    rsb_scfstb = rsb_m3m3 * const_convert_m3m3_scfbbl
    t_F = UC_Temperature_K_to_F(t_K)
    API = UC_density_gamma_oil_to_API(gamma_oil)
    
    p_psia = UC_pressure_MPa_to_psia(p_MPa)
    Pb_psia = UC_pressure_MPa_to_psia(pb_MPa)
    
    co_1psi = Exp(-7.573 - 1.45 * Log(p_psia) - 0.383 * Log(Pb_psia) + 1.402 * Log(t_F) + 0.256 * Log(API) + 0.449 * Log(rsb_scfstb))
    
    unf_pvt_compressibility_oil_saturated_McCain_1MPa = UC_compressibility_1psia_to_1MPa(co_1psi)
End Function
Function unf_pvt_pb_Standing_MPa(ByVal rsb_m3m3 As Double, _
                                 ByVal gamma_gas As Double, _
                                 ByVal Temperature_K As Double, _
                                 ByVal gamma_oil As Double) As Double
        
        Const Min_rsb As Double = 1.8
        
        Dim rsb_old As Double
        Dim yg As Double
        
        rsb_old = rsb_m3m3
        If (rsb_m3m3 < Min_rsb) Then
            rsb_m3m3 = Min_rsb
        End If
        
        yg = 1.225 + 0.001648 * Temperature_K - 1.769 / gamma_oil
        unf_pvt_pb_Standing_MPa = 0.5197 * (rsb_m3m3 / gamma_gas) ^ 0.83 * 10 ^ yg
        
        If (rsb_old < Min_rsb) Then
            unf_pvt_pb_Standing_MPa = (unf_pvt_pb_Standing_MPa - 0.1013) * rsb_old / Min_rsb + 0.1013
        End If
End Function
Function unf_pvt_dBo_drs_Saturated_Oil_Standing(ByVal rs_m3m3 As Double, _
                                                 ByVal gamma_gas As Double, _
                                                 ByVal Temperature_K As Double, _
                                                 ByVal gamma_oil As Double) As Double
' произоводная по rs для расчета сжимаемости
        Dim f As Double
        Dim alpha As Double
        Dim beta As Double
        
        alpha = 5.615 * (gamma_gas / gamma_oil) ^ 0.5
        f = alpha * rs_m3m3 + 2.25 * Temperature_K - 575
        unf_pvt_dBo_drs_Saturated_Oil_Standing = 0.000147 * 1.175 * f ^ (1.175 - 1) * alpha
End Function
Function unf_pvt_FVF_Saturated_Oil_Standing_m3m3(ByVal rs_m3m3 As Double, _
                                                 ByVal gamma_gas As Double, _
                                                 ByVal Temperature_K As Double, _
                                                 ByVal gamma_oil As Double) As Double
   Dim f As Double
   
        f = 5.615 * rs_m3m3 * (gamma_gas / gamma_oil) ^ 0.5 + 2.25 * Temperature_K - 575
        unf_pvt_FVF_Saturated_Oil_Standing_m3m3 = 0.972 + 0.000147 * f ^ 1.175
End Function
Function unf_pvt_FVF_above_pb_Standing_m3m3(ByVal p_MPa As Double, _
                                            ByVal pb_MPa As Double, _
                                            ByVal Oil_Compressibility As Double, _
                                            ByVal FVF_Saturated_Oil As Double) As Double
        If p_MPa <= pb_MPa Then
            unf_pvt_FVF_above_pb_Standing_m3m3 = FVF_Saturated_Oil
        Else
            unf_pvt_FVF_above_pb_Standing_m3m3 = FVF_Saturated_Oil * Exp(Oil_Compressibility * (pb_MPa - p_MPa))
        End If
End Function
Function unf_pvt_viscosity_oil_Standing_cP(ByVal rs_m3m3 As Double, _
                                           ByVal Dead_oil_viscosity As Double, _
                                           ByVal p_MPa As Double, _
                                           ByVal pb_MPa As Double) As Double
    Dim a As Double, B As Double
   
    a = 5.6148 * rs_m3m3 * (0.1235 * 10 ^ (-5) * rs_m3m3 - 0.00074)
    B = 0.68 / 10 ^ (0.000484 * rs_m3m3) + 0.25 / 10 ^ (0.006176 * rs_m3m3) + 0.062 / 10 ^ (0.021 * rs_m3m3)
    unf_pvt_viscosity_oil_Standing_cP = 10 ^ a * Dead_oil_viscosity ^ B
    
    If pb_MPa < p_MPa Then
        unf_pvt_viscosity_oil_Standing_cP = unf_pvt_viscosity_oil_Standing_cP + 0.14504 * (p_MPa - pb_MPa) * (0.024 * unf_pvt_viscosity_oil_Standing_cP ^ 1.6 + 0.038 * unf_pvt_viscosity_oil_Standing_cP ^ 0.56)
    End If
End Function
Function unf_pvt_density_oil_Standing_kgm3(ByVal rs_m3m3 As Double, _
                                           ByVal gamma_gas As Double, _
                                           ByVal gamma_oil As Double, _
                                           ByVal p_MPa As Double, _
                                           ByVal FVF_m3m3 As Double, _
                                           ByVal BP_p_MPa As Double, _
                                           ByVal Compressibility_1MPa As Double) As Double
     unf_pvt_density_oil_Standing_kgm3 = (1000 * gamma_oil + 1.224 * gamma_gas * rs_m3m3) / FVF_m3m3
     If p_MPa > BP_p_MPa Then
        unf_pvt_density_oil_Standing_kgm3 = unf_pvt_density_oil_Standing_kgm3 * Exp(Compressibility_1MPa * (p_MPa - BP_p_MPa))
     End If
End Function
Function unf_pvt_rs_Standing_m3m3(ByVal p_MPa As Double, _
                                   ByVal gamma_gas As Double, _
                                   ByVal Temperature_K As Double, _
                                   ByVal gamma_oil As Double, _
                          Optional ByRef drs_dp As Double) As Double
    Dim yg As Double
        yg = 1.225 + 0.001648 * Temperature_K - 1.769 / gamma_oil
        
        unf_pvt_rs_Standing_m3m3 = gamma_gas * (1.92 * p_MPa / 10 ^ yg) ^ 1.204
        
        drs_dp = gamma_gas * (1.92 * 1 / 10 ^ yg) ^ 1.204 * 1.204 * p_MPa ^ 0.204
End Function
Function unf_pvt_pb_Valko_McCain_MPa(ByVal rsb_m3m3 As Double, _
                                     ByVal gamma_gas As Double, _
                                     ByVal Temperature_K As Double, _
                                     ByVal gamma_oil As Double) As Double
        Const Min_rsb As Double = 1.8
        Const Max_rsb As Double = 800
        
        Dim rsb_old As Double
        Dim API As Double, Z1 As Double, Z2 As Double, Z3 As Double, z4 As Double, z As Double, lnpb As Double
        
        rsb_old = rsb_m3m3
        If (rsb_m3m3 < Min_rsb) Then
          rsb_m3m3 = Min_rsb
        End If
        
        If (rsb_m3m3 > Max_rsb) Then
          rsb_m3m3 = Max_rsb
        End If
     
        API = 141.5 / gamma_oil - 131.5
        Z1 = -4.814074834 + 0.7480913 * Log(rsb_m3m3) + 0.1743556 * Log(rsb_m3m3) ^ 2 - 0.0206 * Log(rsb_m3m3) ^ 3
        Z2 = 1.27 - 0.0449 * API + 4.36 * 10 ^ (-4) * API ^ 2 - 4.76 * 10 ^ (-6) * API ^ 3
        Z3 = 4.51 - 10.84 * gamma_gas + 8.39 * gamma_gas ^ 2 - 2.34 * gamma_gas ^ 3
        z4 = -7.2254661 + 0.043155 * Temperature_K - 8.5548 * 10 ^ (-5) * Temperature_K ^ 2 + 6.00696 * 10 ^ (-8) * Temperature_K ^ 3
        z = Z1 + Z2 + Z3 + z4
        lnpb = 2.498006 + 0.713 * z + 0.0075 * z ^ 2
        
        unf_pvt_pb_Valko_McCain_MPa = 2.718282 ^ lnpb
        
        If (rsb_old < Min_rsb) Then
          unf_pvt_pb_Valko_McCain_MPa = (unf_pvt_pb_Valko_McCain_MPa - 0.1013) * rsb_old / Min_rsb + 0.1013
        End If
        
        If (rsb_old > Max_rsb) Then
          unf_pvt_pb_Valko_McCain_MPa = (unf_pvt_pb_Valko_McCain_MPa - 0.1013) * rsb_old / Max_rsb + 0.1013
        End If
End Function
Function unf_pvt_rs_Velarde_m3m3(ByVal p_MPa As Double, _
                                 ByVal pb_MPa As Double, _
                                 ByVal gamma_gas As Double, _
                                 ByVal Temperature_K As Double, _
                                 ByVal gamma_oil As Double, _
                                 ByVal rsb_m3_m3 As Double, _
                        Optional ByRef drs_dp As Double) As Double
'        Solution Gas-oil ratio calculation according to Velarde McCain (1999) correlation
'
': param p_MPaa: pressure , MPa
'    :param pb_MPaa: buble point pressure, MPa
'    :param rsb_m3m3: gas-oil ratio at the bubble point pressure, m3/m3
'    :param gamma_oil: specific oil density (by water)
'    :param gamma_gas: specific gas density (by air)
': param t_K: temperature , K
'    :return: gas-oil ratio in m3/m3
'
'    ref1 "Correlation of Black Oil Properties at Pressures Below Bubble point Pressure—A New Approach",
'    J. VELARDE, T.A. BLASINGAME Texas A&M University, W.D. MCCAIN, JR. S.A. Holditch & Associates, Inc 1999
'
                                  
Dim API As Double
Dim t_F As Double
Dim Pr As Double
Dim a1 As Double
Dim a2 As Double
Dim a3 As Double, Rsr As Double
Const MaxRs As Double = 800
API = 141.5 / gamma_oil - 131.5
If (pb_MPa > unf_pvt_pb_Valko_McCain_MPa(MaxRs, gamma_gas, Temperature_K, gamma_oil)) Then
    If p_MPa < pb_MPa Then
        unf_pvt_rs_Velarde_m3m3 = (rsb_m3_m3) * (p_MPa / pb_MPa)
    Else
        unf_pvt_rs_Velarde_m3m3 = rsb_m3_m3
    End If
    Exit Function
End If
If (pb_MPa > 0) Then
    Pr = (p_MPa - 0.101) / (pb_MPa - 0.101)
Else
    Pr = 0
End If
If Pr <= 0 Then
    unf_pvt_rs_Velarde_m3m3 = 0
    Exit Function
End If
Const a_0 As Double = 1.8653 * 10 ^ (-4)
Const a_1 As Double = 1.672608
Const a_2 As Double = 0.92987
Const a_3 As Double = 0.247235
Const a_4 As Double = 1.056052
Const b_0 As Double = 0.1004
Const b_1 As Double = -1.00475
Const b_2 As Double = 0.337711
Const b_3 As Double = 0.132795
Const b_4 As Double = 0.302065
Const c_0 As Double = 0.9167
Const c_1 As Double = -1.48548
Const c_2 As Double = -0.164741
Const c_3 As Double = -0.09133
Const c_4 As Double = 0.047094
If Pr >= 1 Then
    unf_pvt_rs_Velarde_m3m3 = rsb_m3_m3
    drs_dp = 0
Else
    t_F = 1.8 * Temperature_K - 460
    a1 = a_0 * gamma_gas ^ a_1 * API ^ a_2 * (t_F) ^ a_3 * pb_MPa ^ a_4
    a2 = b_0 * gamma_gas ^ b_1 * API ^ b_2 * (t_F) ^ b_3 * pb_MPa ^ b_4
    a3 = c_0 * gamma_gas ^ c_1 * API ^ c_2 * (t_F) ^ c_3 * pb_MPa ^ c_4
    
    Rsr = a1 * Pr ^ a2 + (1 - a1) * Pr ^ a3
    drs_dp = a1 * a2 * Pr ^ (a2 - 1) + (1 - a1) * a3 * Pr ^ (a3 - 1)
    drs_dp = drs_dp * rsb_m3_m3 / (pb_MPa - 0.101)
    
    unf_pvt_rs_Velarde_m3m3 = Rsr * rsb_m3_m3
    
End If
End Function
Function unf_pvt_FVF_McCain_m3m3(ByVal rs_m3m3 As Double, _
                                 ByVal gamma_gas As Double, _
                                 ByVal STO_density_kg_m3 As Double, _
                                 ByVal Reservoir_oil_density_kg_m3 As Double) As Double
        unf_pvt_FVF_McCain_m3m3 = (STO_density_kg_m3 + 1.22117 * rs_m3m3 * gamma_gas) / Reservoir_oil_density_kg_m3
End Function
Function unf_pvt_density_McCain_kgm3(ByVal p_MPa As Double, _
                                     ByVal gamma_gas As Double, _
                                     ByVal Temperature_K As Double, _
                                     ByVal gamma_oil As Double, _
                                     ByVal rs_m3_m3 As Double, _
                                     ByVal BP_p_MPa As Double, ByVal _
                                           Compressibility_1MPa As Double) As Double
    Dim ropo As Double, pm As Double, pmmo As Double, epsilon As Double
    Dim counter As Integer
    Dim roa As Double
    Dim dpp As Double, pbs As Double, dPT As Double
On Error GoTo err1:
    
    'limit input range to Rs = 800, Pb =1000
    If (rs_m3_m3 > 800) Then
        rs_m3_m3 = 800
        BP_p_MPa = unf_pvt_pb_Valko_McCain_MPa(rs_m3_m3, gamma_gas, Temperature_K, gamma_oil)
    End If
    
    ropo = 845.8 - 0.9 * rs_m3_m3
    pm = ropo
    pmmo = 0
    epsilon = 0.000001
    counter = 0
    
    Const MaxIter As Integer = 100
    
    Const a0  As Double = -799.21
    Const a1  As Double = 1361.8
    Const a2  As Double = -3.70373
    Const a3  As Double = 0.003
    Const a4  As Double = 2.98914
    Const a5  As Double = -0.00223
    
    While (Abs(pmmo - pm) > epsilon And counter < MaxIter)
        pmmo = pm
        roa = a0 + a1 * gamma_gas + a2 * gamma_gas * ropo + a3 * gamma_gas * ropo ^ 2 + a4 * ropo + a5 * ropo ^ 2
        ropo = (rs_m3_m3 * gamma_gas + 818.81 * gamma_oil) / (0.81881 + rs_m3_m3 * gamma_gas / roa)
        pm = ropo
        counter = counter + 1
       ' Debug.Assert counter < 20
    Wend
    
    Dim t_F_60 As Double
    t_F_60 = 1.8 * Temperature_K - 520
    
    If p_MPa <= BP_p_MPa Then
            dpp = (0.167 + 16.181 * (10 ^ (-0.00265 * pm))) * (2.32328 * p_MPa) - 0.16 * (0.299 + 263 * (10 ^ (-0.00376 * pm))) * (0.14503774 * p_MPa) ^ 2
            pbs = pm + dpp
            dPT = (0.04837 + 337.094 * pbs ^ (-0.951)) * t_F_60 ^ 0.938 - (0.346 - 0.3732 * (10 ^ (-0.001 * pbs))) * t_F_60 ^ 0.475
            pm = pbs - dPT
            unf_pvt_density_McCain_kgm3 = pm
    Else
            dpp = (0.167 + 16.181 * (10 ^ (-0.00265 * pm))) * (2.32328 * BP_p_MPa) - 0.16 * (0.299 + 263 * (10 ^ (-0.00376 * pm))) * (0.14503774 * BP_p_MPa) ^ 2
            pbs = pm + dpp
            dPT = (0.04837 + 337.094 * pbs ^ (-0.951)) * t_F_60 ^ 0.938 - (0.346 - 0.3732 * (10 ^ (-0.001 * pbs))) * t_F_60 ^ 0.475
            pm = pbs - dPT
            unf_pvt_density_McCain_kgm3 = pm * Exp(Compressibility_1MPa * (p_MPa - BP_p_MPa))
    End If
    Exit Function
err1:
    ' что то пошло не так, скорее всего маленькая температура
    Err.Raise kErrPVTinput, , "unf_pvt_density_McCain_kgm3, check input temperature, t_F = " & str(Round(t_F_60, 3)) & " should be positive."
End Function
Function unf_pvt_viscosity_dead_oil_Beggs_Robinson_cP(ByVal Temperature_K As Double, _
                                                      ByVal gamma_oil As Double) As Double
       Dim X As Double
        X = UC_Temperature_K_to_F(Temperature_K) ^ (-1.163) * Exp(13.108 - 6.591 / gamma_oil)
        unf_pvt_viscosity_dead_oil_Beggs_Robinson_cP = 10 ^ (X) - 1
End Function
Function unf_pvt_viscosity_saturated_oil_Beggs_Robinson_cP(ByVal GOR_pb_m3m3 As Double, _
                                                           ByVal Dead_oil_viscosity As Double) As Double
       Dim a As Double
       Dim B As Double
        a = 10.715 * (5.615 * GOR_pb_m3m3 + 100) ^ (-0.515)
        B = 5.44 * (5.615 * GOR_pb_m3m3 + 150) ^ (-0.338)
        unf_pvt_viscosity_saturated_oil_Beggs_Robinson_cP = a * (Dead_oil_viscosity) ^ B
End Function
Function unf_pvt_viscosity_oil_Vasquez_Beggs_cP(ByVal Saturated_oil_viscosity As Double, _
                                                ByVal p_MPa As Double, _
                                                ByVal BP_p_MPa As Double) As Double
        Dim C1 As Double
        Dim C2 As Double
        Dim C3 As Double
        Dim C4 As Double
        Dim M As Double
        
        C1 = 957
        C2 = 1.187
        C3 = -11.513
        C4 = -0.01302
        M = C1 * p_MPa ^ C2 * Exp(C3 + C4 * p_MPa)
        unf_pvt_viscosity_oil_Vasquez_Beggs_cP = Saturated_oil_viscosity * (p_MPa / BP_p_MPa) ^ M
End Function
Function unf_pvt_viscosity_oil_Beggs_Robinson_Vasques_Beggs_cP(ByVal rs_m3m3 As Double, _
                                                               ByVal GOR_pb_m3m3 As Double, _
                                                               ByVal p_MPa As Double, _
                                                               ByVal BP_p_MPa As Double, _
                                                               ByVal Dead_oil_viscosity As Double) As Double
 If (p_MPa < BP_p_MPa) Then 'saturated
   unf_pvt_viscosity_oil_Beggs_Robinson_Vasques_Beggs_cP = unf_pvt_viscosity_saturated_oil_Beggs_Robinson_cP(rs_m3m3, Dead_oil_viscosity)
 Else 'undersaturated
   unf_pvt_viscosity_oil_Beggs_Robinson_Vasques_Beggs_cP = unf_pvt_viscosity_oil_Vasquez_Beggs_cP( _
     unf_pvt_viscosity_saturated_oil_Beggs_Robinson_cP(GOR_pb_m3m3, Dead_oil_viscosity), p_MPa, BP_p_MPa)
 End If
 
End Function
Function unf_pvt_viscosity_Grace_cP(ByVal p_MPa As Double, _
                                    ByVal pb_MPa As Double, _
                                    ByVal rho_kgm3 As Double, _
                                    ByVal BP_rho_kgm3 As Double) As Double
    Dim density As Double
    Dim Bubblepoint_Density As Double
    Dim rotr As Double
    Dim mu As Double
    Dim robtr As Double
    Dim M As Double
    density = rho_kgm3 * 0.06243
    Bubblepoint_Density = BP_rho_kgm3 * 0.06243
    rotr = 0.0008 * density ^ 3 - 0.1017 * density ^ 2 + 4.3344 * density - 63.001
    mu = Exp(0.0281 * rotr ^ 3 - 0.0447 * rotr ^ 2 + 1.2802 * rotr + 0.0359)
            If pb_MPa < p_MPa Then
            
                robtr = -68.1067 * Log(Bubblepoint_Density) ^ 3 + 783.2173 * Log(Bubblepoint_Density) ^ 2 - 2992.2353 * Log(Bubblepoint_Density) + 3797.6
                M = Exp(0.1124 * robtr ^ 3 - 0.0618 * robtr ^ 2 + 0.7356 * robtr + 2.3328)
                mu = mu * (rho_kgm3 / BP_rho_kgm3) ^ M
            
            End If
    unf_pvt_viscosity_Grace_cP = mu
End Function
' ==================================================================
' PVT gas
' ==================================================================
Function unf_pvt_viscosity_gas_cP(ByVal t_K As Double, _
                                  ByVal p_MPa As Double, _
                                  ByVal z As Double, _
                                  ByVal GammaGas As Double) As Double
' rnt 20150303
' расчет вязкости газа after Lee    http://petrowiki.org/Gas_viscosity
' похоже, что отсюда
' Lee, A.L., Gonzalez, M.H., and Eakin, B.E. 1966. The Viscosity of Natural Gases. J Pet Technol 18 (8): 997–1000. SPE-1340-PA. http://dx.doi.org/10.2118/1340-PA
'
   
    Dim R As Double, mwg As Double, gd As Double, a As Double, B As Double, c As Double
         
    R = 1.8 * t_K
    mwg = 28.966 * GammaGas
    gd = p_MPa * mwg / (z * t_K * 8.31)
    a = (9.379 + 0.01607 * mwg) * R ^ 1.5 / (209.2 + 19.26 * mwg + R)
    B = 3.448 + 986.4 / R + 0.01009 * mwg
    c = 2.447 - 0.2224 * B
    unf_pvt_viscosity_gas_cP = 0.0001 * a * Exp(B * gd ^ c)
    
End Function
Public Function unf_pvt_dZdt(ByVal t_K As Double, _
                             ByVal p_MPa As Double, _
                             ByVal GammaGas As Double, _
                    Optional ByVal z_cor As Z_CORRELATION = z_Kareem, _
                    Optional ByRef z_val As Double = 1) As Double
    Dim Z1 As Double
    Dim Z2 As Double
    Dim dtz As Double
    dtz = 0.1   ' dangerous to reduce for dranchuk correlation
    
    Z1 = unf_pvt_Zgas_d(t_K, p_MPa, GammaGas, z_cor)
    Z2 = unf_pvt_Zgas_d(t_K + dtz, p_MPa, GammaGas, z_cor)
    unf_pvt_dZdt = (Z2 - Z1) / dtz
    z_val = Z1
End Function
Public Function unf_pvt_dZdp(ByVal t_K As Double, _
                             ByVal p_MPa As Double, _
                             ByVal GammaGas As Double, _
                    Optional ByVal z_cor As Z_CORRELATION = z_Kareem, _
                    Optional ByRef z_val As Double = 1) As Double
    Dim Z1 As Double
    Dim Z2 As Double
    Dim dp As Double
    dp = 0.01 ' dangerous to reduce for dranchuk correlation
    
    Z1 = unf_pvt_Zgas_d(t_K, p_MPa, GammaGas, z_cor)
    Z2 = unf_pvt_Zgas_d(t_K, p_MPa + dp, GammaGas, z_cor)
    unf_pvt_dZdp = (Z2 - Z1) / dp
    z_val = Z1
End Function
Public Function unf_pvt_Zgas_d(ByVal t_K As Double, _
                               ByVal p_MPa As Double, _
                               ByVal GammaGas As Double, _
                      Optional ByVal z_cor As Z_CORRELATION = z_Kareem) As Double
' calculus of z factor
' rnt 20150303 не желательно использовать значение корреляции отличное от 0
' http://petrowiki.org/Real_gases
' расчет по Дранчуку или по Саттону
' Dranchuk, P.M. and Abou-Kassem, H. 1975. Calculation of Z Factors For Natural Gases Using Equations of State. J Can Pet Technol 14 (3): 34. PETSOC-75-03-03. http://dx.doi.org/10.2118/75-03-03
' Sutton, R.P. 1985. Compressibility Factors for High-Molecular-Weight Reservoir Gases. Presented at the SPE Annual Technical Conference and Exhibition, Las Vegas, Nevada, USA, 22-26 September. SPE-14265-MS. http://dx.doi.org/10.2118/14265-MS
    Dim T_pc As Double
    Dim p_pc As Double
    Dim z As Double
On Error GoTo err1:
    If z_cor = z_Dranchuk Then
     T_pc = PseudoTemperatureStanding(GammaGas)
     p_pc = PseudoPressureStanding(GammaGas)
     z = ZFactorDranchuk(t_K / T_pc, p_MPa / p_pc)
    ElseIf z_cor = z_Kareem Then
     T_pc = PseudoTemperatureStanding(GammaGas)
     p_pc = PseudoPressureStanding(GammaGas)
     z = ZFactor2015_Kareem(t_K / T_pc, p_MPa / p_pc)
    Else
     T_pc = PseudoTemperature(GammaGas)
     p_pc = PseudoPressure(GammaGas)
     z = ZFactor(t_K / T_pc, p_MPa / p_pc)
    End If
    unf_pvt_Zgas_d = z '* aaaa
    Exit Function
err1:
    Dim msg As String
    msg = "unf_pvt_Zgas_d: error with " & "t_K = " & CStr(t_K) & ", P_MPa = " & CStr(p_MPa) & ", GammaGas = " & CStr(GammaGas) & ", z_cor = " & CStr(z_cor) & ": " & Err.Description
    Err.Raise kErrPVTcalc, , msg
End Function
Public Function unf_pvt_Bg_m3m3(ByVal t_C As Double, _
                                ByVal p_atma As Double, _
                                ByVal GammaGas As Double, _
                                Optional correlation As Integer = 0) As Double
    'function calculates gas formation volume factor
    
    ' t_С   -   temprature, C
    ' p_atma   -   pressure, atma
    ' gamma_g   - specific gas density
    ' correlation
    '    0 - using Dranchuk and Abou-Kassem correlation
    '    else - using Sutton correlation for the pseudocritical properties of hydrocarbon mixtures
    Dim t_K As Double
    Dim p_MPa As Double
    Dim z As Double
  '  Debug.Assert GammaGas > 0.5
    t_K = t_C + 273
    p_MPa = p_atma / 10.13
    z = unf_pvt_Zgas_d(t_K, p_MPa, GammaGas, correlation)
    unf_pvt_Bg_m3m3 = unf_pvt_Bg_z_m3m3(t_K, p_MPa, z)
End Function
Function unf_pvt_Bg_z_m3m3(ByVal t_K As Double, _
                           ByVal p_MPa As Double, _
                           ByVal z As Double) As Double
' Расчет объемного коэффициента газа при известном коэффиенте сжимаемости газа
' rnt 20150303
' хорошо определить при какой температуре рассчитан объемный коэффициент газа
   
    unf_pvt_Bg_z_m3m3 = 0.00034722 * t_K * z / p_MPa
End Function
'======================= сервисные функции для расчета свойств газа ==============================
Private Function ZFactorEstimateDranchuk(ByVal Tpr As Double, _
                                         ByVal Ppr As Double, _
                                         ByVal z As Double) As Double
  'Continious function which return 0 if Z factor is correct for given pseudoreduced temperature and pressure
  'Used to find Z factor
  
  Const a1 As Double = 0.3265
  Const a2 As Double = -1.07
  Const a3 As Double = -0.5339
  Const a4 As Double = 0.01569
  Const a5 As Double = -0.05165
  Const a6 As Double = 0.5475
  Const a7 As Double = -0.7361
  Const a8 As Double = 0.1844
  Const a9 As Double = 0.1056
  Const a10 As Double = 0.6134
  Const A11 As Double = 0.721
  Dim rho_r As Double
  rho_r = 0.27 * Ppr / (z * Tpr)
  ZFactorEstimateDranchuk = -z + (a1 + a2 / Tpr + a3 / Tpr ^ 3 + a4 / Tpr ^ 4 + a5 / Tpr ^ 5) * rho_r + _
       (a6 + a7 / Tpr + a8 / Tpr ^ 2) * rho_r ^ 2 - a9 * (a7 / Tpr + a8 / Tpr ^ 2) * rho_r ^ 5 + _
       a10 * (1 + A11 * rho_r ^ 2) * rho_r ^ 2 / Tpr ^ 3 * Exp(-A11 * rho_r ^ 2) + 1#
End Function
Private Function ZFactorDranchuk(ByVal Tpr As Double, _
                                 ByVal Ppr As Double, _
                        Optional msg As String) As Double
' rnt_bug 2015/03/03  расчет может быть не корректным при определенных значения приведенных давелния и температуры
' необходимо исправить - заменить метод деления отрезка пополам на метод ньютона модифицированный
' необходимо вставить сообщение о выходе расчета за границы применимости и предупреждение
  
  
 ' Debug.Assert Ppr >= const_Ppr_min
  Dim y_low As Double
  Dim y_hi As Double
  Dim Z_low As Double
  Dim Z_hi As Double
  Dim Z_mid As Double
  Z_low = 0.1
  Z_hi = 5
  Dim i As Integer
  i = 0
  'find foot of ZFactorEstimateDranchuk function by bisection of [Z_low...Z_hi] interval
  Do
   'we assume that for Z_low and Z_hi ZFactorEstimateDranchuk function of different signes
   Z_mid = 0.5 * (Z_hi + Z_low)
   y_low = ZFactorEstimateDranchuk(Tpr, Ppr, Z_low)
   y_hi = ZFactorEstimateDranchuk(Tpr, Ppr, Z_mid)
   If (y_low * y_hi < 0) Then
    Z_hi = Z_mid
   Else
    Z_low = Z_mid
   End If
   i = i + 1
  Loop Until (i > 200 Or Abs(Z_low - Z_hi) < 0.000001)
  ' rnt check iteration convergence ******************************
  If i > 20 And Abs(Z_low - Z_hi) > 0.001 Then
        ' solution not found
        msg = "*****ZFactorDranchuk: z фактор не найден из за расхождения итераций по Дранчуку. Tpr = " & Tpr & "  Ppr = " & Ppr
' error_probability = increment_error_probability(error_probability, 1000)
  End If
  '****************************************************************
  ZFactorDranchuk = Z_mid
  ' rnt 20150312 костыль для исправления ошибки при низких приведенных давлениях
  '              исправление дает небольшую погрешность - следует заменить далее на корректный метод решения уравнения дранчука
  If ZFactorDranchuk > 4.99 Then
        msg = " ZFactorDranchuk: корректировка z фактора из за расхождения итерация по Дранчуку. Tpr = " & Tpr & "  Ppr = " & Ppr
        ZFactorDranchuk = ZFactor(Tpr, Ppr)
  End If
  ' rnt 20150312 end
End Function
Private Function ZFactor2015_Kareem(ByVal Tpr As Double, _
                                    ByVal Ppr As Double) As Double
' based on  https://link.springer.com/article/10.1007/s13202-015-0209-3
'
' Kareem, L.A., Iwalewa, T.M. & Al-Marhoun, M.
' New explicit correlation for the compressibility factor of natural gas: linearized z-factor isotherms.
' J Petrol Explor Prod Technol 6, 481–492 (2016).
' https://doi.org/10.1007/s13202-015-0209-3
    
    Dim t As Double
    Dim AA As Double
    Dim BB As Double
    Dim CC As Double
    Dim dd As Double
    Dim EE As Double
    Dim FF As Double
    Dim gg As Double
    Dim a(19) As Double
    Dim y As Double
    Dim z As Double
    
    a(1) = 0.317842
    a(11) = -1.966847
    a(2) = 0.382216
    a(12) = 21.0581
    a(3) = -7.768354
    a(13) = -27.0246
    a(4) = 14.290531
    a(14) = 16.23
    a(5) = 0.000002
    a(15) = 207.783
    a(6) = -0.004693
    a(16) = -488.161
    a(7) = 0.096254
    a(17) = 176.29
    a(8) = 0.16672
    a(18) = 1.88453
    a(9) = 0.96691
    a(19) = 3.05921
    a(10) = 0.063069
     
     
    
    Dim T2 As Double
    Dim T3 As Double
    Dim Y2 As Double
    
    t = 1 / Tpr
    T2 = t ^ 2
    T3 = t ^ 3
    AA = (a(1) * t * Exp(a(2) * (1 - t) ^ 2) * Ppr) ^ 2
    BB = a(3) * t + a(4) * T2 + a(5) * t ^ 6 * Ppr ^ 6
    CC = a(9) + a(8) * t * Ppr + a(7) * T2 * Ppr ^ 2 + a(6) * T3 * Ppr ^ 3
    dd = a(10) * t * Exp(a(11) * (1 - t) ^ 2)
    EE = a(12) * t + a(13) * T2 + a(14) * T3
    FF = a(15) * t + a(16) * T2 + a(17) * T3
    gg = a(18) + a(19) * t
    
    Dim DPpr As Double
    DPpr = dd * Ppr
    y = DPpr / ((1 + AA) / CC - AA * BB / (CC ^ 3))
    Y2 = y ^ 2
    
    z = DPpr * (1 + y + Y2 - y ^ 3) / (DPpr + EE * Y2 - FF * y ^ gg) / ((1 - y) ^ 3)
    
    ZFactor2015_Kareem = z
End Function
Private Function ZFactor(ByVal Tpr As Double, _
                         ByVal Ppr As Double) As Double
' rnt_warning 20150303 известно, что функция дает большую погрешность при расчете
' не рекомендуется использовать
        
    Dim a As Double, B As Double, c As Double, d As Double
    a = 1.39 * (Tpr - 0.92) ^ 0.5 - 0.36 * Tpr - 0.101
    B = Ppr * (0.62 - 0.23 * Tpr) + Ppr ^ 2 * (0.006 / (Tpr - 0.86) - 0.037) + 0.32 * Ppr ^ 6 / Exp(20.723 * (Tpr - 1))
    c = 0.132 - 0.32 * Log(Tpr) / Log(10)
    d = Exp(0.715 - 1.128 * Tpr + 0.42 * Tpr ^ 2)
    ZFactor = a + (1 - a) * Exp(-B) + c * Ppr ^ d
    
End Function
Private Function PseudoTemperature(ByVal gamma_gas As Double) As Double
    PseudoTemperature = 95 + 171 * gamma_gas
End Function
Private Function PseudoPressure(ByVal gamma_gas As Double) As Double
    PseudoPressure = 4.9 - 0.4 * gamma_gas
End Function
Private Function PseudoTemperatureStanding(ByVal gamma_gas As Double) As Double
    PseudoTemperatureStanding = 93.3 + 180 * gamma_gas - 6.94 * gamma_gas ^ 2
End Function
Private Function PseudoPressureStanding(ByVal gamma_gas As Double) As Double
    PseudoPressureStanding = 4.6 + 0.1 * gamma_gas - 0.258 * gamma_gas ^ 2
End Function
' ================================================================
' PVT water
' ================================================================
' Water viscosity
Function unf_pvt_viscosity_wat_cP(ByVal p_MPa As Double, _
                                  ByVal Temperature_K As Double, _
                                  ByVal Salinity_ppm As Double) As Double
' http://petrowiki.org/Produced_water_properties
    Dim wpTDS As Double, a As Double, B As Double, visc As Double, Psi As Double
    
    wpTDS = Salinity_ppm / (10000)  ' weigth percent salinity
    
    a = 109.574 - 8.40564 * wpTDS + 0.313314 * wpTDS ^ 2 + 0.00872213 * wpTDS ^ 3
    B = -1.12166 + 0.0263951 * wpTDS - 0.000679461 * wpTDS ^ 2 - 5.47119 * 10 ^ (-5) * wpTDS ^ 3 + 1.55586 * 10 ^ (-6) * wpTDS ^ 4
    
    visc = a * (1.8 * Temperature_K - 460) ^ B
    Psi = p_MPa * 145.04
    unf_pvt_viscosity_wat_cP = visc * (0.9994 + 4.0295 * 10 ^ (-5) * Psi + 3.1062 * 10 ^ (-9) * Psi ^ 2)
End Function
' Water density
Function unf_pvt_Bw_d(ByVal p_MPa As Double, _
                      ByVal Temperature_K As Double, _
                      ByVal Salinity_ppm As Double) As Double
' http://petrowiki.org/Produced_water_density
  
    
    unf_pvt_Bw_d = unf_pvt_BwSC_d(Salinity_ppm) / unf_pvt_Bw_m3m3(p_MPa, Temperature_K)
    
End Function
' Water FVF
Function unf_pvt_Bw_m3m3(ByVal p_MPa As Double, _
                         ByVal Temperature_K As Double) As Double
' http://petrowiki.org/Produced_water_formation_volume_factor
' McCain, W.D. Jr.: McCain, W.D. Jr. 1990. The Properties of Petroleum Fluids, second edition. Tulsa, Oklahoma: PennWell Books.
' McCain Jr., W.D. 1991. Reservoir-Fluid Property Correlations-State of the Art (includes associated papers 23583 and 23594). SPE Res Eng 6 (2): 266-272. SPE-18571-PA. http://dx.doi.org/10.2118/18571-PA
 Dim f As Double, Psi As Double, dvwp As Double, dvwt As Double
 f = 1.8 * Temperature_K - 460
 Psi = p_MPa * 145.04
 dvwp = -1.95301 * 10 ^ (-9) * Psi * f - 1.72834 * 10 ^ (-13) * Psi ^ 2 * f - 3.58922 * 10 ^ (-7) * Psi - 2.25341 * 10 ^ (-10) * Psi ^ 2
 dvwt = -1.0001 * 10 ^ (-2) + 1.33391 * 10 ^ (-4) * f + 5.50654 * 10 ^ (-7) * f ^ 2
 unf_pvt_Bw_m3m3 = (1 + dvwp) * (1 + dvwt)
End Function
' Water density at standard conditions
Function unf_pvt_BwSC_d(ByVal Salinity_ppm As Double) As Double
       
    Dim wpTDS As Double
    
    wpTDS = Salinity_ppm / (10000)
    unf_pvt_BwSC_d = 0.0160185 * (62.368 + 0.438603 * wpTDS + 0.00160074 * wpTDS ^ 2)
   
End Function
Function unf_pvt_Sal_BwSC_ppm(ByVal BwSC As Double) As Double
' функция для оценки солености воды по объемному коэффициенту (получена как обратная к unf_pvt_BwSC_d)
    unf_pvt_Sal_BwSC_ppm = (624.711071129603 * BwSC / 0.0160185 - 20192.9595437054) ^ 0.5 - 137.000074965329
    unf_pvt_Sal_BwSC_ppm = unf_pvt_Sal_BwSC_ppm * 10000
End Function
' GWR
Function unf_pvt_GWR_m3m3(ByVal p_MPa As Double, _
                          ByVal Temperature_K As Double, _
                          ByVal Salinity_ppm As Double) As Double
' rnt 20150303 надо найти источник корреляции - скорее всего крига Брилла по многофазному потоку
' 201503 не используется в расчетах
 Dim f As Double, Psi As Double, wpTDS As Double, a As Double, B As Double, c As Double, Rswws As Double
    
    ' rnt 20150319 проверка диапазонов значений
    
    f = 1.8 * Temperature_K - 460
    Psi = p_MPa * 145.04
    wpTDS = Salinity_ppm / (10000)
    a = 8.15839 - 0.0612265 * f + 1.91663 * 10 ^ (-4) * f ^ 2 - 2.1654 * 10 ^ (-7) * f ^ 3
    B = 1.01021 * 10 ^ (-2) - 7.44241 * 10 ^ (-5) * f + 3.05553 * 10 ^ (-7) * f ^ 2 - 2.94883 * 10 ^ (-10) * f ^ 3
    c = (-9.02505 + 0.130237 * f - 8.53425 * 10 ^ (-4) * f ^ 2 + 2.34122 * 10 ^ (-6) * f ^ 3 - 2.37049 * 10 ^ (-9) * f ^ 4) * 10 ^ (-7)
    Rswws = (a + B * Psi + c * Psi ^ 2) * 0.1781
    unf_pvt_GWR_m3m3 = Rswws * 10 ^ (-0.0840655 * wpTDS * f ^ (-0.285854))
End Function
' Water compressibility
Function unf_pvt_compressibility_wat_1atma(ByVal p_MPa As Double, _
                                           ByVal Temperature_K As Double, _
                                           ByVal Salinity_ppm As Double) As Double
' http://petrowiki.org/Produced_water_compressibility
' 201503 не используется в расчетах
 
 Dim f As Double, Psi As Double
  
 f = 1.8 * Temperature_K - 460
 Psi = p_MPa * 145.04
 unf_pvt_compressibility_wat_1atma = 0.1 * 145.04 / (7.033 * Psi + 0.5415 * Salinity_ppm - 537 * f + 403300)
End Function
Public Function unf_pvt_gas_heat_capacity_ratio(gg As Double, _
                                               t_K As Double) As Double
'http://www.jmcampbell.com/tip-of-the-month/2013/05/variation-of-ideal-gas-heat-capacity-ratio-with-temperature-and-relative-density/
' eq 6
' temp range - 25C to 150 C
' gg range 0.55 to 2
 Dim k As Double
 Dim a As Double
 
 a = 0.000286
 k = (1.6 - 0.44 * gg + 0.097 * gg * gg) * (1 + 0.0385 * gg - a * t_K)
 unf_pvt_gas_heat_capacity_ratio = k
 
End Function
' функции для расчета границ образования гидратов
' Горидько К 2019
'Y.F. Makogon, Hydrates of Natural Gas, PennWell, 1981, pp. 12–13.
Public Function unf_fa_hydrate_p_Makogon_atma(ByVal t_C As Double, _
                                     Optional ByVal Gas_gravity As Double = 0.7) As Double
                                    
Dim B As Double
Dim k As Double
Dim a As Double
Dim GL_P_Makogon_Hydrate_MPa As Double
B = 2.681 - 3.811 * Gas_gravity + 1.679 * Gas_gravity ^ 2
k = -0.006 + 0.11 * Gas_gravity + 0.011 * Gas_gravity
a = B + 0.0497 * (t_C + k * t_C ^ 2) - 1
GL_P_Makogon_Hydrate_MPa = Exp(a)
unf_fa_hydrate_p_Makogon_atma = GL_P_Makogon_Hydrate_MPa * const_convert_MPa_atma
End Function
Public Function unf_fa_hydrate_t_Moitee_C(ByVal p_atma As Double, _
                                 Optional ByVal Gas_gravity As Double = 0.7) As Double
' Motiee M. Estimate possibility of hydrate. Hydrological Processes. July 1991;70(7):98–99
Dim C1 As Double
Dim C2 As Double
Dim C3 As Double
Dim C4 As Double
Dim C5 As Double
Dim C6 As Double
Dim p_psi As Double
Dim GL_T_Moitee_Hydrate_F As Double
p_psi = p_atma * const_convert_atma_psi
                                       
C1 = -238.24469
C2 = 78.99667
C3 = -5.352544
C4 = 349.473877
C5 = -150.854675
C6 = -27.604065
GL_T_Moitee_Hydrate_F = C1 + C2 * Log(p_psi) / Log(10) + C3 * (Log(p_psi) / Log(10)) ^ 2 + C4 * Gas_gravity + C5 * Gas_gravity ^ 2 + C6 * Gas_gravity * Log(p_psi) / Log(10)
unf_fa_hydrate_t_Moitee_C = UC_Temperature_F_to_C(GL_T_Moitee_Hydrate_F)
                                       
End Function
Public Function unf_fa_hydrate_t_Sun_C(ByVal p_atma As Double, _
                              Optional ByVal Gas_gravity As Double = 0.7) As Double
' Sun C.-Y, Chen G.-J, Lin W, Guo T.-M. Hydrate formation conditions of sour
' natural gases. Journal of Chemical and Engineering Data. 2003;48:600–603.
Dim C1 As Double
Dim C2 As Double
Dim C3 As Double
Dim C4 As Double
Dim p_MPa As Double
Dim t1K As Double
p_MPa = p_atma * const_convert_atma_MPa
                                       
C1 = 4.343295
C2 = 0.0010734
C3 = -0.091984
C4 = -1.071989
t1K = 1000 / (C1 + C2 * p_MPa + C3 * Log(p_MPa) + C4 * Gas_gravity)
unf_fa_hydrate_t_Sun_C = t1K - const_t_K_zero_C
                                 
End Function
'поправка Hammerschmidt на температуру гидратообразования при наличии ингибитора'
Public Function unf_fa_hydrate_dt_Hammerschmidt_C(ByVal C_W_perc As Double, _
                                         Optional ByVal Ingibitor As Integer = 1) As Double
'C_W_perc - weight rercent of ingibitor
'type of ingibitor: 1 - methanol, 2 - ethylene glycol, 3 - triethylene glycol
'k - constant for specific ingibitor
'M - molecular weight
Dim M As Double
Dim k As Double
If Ingibitor = 1 Then
    M = 32.04
    k = 2335
ElseIf Ingibitor = 2 Then
    M = 62.07
    k = 2700
ElseIf Ingibitor = 3 Then
    M = 150.17
    k = 5400
Else
    unf_fa_hydrate_dt_Hammerschmidt_C = "wrong input"
    Exit Function
End If
    
unf_fa_hydrate_dt_Hammerschmidt_C = k * C_W_perc / (100 * M - C_W_perc * M)
End Function
'поправка carrol на температуру гидратообразования при наличии ингибитора'
Public Function unf_fa_hydrate_dt_Carroll_C(ByVal C_W_perc As Double, _
                                   Optional ByVal Ingibitor As Integer = 1) As Double
'Natural Gas Hydrates: A Guide for Engineers John Carroll
'C_W_perc - weight rercent of ingibitor
'type of ingibitor: 1 - methanol, 2 - ethylene glycol, 3 - triethylene glycol
'k - constant for specific ingibitor
'M - molecular weight
Dim M As Double
Dim a As Double
Dim xl As Double
Dim DT_Hydfrate_C As Double
If Ingibitor = 1 Then
    M = 32.04
    a = 0.21
ElseIf Ingibitor = 2 Then
    M = 62.07
    a = -1.25
ElseIf Ingibitor = 3 Then
    M = 150.17
    a = -15
Else
    unf_fa_hydrate_dt_Carroll_C = "wrong input"
    Exit Function
End If
    Dim M_H20_gmol As Double
    M_H20_gmol = 18
    Dim WI As Double
    
    WI = C_W_perc / 100
xl = WI / M / (WI / M + (1 - WI) / M_H20_gmol)
DT_Hydfrate_C = -72 * (a * xl ^ 2 + Log(1 - xl))
unf_fa_hydrate_dt_Carroll_C = DT_Hydfrate_C
End Function
'расчет индекса насыщения по Oddo Tomson
Function unf_fa_scale_SI(P_atm As Double, _
            t_C As Double, _
            q_liq_sm3day As Double, _
            fw As Double, _
            rp_m3m3 As Double, _
            NaK As Double, _
            Ca2 As Double, _
            Mg2 As Double, _
            Ba2 As Double, _
            Sr2 As Double, _
            cl As Double, _
            SO4 As Double, _
            HCO3 As Double, _
            CO2_mol As Double, _
            Optional mode As Integer = 0) As Double
' P_atm  - давление
' T_C    - температура
' q_liq  - liquid production rate
' fw     - water fraction
' rp_m3m3 - GOR - gas oil ratio
' NaK  - натирий и калий Na+ + K+  массовая концентрация мг/л
' Ca2 - кальций Ca2+  массовая концентрация мг/л
' Mg2 - магний Mg2+  массовая концентрация мг/л
' Ba2 - барий Ba2   массовая концентрация мг/л
' Sr2 - стронций Sr2+  массовая концентрация мг/л
' Cl - хлор Cl- массовая концентрация мг/л
' SO4-  сульфат SO42-  массовая концентрация мг/л
' HCO3 - гидрокарбонат HCO3-  массовая концентрация мг/л
' CO2_mol - мольная доля в газе
Dim mu As Double
Dim p_psi
Dim t_F As Double
Dim qo_bpd As Double
Dim qw_bpd As Double
Dim qg_mscfd As Double
Dim co2_fug As Double
Dim c02_pp As Double
Dim co2_mol_pt As Double
Dim co2_pp As Double
Dim co2_wat As Double
Dim a As Double
Dim B As Double
Dim c As Double
Dim d As Double
Dim e As Double
Dim f As Double
Dim g As Double
Dim h As Double
Dim pw As Double
' ионная сила раствора
mu = (cl / 35.45 + HCO3 / 61 + NaK / 23 + 2 * (Ca2 / 20.04 + Mg2 / 12.15 + Ba2 / 68.5 + Sr2 / 44 + SO4 / 48)) / 2000
' перевод в field units чтобы использовать коэффициенты из Оддо Томсона
p_psi = P_atm * 14.224
t_F = 9 / 5 * t_C + 32
' пересчет расходных параметров
qo_bpd = q_liq_sm3day * (1 - fw / 100) * 1000 / 158.99
qw_bpd = (q_liq_sm3day * fw / 100) * 1000 / 158.99
qg_mscfd = q_liq_sm3day * (1 - fw / 100) * rp_m3m3 * 1000 / (1000000 * 28.3168)
' летучесть газообразной CO2 при соответствующем давлении и температуре
co2_fug = Exp((0.1 + 0.12 * (0.205 + 0.0115 * t_C) ^ (0.5) - 4.576 / 10000 * t_C) * (P_atm / 10) ^ (0.5) - _
              (8.63 / 100 - 1.45 / 100 * (4.43 + 2.25 * t_C) ^ 0.5 + 3.77 / 10000 * t_C) * P_atm / 10 + _
              (7.86 / 1000 - 1.747 / 1000 * (2.804 + 0.158 * t_C) ^ 0.5 + 0.17 / 10000 * t_C) * (P_atm / 10) ^ 1.5)
' мольная доля CO2 в газовой фазе
co2_mol_pt = CO2_mol / (1 + (p_psi * co2_fug * (0.5 * qw_bpd + 10 * qo_bpd) * 0.00001) / (qg_mscfd * (t_F + 460)))
' парциальное давление CO2
co2_pp = P_atm * co2_fug * co2_mol_pt
' определяем мольную концентрацию растворенной в воде CO2 г-ион/л
pw = 10 ^ (Log(co2_pp * 14.224) / (Log(10)) - _
           2.212 - _
           6.51 * 0.001 * t_F + _
           1.019 * 0.00001 * t_F * t_F - _
           1.29 * 0.00001 * p_psi - _
           7.7 * 0.01 * mu ^ 0.5 - _
           5.9 * 0.01 * mu)
co2_wat = 44 * 1000# * pw
' дальше в зависимости от типа соли определяем индекс насыщения SI
' при SI > 0 возможно выпадение соли, при SI < 0 оно маловероятно
' SI = 0 раствор соли в равновесии, при SI < 0 - дефицит насыщения
' при SI > 0 раствор насыщенный, чем больш величина - тем больше риск отложения
'
' при подготовке использованы коэффициенты из книги
' Кащавцев В.Е, Мищенко И.Т. Солеобразование при добыче нефти, 2004
Select Case mode
' расчет для карбоната кальция
     Case 1:
        ' карбонат кальция CaCo3 без газовой фазы
        unf_fa_scale_SI = Log(Ca2 / 40.08 / 1000 * (HCO3 / 61 / 1000) ^ 2 / (co2_wat / 44 / 1000)) / Log(10) _
                  + 3.801 _
                  + 0.008115 * t_F _
                  + 0.000009028 * t_F ^ 2 _
                  - 0.00007419 * p_psi _
                  - 1.966 * mu ^ 0.5 _
                  + 0.695 * mu _
                  - 0.01136 * mu ^ 1.5 _
                  - 0.0001604 * t_F * Sqr(mu)
        
     Case 2
         'карбонат кальция CaCo3  с учетом наличия газовой фазы
        unf_fa_scale_SI = Log(Ca2 / 40.08 / 1000 * (HCO3 / 61 / 1000) ^ 2 / (p_psi * co2_mol_pt * co2_fug)) / Log(10) _
                  + 6.039 _
                  + 0.014462 * t_F _
                  - 0.000000944 * t_F ^ 2 _
                  - 0.00006185 * p_psi _
                  - 1.895 * mu ^ 0.5 _
                  + 0.662 * mu _
                  + 0.03654 * mu ^ 1.5 _
                  - 0.0000008 * t_F * Sqr(mu)
     Case 3
                ' сульфат кальция гипс  CaSO4*2H2O
        a = 3.559
        B = -0.000266
        c = 0.000009029
        d = -0.00005586
        e = -0.847
        f = 0.0524
        g = 0.0852
        h = -0.00209
        unf_fa_scale_SI = Log(Ca2 / 40.08 / 1000 * (SO4 / 96.06 / 1000) / (p_psi * co2_mol_pt * co2_fug)) / Log(10) _
                  + a _
                  + B * t_F _
                  + c * t_F ^ 2 _
                  + d * p_psi _
                  + e * mu ^ 0.5 _
                  + f * mu _
                  + g * mu ^ 1.5 _
                  + h * t_F * Sqr(mu)
     Case 4
                ' сульфат бария BaSO4
        a = 10.147
        B = -0.004946
        c = 0.00001165
        d = -0.00005315
        e = -4.003
        f = 2.787
        g = -0.619
        h = 0.00185
        unf_fa_scale_SI = Log(Ba2 / 137.86 / 1000 * (SO4 / 96.06 / 1000) / (p_psi * co2_mol_pt * co2_fug)) / Log(10) _
                  + a _
                  + B * t_F _
                  + c * t_F ^ 2 _
                  + d * p_psi _
                  + e * mu ^ 0.5 _
                  + f * mu _
                  + g * mu ^ 1.5 _
                  + h * t_F * Sqr(mu)
     Case 5
                ' сульфат магния MgSO4
        a = 2.301
        B = 0.00174
        c = 0.000004553
        d = -0.000007801
        e = -3.969
        f = 2.28
        g = -0.459
        h = -0.0006037
        unf_fa_scale_SI = Log(Mg2 / 24.32 / 1000 * (SO4 / 96.06 / 1000) / (p_psi * co2_mol_pt * co2_fug)) / Log(10) _
                  + a _
                  + B * t_F _
                  + c * t_F ^ 2 _
                  + d * p_psi _
                  + e * mu ^ 0.5 _
                  + f * mu _
                  + g * mu ^ 1.5 _
                  + h * t_F * Sqr(mu)
End Select
End Function

