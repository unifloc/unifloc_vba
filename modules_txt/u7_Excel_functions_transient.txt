'=======================================================================================
'Unifloc 7.51  2025.03                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2025
'
'=======================================================================================
'функции для расчета гидродинамических исследований
'
Option Explicit
'description_to_manual      - для автогенерации
' Расчет интегральной показательной функции Ei(x)
Function Ei(ByVal X As Double)
' x  - агрумент функции, может быть и положительным и отрицательным
' результат - значение функции
'description_end
    If X < -100 Then
        Ei = 0
        Exit Function
    End If
    
    If X > 0 Then
        Ei = ExponentialIntegralEI(X)
    Else
        Ei = -ExponentialIntegralEN(-X, 1)
    End If
End Function
'description_to_manual      - для автогенерации
' Расчет интегральной показательной функции $E_1(x)$
' для вещественных положительных x, x>0 верно E_1(x)=- Ei(-x)
Function E_1(ByVal X As Double)
' x  - агрумент функции, может быть и положительным и отрицательным
' результат - значение функции
'description_end
    If X > 100 Then
        E_1 = 0
    Else
        E_1 = ExponentialIntegralEN(X, 1)
    End If
End Function
'====== simple solutions ========
Private Function pd_line_source(td As Double, _
                                rd As Double)
    If td > 0 Then
        pd_line_source = -0.5 * Ei(-rd * rd / 4 / td)
    Else
        pd_line_source = 0
    End If
End Function
Private Function pd_linear_q_line_source(td As Double, _
                                         rd As Double, _
                                         dqd_dtd As Double)
' расчет безразмерного давления для линейно меняющегося дебита
    Dim r24td As Double
    If td > 0 Then
        r24td = rd ^ 2 / 4 / td
        pd_linear_q_line_source = -dqd_dtd * td / 2 * ((1 + r24td) * Ei(-r24td) + Exp(-r24td))
    Else
        pd_linear_q_line_source = 0
    End If
End Function
'description_to_manual      - для автогенерации
' Расчет неустановившегося решения уравнения фильтрации
' для различных моделей радиального притока к вертикльной скважине
' основано не решениях в пространстве Лапласа и преобразовании Стефеста
Function transient_pd_radial(ByVal td As Double, _
                    Optional ByVal cd As Double = 0, _
                    Optional ByVal skin As Double = 0, _
                    Optional ByVal rd As Double = 1, _
                    Optional model As Integer = 0)
' td         - безразмерное время для которого проводится расчет
' сd         - безразмерный коэффициент влияния ствола скважины
' skin       - скин-фактор, безразмерный skin>0.
'              для skin<0 используйте эффективный радиус скважины
' rd         - безразмерное расстояние для которого проводится расчет
'              rd=1 соответвует забою скважины
' model      - модель проведения расчета. 0 - модель линейного стока Ei
'              1 - модель линейного стока через преобразование Стефеста
'              2 - конечный радиус скважины
'              3 - линейный сток со скином и послепритоком
'              4 - конечный радиус скважины со скином и послепритоком
' результат - безразмерное давление pd
'description_end
On Error GoTo err1:
    Dim CoeffA(4) As Double
    If rd < 1 Then rd = 1
    If skin < 0 Then skin = 0
    CoeffA(0) = rd
    CoeffA(1) = cd
    CoeffA(2) = skin
    CoeffA(3) = model
    Select Case model
    
    Case 0
        transient_pd_radial = pd_line_source(td, rd)
    Case 1
        transient_pd_radial = Abs(Stehfest("pd_lalp_Ei", td, CoeffA))
    Case 2
        transient_pd_radial = Abs(Stehfest("pd_lalp_rw", td, CoeffA))
    Case 3
        CoeffA(3) = 0
        transient_pd_radial = Abs(Stehfest("pd_lalp_cd_skin", td, CoeffA))
    Case 4
        CoeffA(3) = 1
        transient_pd_radial = Abs(Stehfest("pd_lalp_cd_skin", td, CoeffA))
    Case 5
        transient_pd_radial = Abs(Stehfest("pd_lalp_wbs", td, CoeffA))
    End Select
    ' здесь abs чтобы при маленьких значениях pd около нуля все оставалось положительным
    Exit Function
err1:
    transient_pd_radial = -1
    add_log_msg "Error:transient_pd_radial:" & Err.Description
End Function
'description_to_manual      - для автогенерации
' расчет изменения забойного давления после запуска скважины
' с постоянным дебитом (terminal rate solution)
Function transient_pwf_radial_atma(ByVal t_hr As Double, _
                                   ByVal q_liq_sm3day As Double, _
                          Optional ByVal pi_atma As Double = 250, _
                          Optional ByVal skin As Double = 0, _
                          Optional ByVal cs_1atm As Double = 0, _
                          Optional ByVal r_m As Double = 0.1, _
                          Optional ByVal rw_m As Double = 0.1, _
                          Optional ByVal k_mD As Double = 100, _
                          Optional ByVal h_m As Double = 10, _
                          Optional ByVal porosity As Double = 0.2, _
                          Optional ByVal mu_cP As Double = 1, _
                          Optional ByVal b_m3m3 As Double = 1.2, _
                          Optional ByVal ct_1atm As Double = 0.00001, _
                          Optional ByVal model As Integer = 0) As Double
' t_hr        - время для которого проводится расчет, час
' q_liq_sm3day - дебит запуска скважины, м3/сут в стандартных условиях
' pi_atma     - начальное пластовое давление, атма
' skin        - скин - фактор, может быть отрицательным
' cs_1atm     - коэффициент влияния ствола скважины, 1/атм
' r_m         - расстояние от скважины для которого проводится расчет, м
' rw_m        - радиус скважины, м
' k_mD        - проницаемость пласта, мД
' h_m         - толщина пласта, м
' porosity    - пористость
' mu_cP       - вязкость флюида в пласте, сП
' b_m3m3      - объемный коэффициент нефти, м3/м3
' ct_1atm     - общая сжимаемость системы в пласте, 1/атм
' model      - модель проведения расчета. 0 - модель линейного стока Ei
'              1 - модель линейного стока через преобразование Стефеста
'              2 - конечный радиус скважины
'              3 - линейный сток со скином и послепритоком
'              4 - конечный радиус скважины со скином и послепритоком
' результат -  давление pwf
'description_end
    Dim td As Double, cd As Double, rd As Double
    Dim pd As Double
    Dim delta_p_atm As Double
    
    cd = 0.159 / h_m / porosity / ct_1atm / (rw_m * rw_m) * cs_1atm
    
    cd = transient_cd_from_cs(cs_1atm, rw_m, h_m, porosity, ct_1atm)
    If skin < 0 Then
        rw_m = rw_m * Exp(-skin)
        If r_m < rw_m Then r_m = rw_m
        skin = 0
    End If
    
    td = transient_td_from_t(t_hr, rw_m, k_mD, porosity, mu_cP, ct_1atm)
    
    rd = r_m / rw_m
    
    pd = transient_pd_radial(td, cd, skin, rd, model)
    
    delta_p_atm = transient_p_from_pd_atma(pd, q_liq_sm3day, pi_atma, k_mD, h_m, mu_cP, b_m3m3)
    
    transient_pwf_radial_atma = delta_p_atm
    
End Function
'description_to_manual      - для автогенерации
' расчет безразмерного коэффициента влияния ствола скважины (определение)
Function transient_cd_from_cs( _
                      ByVal cs_1atm, _
             Optional ByVal rw_m As Double = 0.1, _
             Optional ByVal h_m As Double = 10, _
             Optional ByVal porosity As Double = 0.2, _
             Optional ByVal ct_1atm As Double = 0.00001 _
             )
' cs_1atm     - коэффициент влияния ствола скважины, 1/атм
' rw_m        - радиус скважины, м
' h_m         - толщина пласта, м
' porosity    - пористость
' ct_1atm     - общая сжимаемость системы в пласте, 1/атм
' результат   - безразмерный коэффициент влияния ствола скважины  cd
'description_end
    
    Dim cs_arr
    Dim i As Integer
    
    cs_arr = parse_list(cs_1atm)
    If UBound(cs_arr) = LBound(cs_arr) Then
        transient_cd_from_cs = 0.159 / h_m / porosity / ct_1atm / (rw_m * rw_m) * cs_1atm
        Exit Function
    Else
        ReDim res(LBound(cs_arr) To UBound(cs_arr)) As Double
        For i = LBound(cs_arr) To UBound(cs_arr)
            res(i) = 0.159 / h_m / porosity / ct_1atm / (rw_m * rw_m) * cs_arr(i)
        Next i
    End If
    transient_cd_from_cs = ConvertToJson(res)
    
End Function
'description_to_manual      - для автогенерации
' расчет коэффициента влияния ствола скважины (определение)
Function transient_cs_from_cd_1atm(ByVal cd, _
             Optional ByVal rw_m As Double = 0.1, _
             Optional ByVal h_m As Double = 10, _
             Optional ByVal porosity As Double = 0.2, _
             Optional ByVal ct_1atm As Double = 0.00001 _
             )
' cd          - коэффициент влияния ствола скважины, безразмерный
' rw_m        - радиус скважины, м
' h_m         - толщина пласта, м
' porosity    - пористость
' ct_1atm     - общая сжимаемость системы в пласте, 1/атм
' результат   - коэффициент влияния ствола скважины  cs
'description_end
    
    Dim cd_arr
    Dim i As Integer
    
    cd_arr = parse_list(cd)
    If UBound(cd_arr) = LBound(cd_arr) Then
        transient_cs_from_cd_1atm = 1 / 0.159 * h_m * porosity * ct_1atm * (rw_m * rw_m) * cd
        Exit Function
    Else
        ReDim res(LBound(cd_arr) To UBound(cd_arr)) As Double
        For i = LBound(cd_arr) To UBound(cd_arr)
            res(i) = 1 / 0.159 * h_m * porosity * ct_1atm * (rw_m * rw_m) * cd_arr(i)
        Next i
    End If
    transient_cs_from_cd_1atm = ConvertToJson(res)
       
End Function
'description_to_manual      - для автогенерации
' расчет безразмерного времени (определение)
Function transient_td_from_t(ByVal t_hr, _
             Optional ByVal rw_m As Double = 0.1, _
             Optional ByVal k_mD As Double = 100, _
             Optional ByVal porosity As Double = 0.2, _
             Optional ByVal mu_cP As Double = 1, _
             Optional ByVal ct_1atm As Double = 0.00001 _
             )
' t_hr        - время для которого проводится расчет, час
' rw_m        - радиус скважины, м
' k_mD        - проницаемость пласта, мД
' porosity    - пористость
' mu_cP       - вязкость флюида в пласте, сП
' ct_1atm     - общая сжимаемость системы в пласте, 1/атм
' результат   - безразмерное время td
'description_end
    
    Dim t_arr
    Dim i As Integer
    
    t_arr = parse_list(t_hr)
    If UBound(t_arr) = LBound(t_arr) Then
        transient_td_from_t = 0.00036 * k_mD / porosity / mu_cP / ct_1atm / (rw_m * rw_m) * t_hr
        Exit Function
    Else
        ReDim res(LBound(t_arr) To UBound(t_arr)) As Double
        For i = LBound(t_arr) To UBound(t_arr)
            res(i) = 0.00036 * k_mD / porosity / mu_cP / ct_1atm / (rw_m * rw_m) * t_arr(i)
        Next i
    End If
    transient_td_from_t = ConvertToJson(res)
End Function
'description_to_manual      - для автогенерации
' расчет времени по безразмерному времени (определение)
Function transient_t_from_td_hr(ByVal td, _
             Optional ByVal rw_m As Double = 0.1, _
             Optional ByVal k_mD As Double = 100, _
             Optional ByVal porosity As Double = 0.2, _
             Optional ByVal mu_cP As Double = 1, _
             Optional ByVal ct_1atm As Double = 0.00001 _
             )
' td          - время для которого проводится расчет, безразмерное
' rw_m        - радиус скважины, м
' k_mD        - проницаемость пласта, мД
' porosity    - пористость
' mu_cP       - вязкость флюида в пласте, сП
' ct_1atm     - общая сжимаемость системы в пласте, 1/атм
' результат   - время t
'description_end
    
    'transient_t_from_td_hr = 1 / 0.00036 / k_mD * porosity * mu_cP * ct_1atm * (rw_m * rw_m) * td
       
    Dim td_arr
    Dim i As Integer
    
    td_arr = parse_list(td)
    If UBound(td_arr) = LBound(td_arr) Then
        transient_t_from_td_hr = 1 / 0.00036 / k_mD * porosity * mu_cP * ct_1atm * (rw_m * rw_m) * td
        Exit Function
    Else
        ReDim res(LBound(td_arr) To UBound(td_arr)) As Double
        For i = LBound(td_arr) To UBound(td_arr)
            res(i) = 1 / 0.00036 / k_mD * porosity * mu_cP * ct_1atm * (rw_m * rw_m) * td_arr(i)
        Next i
    End If
    transient_t_from_td_hr = ConvertToJson(res)
End Function
'description_to_manual      - для автогенерации
' расчет безразмерного давления (определение)
Function transient_pd_from_p(ByVal p_wf_atma, _
                          ByVal q_liq_sm3day As Double, _
                 Optional ByVal pi_atma As Double = 250, _
                 Optional ByVal k_mD As Double = 100, _
                 Optional ByVal h_m As Double = 10, _
                 Optional ByVal mu_cP As Double = 1, _
                 Optional ByVal b_m3m3 As Double = 1.2 _
             )
' p_wf_atma    - забойное давление, атма
' q_liq_sm3day - дебит запуска скважины, м3/сут в стандартных условиях
' pi_atma     - начальное пластовое давление, атма
' k_mD        - проницаемость пласта, мД
' h_m         - толщина пласта, м
' mu_cP       - вязкость флюида в пласте, сП
' b_m3m3      - объемный коэффициент нефти, м3/м3
' результат   - безразмерное время td
'description_end
    
    'transient_pd_from_p = k_mD * h_m / 18.41 / q_liq_sm3day / mu_cP / b_m3m3 * (pi_atma - p_wf_atma)
    Dim p_arr
    Dim i As Integer
    
    p_arr = parse_list(p_wf_atma)
    If UBound(p_arr) = LBound(p_arr) Then
        transient_pd_from_p = k_mD * h_m / 18.41 / q_liq_sm3day / mu_cP / b_m3m3 * (pi_atma - p_wf_atma)
        Exit Function
    Else
        ReDim res(LBound(p_arr) To UBound(p_arr)) As Double
        For i = LBound(p_arr) To UBound(p_arr)
            res(i) = k_mD * h_m / 18.41 / q_liq_sm3day / mu_cP / b_m3m3 * (pi_atma - p_arr(i))
        Next i
    End If
    transient_pd_from_p = ConvertToJson(res)
    
End Function
'description_to_manual      - для автогенерации
' расчет безразмерного давления (определение)
Function transient_p_from_pd_atma(ByVal pd, _
                          ByVal q_liq_sm3day As Double, _
                 Optional ByVal pi_atma As Double = 250, _
                 Optional ByVal k_mD As Double = 100, _
                 Optional ByVal h_m As Double = 10, _
                 Optional ByVal mu_cP As Double = 1, _
                 Optional ByVal b_m3m3 As Double = 1.2 _
             )
' p_wf_atma    - забойное давление, атма
' q_liq_sm3day - дебит запуска скважины, м3/сут в стандартных условиях
' pi_atma     - начальное пластовое давление, атма
' k_mD        - проницаемость пласта, мД
' h_m         - толщина пласта, м
' mu_cP       - вязкость флюида в пласте, сП
' b_m3m3      - объемный коэффициент нефти, м3/м3
' результат   - безразмерное время td
'description_end
    
   ' transient_p_from_pd_atma = pi_atma - 18.41 / k_mD / h_m * q_liq_sm3day * mu_cP * b_m3m3 * pd
    Dim pd_arr
    Dim i As Integer
    
    pd_arr = parse_list(pd)
    If UBound(pd_arr) = LBound(pd_arr) Then
        transient_p_from_pd_atma = pi_atma - 18.41 / k_mD / h_m * q_liq_sm3day * mu_cP * b_m3m3 * pd
        Exit Function
    Else
        ReDim res(LBound(pd_arr) To UBound(pd_arr)) As Double
        For i = LBound(pd_arr) To UBound(pd_arr)
            res(i) = pi_atma - 18.41 / k_mD / h_m * q_liq_sm3day * mu_cP * b_m3m3 * pd_arr(i)
        Next i
    End If
    transient_p_from_pd_atma = ConvertToJson(res)
End Function
' расчет решения линейного стока
' в том числе для данных заданных в виде массива
Function transient_pd_line_sourse(td, _
                        Optional rd As Double = 1, _
                        Optional qd = 1, _
                        Optional td_for_qd = 0, _
                        Optional step_qd = True)
' td - время для которого проводится расчет или массив времен
' rd - расстояние от скважины для которого проводится расчет
' qd - безразмерное значение дебита или массив времен и дебитов
' td_for_qd - время срабатывания безразмерного дебита
' step_rate - флаг динамика дебитов задана ступеньками или линейно
    
    Dim td_arr, arr_td_qd, arr_qd
    Dim pd_arr() As Double
    Dim i As Integer, j As Integer
    Dim pds As Double
    Dim tdj As Double
    Dim pdj As Double
    Dim dqd_next As Double
    Dim dtd_next As Double
    Dim ddqd_td As Double
    Dim qdj_pred As Double
    Dim dqd_prev, dtd_prev As Double
    
    td_arr = parse_list(td)
    ReDim pd_arr(LBound(td_arr) To UBound(td_arr))
    
    arr_td_qd = parse_list(td_for_qd)
    arr_qd = parse_list(qd)
    
    If UBound(arr_td_qd) <> UBound(arr_qd) Then
        transient_pd_line_sourse = "error: td_for_qd  and qd len must be the same"
        Exit Function
    End If
    If rd < 1 Then rd = 1
    If step_qd Then
        ' расчет для ступенчато меняющегося дебита (суперпозиция)
        For i = LBound(td_arr) To UBound(td_arr)
            ' start calculation for i time
            qdj_pred = 0
            pds = 0
            ' next loop iterate through all rate changes in history
            For j = LBound(arr_qd) To UBound(arr_qd)
                ' calc influence of j rate step in history
                tdj = td_arr(i) - arr_td_qd(j)
                If tdj > 0 Then
                    pdj = pd_line_source(tdj, rd) * (arr_qd(j) - qdj_pred)
                Else
                    pdj = 0
                End If
                pds = pds + pdj
                qdj_pred = arr_qd(j)
            Next j
            pd_arr(i) = pds
        Next i
    Else
        ' расчет для линейного меняющегося дебита
        For i = LBound(td_arr) To UBound(td_arr)
            ' start calculation for i time
            pds = 0   ' pds will accumulate pressure superposition - set zero before cycle
            ' next loop iterate through all rate changes in history
            For j = LBound(arr_qd) To UBound(arr_qd)
                ' calc influence of j rate step in history
                tdj = td_arr(i) - arr_td_qd(j)  ' time of actual rate of rate change start
                
                If j < UBound(arr_qd) Then
                    dqd_next = arr_qd(j + 1) - arr_qd(j)
                    dtd_next = arr_td_qd(j + 1) - arr_td_qd(j)
                Else
                    dqd_next = 0
                    dtd_next = 1
                End If
                If j > LBound(arr_qd) Then
                    dqd_prev = arr_qd(j) - arr_qd(j - 1)
                    dtd_prev = arr_td_qd(j) - arr_td_qd(j - 1)
                Else
                    dqd_prev = 0
                    dtd_prev = 1
                End If
                    
                ddqd_td = dqd_next / dtd_next - dqd_prev / dtd_prev
                    
                If tdj > 0 Then
                    pdj = pd_linear_q_line_source(tdj, rd, ddqd_td)
                Else
                    pdj = 0
                End If
                pds = pds + pdj
            Next j
            pd_arr(i) = pds
        Next i
    End If
    ' подготовим результат в таком же формате как входные значения времени для расчета
    If UBound(td_arr) = LBound(td_arr) Then
        transient_pd_line_sourse = pd_arr
    Else
        transient_pd_line_sourse = ConvertToJson(pd_arr)
    End If
End Function
' расчет решения с учетом суперпозиции
' в том числе для данных заданных в виде массива
Function transient_pd_superposition(td, _
                                    Optional rd As Double = 1, _
                                    Optional qd = 1, _
                                    Optional td_for_qd = 0, _
                                    Optional step_qd = True, _
                    Optional ByVal cd As Double = 0, _
                    Optional ByVal skin As Double = 0, _
                    Optional model As Integer = 0)
' td - время для которого проводится расчет или массив времен
' rd - расстояние от скважины для которого проводится расчет
' qd - безразмерное значение дебита или массив времен и дебитов
' td_for_qd - время срабатывания безразмерного дебита
' step_rate - флаг динамика дебитов задана ступеньками или линейно
' сd         - безразмерный коэффициент влияния ствола скважины
' skin       - скин-фактор, безразмерный skin>0.
'              для skin<0 используйте эффективный радиус скважины
' rd         - безразмерное расстояние для которого проводится расчет
'              rd=1 соответвует забою скважины
' model      - модель проведения расчета. 0 - модель линейного стока Ei
'              1 - модель линейного стока через преобразование Стефеста
'              2 - конечный радиус скважины
'              3 - линейный сток со скином и послепритоком
'              4 - конечный радиус скважины со скином и послепритоком
' результат - безразмерное давление pd
'description_end
    
    Dim td_arr, arr_td_qd, arr_qd
    Dim pd_arr() As Double
    Dim i As Integer, j As Integer
    Dim pds As Double
    Dim tdj As Double
    Dim pdj As Double
    Dim dqd_next As Double
    Dim dtd_next As Double
    Dim ddqd_td As Double
    Dim qdj_pred As Double
    Dim dqd_prev, dtd_prev As Double
    
    td_arr = parse_list(td)
    ReDim pd_arr(LBound(td_arr) To UBound(td_arr))
    
    arr_td_qd = parse_list(td_for_qd)
    arr_qd = parse_list(qd)
    
    If UBound(arr_td_qd) <> UBound(arr_qd) Then
        transient_pd_superposition = "error: td_for_qd  and qd len must be the same"
        Exit Function
    End If
    If rd < 1 Then rd = 1
    If step_qd Then
        ' расчет для ступенчато меняющегося дебита (суперпозиция)
        For i = LBound(td_arr) To UBound(td_arr)
            ' start calculation for i time
            qdj_pred = 0
            pds = 0
            ' next loop iterate through all rate changes in history
            For j = LBound(arr_qd) To UBound(arr_qd)
                ' calc influence of j rate step in history
                tdj = td_arr(i) - arr_td_qd(j)
                If tdj > 0 Then
                    pdj = transient_pd_radial(tdj, cd, skin, rd, model) * (arr_qd(j) - qdj_pred)
                Else
                    pdj = 0
                End If
                pds = pds + pdj
                qdj_pred = arr_qd(j)
            Next j
            pd_arr(i) = pds
        Next i
    Else
        transient_pd_superposition = "error: step_qd = False not supported yet"
    End If
    ' подготовим результат в таком же формате как входные значения времени для расчета
    If UBound(td_arr) = LBound(td_arr) Then
        transient_pd_superposition = pd_arr
    Else
        transient_pd_superposition = ConvertToJson(pd_arr)
    End If
End Function
Function Stehfest(func_name As String, _
                  td As Double, _
                  CoeffA) As Double
   Dim SumR As Double, DlogTW As Double, z As Double
   Dim j As Integer, n As Integer
   Dim V, M As Integer
   Dim plapl As Double
   SumR = 0#
   n = 12
   DlogTW = Log(2#)
   V = coef_stehfest(n)
   
   For j = 1 To n
      z = j * DlogTW / td
      plapl = Application.Run(func_name, z, CoeffA)
      SumR = SumR + V(j) * plapl * z / j
   Next j
   Stehfest = SumR
   
End Function
Private Function coef_stehfest(n As Integer)
    Dim g(20) As Double, h(10) As Double
    Dim NH As Integer, SN As Double
    Dim k As Integer, K1 As Integer, K2 As Integer
    Dim i As Integer, fi As Double
    Dim V(20) As Double
    Dim M As Integer
    If M <> n Then
        M = n
        g(1) = 1#
        NH = n / 2
        For i = 2 To n
            g(i) = g(i - 1) * i
        Next i
        h(1) = 2# / g(NH - 1)
        For i = 2 To NH
            fi = i
            If i <> NH Then
                h(i) = (fi ^ NH) * g(2 * i) / (g(NH - i) * g(i) * g(i - 1))
            Else
                h(i) = (fi ^ NH) * g(2 * i) / (g(i) * g(i - 1))
            End If
        Next i
        SN = 2 * (NH - (NH \ 2) * 2) - 1
        For i = 1 To n
           V(i) = 0#
           K1 = (i + 1) \ 2
           K2 = i
           If K2 > NH Then K2 = NH
           For k = K1 To K2
                If 2 * k - i = 0 Then
                    V(i) = V(i) + h(k) / (g(i - k))
                    GoTo nxtIt
                End If
                If i = k Then
                    V(i) = V(i) + h(k) / g(2 * k - i)
                    GoTo nxtIt
                End If
                V(i) = V(i) + h(k) / (g(i - k) * g(2 * k - i))
nxtIt:     Next k
           V(i) = SN * V(i)
           SN = -SN
        Next i
    End If
    coef_stehfest = V
    
End Function
Function plapl(z As Double, CoeffA) As Double
   Dim pd As Double
   Dim cd As Double
   Dim skin As Double
   cd = CoeffA(0)
   skin = CoeffA(1)
   pd = BesselK0(Sqr(z)) / z
   
   plapl = (z * pd + skin) / (z + cd * z * z * (z * pd + skin))
End Function
' Laplace space solution corresponding Ei function
Function pd_lalp_Ei(z As Double, CoeffA) As Double
' coeffA - ожидаемый набор переменных для построения решения
'        coeffA(0) - rd безразмерное расстояние
   Dim pd As Double
   Dim rd As Double
   rd = CoeffA(0)
   pd_lalp_Ei = BesselK0(rd * Sqr(z)) / z
   
End Function
' Laplace space solution with rw = const
Function pd_lalp_rw(z As Double, CoeffA) As Double
' coeffA - ожидаемый набор переменных для построения решения
'        coeffA(0) - rd безразмерное расстояние
   Dim pd As Double
   Dim sqrz As Double
   Dim rd As Double
   Dim K1 As Double
   rd = CoeffA(0)
   sqrz = Sqr(z)
   K1 = BesselK1(sqrz)
   If K1 > 0 Then
       pd_lalp_rw = BesselK0(rd * sqrz) / z / sqrz / K1
   Else
       pd_lalp_rw = 0
   End If
   
End Function
' Laplace space solution with rw = const
Function pd_lalp_cd_skin(z As Double, CoeffA) As Double
' coeffA - ожидаемый набор переменных для построения решения
'        coeffA(0) - rd безразмерное расстояние
   Dim pd As Double
   Dim sqrz As Double
   Dim rd As Double
   Dim cd As Double
   Dim skin As Double
   Dim model As Double
   Dim spds As Double
   
   rd = CoeffA(0)
   cd = CoeffA(1)
   skin = CoeffA(2)
   model = CoeffA(3)
   
   sqrz = Sqr(z)
   Select Case model
   Case 0
        spds = z * pd_lalp_Ei(z, CoeffA) + skin
   Case 1
        spds = z * pd_lalp_rw(z, CoeffA) + skin
   End Select
   pd_lalp_cd_skin = spds / (z * (1 + z * cd * spds))
   
   
End Function
' Laplace space solution with rw = const
Function pd_lalp_wbs(z As Double, CoeffA) As Double
' coeffA - ожидаемый набор переменных для построения решения
'        coeffA(0) - rd безразмерное расстояние
   Dim pd As Double
   Dim sqrz As Double
   Dim rd As Double
   Dim cd As Double
   Dim skin As Double
   Dim model As Double
   Dim spds As Double
   Dim pdl As Double
   
   rd = CoeffA(0)
   cd = CoeffA(1)
   skin = CoeffA(2)
   model = CoeffA(3)
   
   sqrz = Sqr(z)
   Select Case model
   Case 0
        pdl = pd_lalp_Ei(z, CoeffA)
   Case 5
        pdl = pd_lalp_Ei(z, CoeffA)
   End Select
   spds = z * pdl + skin
   pd_lalp_wbs = spds / (z * (1 + z * cd * spds)) - pdl
   
   
End Function

