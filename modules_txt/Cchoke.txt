'=======================================================================================
'Unifloc 7.51  2025.03                                  khabibullinra@gmail.com
'Petroleum engineering calculations modules (macroses)
'2000 - 2025
'
'=======================================================================================
'
' класс для расчета характеристик штуцера
' потребовался для организации корректного учета "крутой" характеристики штуцера
' особенность штуцера - то что при достижении критического потока через штуцер (движения потока со скоростью звука)
' давление за штуцером в определенном диапазоне перестает оказывать влияние на поток - то есть заднному дебиту
' и давление перед штуцером может соответсвовать несколько значений  давлений после (линейных)
'==============  Cchoke  ==============
' класс для расчета многофазного потока в локальном сопротивлении - штуцере
Option Explicit
Option Base 0
Public log_ As New CLogger                      ' create new log list for each object
' геометрические параметры штуцера
Public d_up_m As Double
Public d_down_m As Double
Public d_choke_m As Double
Public p_in_atma As Double
Public p_out_atma As Double
Public t_choke_C As Double
Public p_crit_atma As Double
' флюид протекающий через штуцер
Public fluid As New CPVT
Public calibr_fr As Double
' кривые для текущих характеристик штуцера
' строятся для текущих параметров штуцера
Public curve As New CCurves
Private q_liqmax_m3day_ As Double  ' максимальный дебит для заданных давлений на входе и на выходе через штуцер
Private t_choke_throat_C_ As Double ' температура в штуцере
Private t_choke_av_C_
Public sonic_vel_msec As Double
' параметры модели штуцера
Public k As Double '  = 0.826,'K - Discharge coefficient (optional, default  is 0.826)
Private f As Double ' = 1.25,'F - Ratio of gas spec. heat capacity at constant pressure to that at constant volume (optional, default  is 1.4)
Private c_vw As Double ' = 4176'Cvw - water specific heat capacity (J/kg K)(optional, default  is 4176)
Private a_u As Double 'upstream area
Private a_c As Double 'choke throat area
Private a_r As Double 'area ratio
Private P_r As Double  ' critical pressure for output
Private q_m As Double  ' mass rate
' curves to improve calculation speed and accuracy by saving curves
Private crv_down_ As New CInterpolation
Private crv_up_ As New CInterpolation
Private p_dcr As Double ' recovered downstream pressure at critical pressure ratio
Public Sub add_log_msg(msg As String)
    Call log_.add_msg(msg)
End Sub
Private Sub Class_Initialize()
    k = 0.826 'K - Discharge coefficient (optional, default  is 0.826)
    f = 1.25
    c_vw = 4176
    calibr_fr = 1
    'параметры по умолчанию
    d_up_m = 0.1
    d_down_m = 0.1
    d_choke_m = 0.01
    t_choke_C = 30
End Sub
Public Property Get d_choke_mm() As Double
    d_choke_mm = d_choke_m * 1000
End Property
Public Property Get q_liq_max_sm3day()
    q_liq_max_sm3day = q_liqmax_m3day_
End Property
Public Property Get t_choke_throat_C()
    t_choke_throat_C = t_choke_throat_C_
End Property
Public Property Get t_choke_av_C()
    t_choke_av_C = t_choke_av_C_
End Property
Public Property Get p_ratio_crit()
    p_ratio_crit = P_r
End Property
Public Property Get Qm_kgsec()
    Qm_kgsec = q_m
End Property
' калибровка модели штуцера по данным измерений
Public Function calc_choke_calibration( _
            ByVal p_intake_atma As Double, _
            ByVal p_out_atma As Double, _
            ByVal t_C As Double) As Double
' p_intake_atma   - давление на входе
' p_out_atma      - давление на выходе
' t_C             - температура потока
' дебит и обводненность определяются свойствами потока
' результат коэффициент калибровки обеспечивающий согласование
' давлений и дебитов (если можно определить)
' рассчитывается напрямую как отношение расчетного дебита к фактическому
    Dim qtest As Double
    t_choke_C = t_C
    If (p_intake_atma > p_out_atma) And d_choke_m > 0 Then
        qtest = calc_choke_q_liq_sm3day(p_intake_atma, p_out_atma, t_choke_C)
        calibr_fr = fluid.q_liq_sm3day / qtest
    Else
        calibr_fr = 1
    End If
End Function
'Function calculates upstream node pressure for choke
Public Function calc_choke_p_buf(ptline As PTtype) As PTtype
'PTline_atma - line pressure (downstream) ( (atma)) and temperature ( (C))
'Return upstream pressure and temperature
    
    Dim eps As Double
    Dim eps_q As Double
    Dim pres As Double
    
    eps = 0.001
    eps_q = 0.1
On Error GoTo ErrorHandler
    If (d_choke_m > d_up_m - 2 * eps) Or (d_choke_m < 0.001) Or (fluid.q_liq_sm3day < eps_q) Then
        calc_choke_p_buf = ptline
        p_in_atma = ptline.p_atma
        p_out_atma = p_in_atma
        t_choke_C = ptline.t_C
        t_choke_throat_C_ = t_choke_C
        Exit Function
    End If
    If fluid.gas_only Then
        pres = GLV_p_atma(d_choke_mm, ptline.p_atma, fluid.q_gas_free_sm3day, fluid.gamma_g, ptline.t_C, calc_along_flow:=False)(0)(0)
        calc_choke_p_buf = set_PT(pres, ptline.t_C)
    Else
        calc_choke_p_buf = calc_choke_p(ptline, 0)
    End If
    Exit Function
ErrorHandler:
    calc_choke_p_buf = set_PT(0, 0)
    add_log_msg ("Cchoke.calc_choke_p_buf: error. set calc_choke_p_buf = 0 : p_line_atma  = " _
                 & ptline.p_atma & "  t_choke_C = " & ptline.t_C)
End Function
'Function calculates downstream node pressure for choke
Public Function calc_choke_p_lin(ptbuf As PTtype) As PTtype
'PTbuf - well head pressure (upstream) ( (atma)) and temperature ( (C))
'Return downstream pressure and temperature
    
    ' если расчет не возможен (решение не существует), возвращает 0, так как
    ' потенциально может возникнуть ситуация, что при заданном дебите, диаметре штуцера и
    ' получившемся давлении на входе - решения по давлению на выходе не будет существовать
    'PTbuf - well head pressure and  temperature Upstream
    
    Dim eps As Double
    Dim eps_q As Double
    Dim pres As Double
    
    eps = 0.001
    eps_q = 0.1
    If (d_choke_m > d_up_m - 2 * eps) Or (d_choke_m < 0.001) Or (fluid.q_liq_sm3day < eps_q) Then
        calc_choke_p_lin = ptbuf
        p_in_atma = ptbuf.p_atma
        p_out_atma = p_in_atma
        t_choke_C = ptbuf.t_C
        t_choke_throat_C_ = t_choke_C
        Exit Function
    End If
    ' Если при расчете линейного давления возникла ошибка, то скорее всего для дебита нет соотвествия для линейного давления
On Error GoTo ErrorHandler
    If fluid.gas_only Then
        pres = GLV_p_atma(d_choke_mm, ptbuf.p_atma, fluid.q_gas_free_sm3day, fluid.gamma_g, ptbuf.t_C, calc_along_flow:=True)(0)(0)
        calc_choke_p_lin = set_PT(pres, ptbuf.t_C)
        
    Else
        calc_choke_p_lin = calc_choke_p(ptbuf, calc_p_down:=1)
    End If
    Exit Function
ErrorHandler:
    calc_choke_p_lin = set_PT(0, 0)
    add_log_msg ("Cchoke.calc_choke_plin_atma: error. set calc_choke_plin_atma = 0 : pbuf_atma  = " _
                 & ptbuf.p_atma & "  t_choke_C = " & ptbuf.t_C)
End Function
Private Function wi_calc_(P_r As Double, _
                          p_u As Double, _
                          t_av As Double, _
          Optional ByRef wi_deriv As Double)
      
    Dim alpha As Double
    Dim lambda As Double
    Dim betta As Double
    Dim Gamma As Double
    Dim Delta As Double
    Dim p_av As Double
            'Calculate average pressure and temperature
            p_av = (p_u + P_r * p_u) / 2
            With fluid
                Call .calc_PVT(p_av, t_av)
                If P_r = 0 Then
                    P_r = 0.000001
                End If
                alpha = .rho_gas_rc_kgm3 * (.fm_oil_fr / .rho_oil_rc_kgm3 + .fm_wat_fr / .rho_wat_rc_kgm3)
                  'Calculate auxilary values
                lambda = (.fm_gas_fr + (.fm_gas_fr * .cv_gas_JkgC + .fm_oil_fr * .cv_oil_JkgC + .fm_wat_fr * .cv_wat_JkgC) / (.cv_gas_JkgC * (.heat_capacity_ratio_gas - 1)))
                betta = .fm_gas_fr / .polytropic_exponent * P_r ^ (-1 - 1 / .polytropic_exponent)
                Gamma = .fm_gas_fr + alpha
                Delta = .fm_gas_fr * P_r ^ (-1 / .polytropic_exponent) + alpha
                      
                P_r = MinReal(P_r, 1)
                wi_calc_ = 27500000# * a_c * (2 * p_u * .rho_gas_rc_kgm3 / Delta ^ 2 * (lambda * (1 - P_r ^ (1 - 1 / .polytropic_exponent)) + alpha * (1 - P_r)) _
                           / (1 - (a_r * Gamma / Delta) ^ 2)) ^ (1 / 2)
                'Calculate rate derivative
                wi_deriv = (2 * lambda * (1 - P_r ^ (1 - 1 / .polytropic_exponent)) + 2 * alpha * (1 - P_r)) * betta - _
                    Delta * (1 - (a_r * Gamma / Delta) ^ 2) * (lambda * (1 - 1 / .polytropic_exponent) * P_r ^ (-1 / .polytropic_exponent) + alpha)
            End With
End Function
Private Function wi_calc(P_r As Double, _
                         p_u As Double, _
                         t_u As Double, _
          Optional ByRef wi_deriv As Double, _
          Optional p_r_inc As Double = -1, _
          Optional ByRef d_pr As Double)
    'Auxilary properties
    Dim t_C As Double
    Dim p_av As Double
    Dim t_av As Double
    'PVT properties
    Dim n As Double
    Dim wi_deriv2 As Double
    Dim wi_2_deriv As Double
        
    'Calculate specific heat capacities
    With fluid
      Call .calc_PVT(p_u, t_u)
        
      'Calculate choke throat temperature
      t_C = (t_u + 273) * P_r ^ (1 - 1 / .polytropic_exponent) - 273
      t_choke_throat_C_ = t_C
      'Calculate average pressure and temperature
      'p_av = (p_u + P_r * p_u) / 2
      t_av = (t_u + t_C) / 2
      t_choke_av_C_ = t_av
      wi_calc = wi_calc_(P_r, p_u, t_av, wi_deriv)
      If p_r_inc > 0 Then
            P_r = P_r + p_r_inc
            Call wi_calc_(P_r, p_u, t_av, wi_deriv2)
            wi_2_deriv = (wi_deriv2 - wi_deriv) / p_r_inc
            d_pr = -wi_deriv / wi_2_deriv
      End If
    End With
End Function
'Private Function wi_calc_perkins_1993(P_r As Double, p_u As Double, t_u As Double, rho_gu As Double, f_o As Double, f_g As Double, f_w As Double, _
'                           alpha As Double, Optional ByRef wi_deriv As Double, Optional ByRef N As Double)
'    'Auxilary properties
'    Dim t_C As Double
'    Dim p_av As Double
'    Dim t_av As Double
'    'PVT properties
' '   Dim rs_m3m3 As Double
'    Dim bo_m3m3 As Double
'    Dim z As Double
'    Dim bg_m3m3 As Double
'    Dim bw_m3m3 As Double
'    Dim c_vo As Double
'    Dim c_vg As Double
'    Dim Lambda As Double
'    Dim betta As Double
'    Dim Gamma As Double
'    Dim Delta As Double
'    Dim f_pr As Double
''    Dim void As Double
'    z = 1
'    'Calculate specific heat capacities
'    c_vo = c_vw * (0.238 + 0.302 / fluid.gamma_o + (0.0064 + 0.003 / fluid.gamma_o) * t_u)
'    c_vg = z * const_r / (fluid.mg_kgmol * (F - 1))
'    'Calculate polytropic exponent
'    N = (f_g * F * c_vg + f_o * c_vo + f_w * c_vw) / (f_g * c_vg + f_o * c_vo + f_w * c_vw)
'    'Calculate choke throat temperature
'    t_C = (t_u + 273) * P_r ^ (1 - 1 / N) - 273
'    t_choke_throat_C_ = t_C
'    'Calculate average pressure and temperature
'    p_av = (p_u + P_r * p_u) / 2
'    t_av = (t_u + t_C) / 2
'    t_choke_av_C_ = t_av
'    Call fluid.calc_PVT(p_av, t_av)
'  '  rs_m3m3 = MinReal(fluid.rp_m3m3, rs_m3m3)
'    'Recalculate specific heat capacities
'    c_vo = c_vw * (0.238 + 0.302 / fluid.gamma_o + (0.0064 + 0.003 / fluid.gamma_o) * t_av)
'    c_vg = z * const_r / (fluid.mg_kgmol * (F - 1))
'    'Recalculate polytropic exponent
'    N = (f_g * F * c_vg + f_o * c_vo + f_w * c_vw) / (f_g * c_vg + f_o * c_vo + f_w * c_vw)
'    If P_r = 0 Then
'      P_r = 0.000001
'    End If
'    'Calculate auxilary values
'    Lambda = (f_g + (f_g * c_vg + f_o * c_vo + f_w * c_vw) / (c_vg * (F - 1)))
'    betta = f_g / N * P_r ^ (-1 - 1 / N)
'    Gamma = f_g + alpha
'    Delta = f_g * P_r ^ (-1 / N) + alpha
'    'Calculate isentropic mass flow rate (kg/day)
'    P_r = MinReal(P_r, 1)
'    wi_calc_perkins_1993 = 27500000# * a_c * (2 * p_u * rho_gu / Delta ^ 2 * (Lambda * (1 - P_r ^ (1 - 1 / N)) + alpha * (1 - P_r)) _
'                         / (1 - (a_r * Gamma / Delta) ^ 2)) ^ (1 / 2)
'    'Calculate rate derivative
'    wi_deriv = (2 * Lambda * (1 - P_r ^ (1 - 1 / N)) + 2 * alpha * (1 - P_r)) * betta - _
'        Delta * (1 - (a_r * Gamma / Delta) ^ 2) * (Lambda * (1 - 1 / N) * P_r ^ (-1 / N) + alpha)
'End Function
Public Function calc_choke_q_liqmax_m3day(ByVal p_sn As Double, _
                                          ByVal t_u As Double, _
                                       Optional calc_p_down As Integer = 0) As Double
    Dim Max_Ql As Double
    Dim i As Integer
    
    If (calc_p_down = 0) Then
        i = -1
        Do
            i = i + 1
        Loop Until (fluid.q_liq_sm3day < 10 ^ i)
        
        If (fluid.q_liq_sm3day < 0.5 * 10 ^ i) Then
            Max_Ql = 0.5 * 10 ^ i
        Else
            Max_Ql = 10 ^ i
        End If
        Max_Ql = MaxReal(50, Max_Ql)
        Max_Ql = MinReal(1500, Max_Ql)
    End If
    If (calc_p_down = 1) Then
        Max_Ql = calc_choke_q_liq_sm3day(p_sn, 0, t_u)
    End If
    calc_choke_q_liqmax_m3day = Max_Ql
End Function
Public Function calc_choke_rp_max_m3m3(ByVal p_sn As Double, _
                                       ByVal t_u As Double, _
                                       Optional calc_p_down As Integer = 0) As Variant
' Функция находит значение максимального газового фактора при даном дебите нефти и данном давлении на входе,
' при котором давление на выходе становится нулевым
       
    Dim Max_Rp As Double
    Dim i As Integer
    Dim a As Double ' нижняя граница отрезка, в которой находится значение максимального газового фактора
    Dim B As Double ' вверхняя граница отрезка, в которой находится значение максимального газового фактора
    Dim p_d As Double
    Dim eps As Double
    eps = p_sn * 0.001
    Dim counter As Integer
    counter = 0
    Dim max_iters As Integer
    max_iters = 20
        
    If (calc_p_down = 0) Then
        i = -1
        Do
            i = i + 1
        Loop Until (fluid.rp_m3m3 < 10 ^ i)
        
        If (fluid.rp_m3m3 < 0.5 * 10 ^ i) Then
            Max_Rp = 0.5 * 10 ^ i
        Else
            Max_Rp = 10 ^ i
        End If
        Max_Rp = MaxReal(50, Max_Rp)
        Max_Rp = MinReal(800, Max_Rp)
    End If
    
    If (calc_p_down = 1) Then
        p_d = calc_choke_p(set_PT(p_sn, t_u), calc_p_down).p_atma
                                            
        If p_d < 0 Then
            calc_choke_rp_max_m3m3 = "Невозможен"
        Else
            i = 1
            Do
                i = 2 * i
                B = fluid.rp_m3m3 * i
                p_d = calc_choke_p(set_PT(p_sn, t_u), calc_p_down).p_atma
            Loop Until p_d < 0
            a = i * fluid.rp_m3m3 / 2
            
            Do
                counter = counter + 1
                Max_Rp = (a + B) / 2
                p_d = calc_choke_p(set_PT(p_sn, t_u), calc_p_down).p_atma
                If p_d > 0 Then
                    a = Max_Rp
                Else
                    B = Max_Rp
                End If
            Loop Until Abs(p_d) < eps Or counter > max_iters
        End If
    End If
    calc_choke_rp_max_m3m3 = Max_Rp
End Function
Public Function calc_choke_p(PT As PTtype, Optional calc_p_down As Integer = 0) As PTtype
    'Function calculates end node pressure for choke (weather upstream or downstream)
    Dim p_sn As Double, t_u As Double
    Dim p_en As Double
    Dim counter As Double
    Dim eps As Double
    Dim eps_p As Double
    Const max_iters As Integer = 25
    Dim void As Double
    Dim q_l As Double
    Dim P_en_min As Double
    Dim P_en_max As Double
    Dim i As Integer
    
    Dim q_good As Boolean
    Dim p_good As Boolean
    Dim p_cr As Double
    
On Error GoTo err1:
    p_sn = PT.p_atma
    t_u = PT.t_C
    counter = 0
    
    eps = fluid.q_liq_sm3day * 0.0001 'set precision equal to 0.01%
    eps_p = const_pressure_tolerance
    
    If (calc_p_down = 0) Then 'Calculate upstream pressure given downstream
        'Solve for upstream pressure
        i = 1
        counter = 0
        Do
            ' ищем давление на входе заведомо превышающее необходимое для обеспечения заданного потока
            counter = counter + 1
            i = 2 * i
            P_en_max = p_sn * i
            q_l = calc_choke_q_liq_sm3day(P_en_max, p_sn, t_u)
        Loop Until q_l > fluid.q_liq_sm3day Or counter > max_iters
        
        If q_l <= fluid.q_liq_sm3day Then   ' значит поиск дебита не увенчался успехом
             add_log_msg "calc_choke_P(calc_p_down = 0): no solution found for rate = " & Format(fluid.q_liq_sm3day, "####0.00")
        End If
        
        ' определим нижнюю границу поиска давления
        P_en_min = i * p_sn / 2
        counter = 0
        Do
            ' ищем точное значение давления на входе обеспечивающего дебит
            ' потенциально можно ускорить если не делить отрезок пополам а использовать линейное приближение (характеристика должна быть довольно гладкой)
            counter = counter + 1
            p_en = (P_en_min + P_en_max) / 2
            q_l = calc_choke_q_liq_sm3day(p_en, p_sn, t_u)
            If q_l > fluid.q_liq_sm3day Then
                P_en_max = p_en
            Else
                P_en_min = p_en
            End If
            q_good = Abs(fluid.q_liq_sm3day - q_l) < eps
            p_good = Abs(P_en_min - P_en_max) < eps_p
        Loop Until (q_good And p_good) Or counter > max_iters
        
        If (counter > max_iters) And (Abs(fluid.q_liq_sm3day - q_l) > eps * 100) Then ' значит поиск дебита не увенчался успехом
            add_log_msg "calc_choke_P(calc_p_down = 0): number of iterations too much, no solution found for rate = " & Format(fluid.q_liq_sm3day, "####0.00")
        End If
        p_in_atma = p_en
        p_out_atma = p_sn
        
    ElseIf (calc_p_down = 1) Then 'Calculate downstream pressure given upstream
        'Solve for upstream pressure
        'Calculate critical oil rate
        q_l = calc_choke_q_liq_sm3day(p_sn, 0, t_u)
        If isGreater(fluid.q_liq_sm3day, q_l) Then 'Given oil rate can't be archieved
            p_en = -1
        Else
            If isEqual(q_l, fluid.q_liq_sm3day) Then
                calc_choke_p = set_PT(0, 0)
                p_en = 0
            Else
                i = 1
                counter = 0
                Do
                    i = 2 * i
                    P_en_min = p_sn / i
                    q_l = calc_choke_q_liq_sm3day(p_sn, P_en_min, t_u)
                Loop Until q_l > fluid.q_liq_sm3day Or counter > max_iters
                
                If q_l <= fluid.q_liq_sm3day Then   ' значит поиск дебита не увенчался успехом
                    add_log_msg "calc_choke_P(calc_p_down = 1):no solution found for rate = " & Format(fluid.q_liq_sm3day, "####0.00")
                End If
                P_en_max = 2 * p_sn / i
                counter = 0
                Do
                    counter = counter + 1
                    p_en = (P_en_min + P_en_max) / 2
                    q_l = calc_choke_q_liq_sm3day(p_sn, p_en, t_u)
                    If q_l > fluid.q_liq_sm3day Then
                        P_en_min = p_en
                    Else
                        P_en_max = p_en
                    End If
                Loop Until Abs(fluid.q_liq_sm3day - q_l) < eps Or counter > max_iters
                If counter > max_iters Then   ' значит поиск дебита не увенчался успехом
                   add_log_msg "calc_choke_P(calc_p_down = 1): number of iterations exeeded, no solution found for rate = " & Format(fluid.q_liq_sm3day, "####0.00")
                End If
            End If
        End If
        p_in_atma = p_sn
        p_out_atma = p_en
    End If
    calc_choke_p.p_atma = p_en
    calc_choke_p.t_C = t_u    ' пока предполагаем для штуцера температура не меняется
    
    Exit Function
err1:
    Dim strError As String
    strError = "CChoke.calc_choke_p: error " & Err.Description
    Call add_log_msg(strError)
    Err.Raise vbObjectError + 513, "CChoke.calc_choke_p", strError
End Function
Public Function calc_choke_q_liq_sm3day(ByVal p_u As Double, ByVal p_d As Double, ByVal t_u As Double) As Double
    'Function calculates oil flow rate through choke given downstream and upstream pressures using Perkins correlation
    'Return ((sm3/day))
    'Arguments
    'p_u - Upstream pressure ( (atma))
    'p_d - Downstream pressure ( (atma))
    'T_u - Upstream temperature ( (C))
    Dim p_co As Double
    Dim min_p_d As Double
    Dim counter As Double
    Dim w_i As Double
    Dim wi_der1 As Double
    Dim d_pr As Double
    Const max_iters As Integer = 20
    Dim eps As Double
    Dim p_ri As Double
 '   Dim v_si As Double
    Dim p_dcr As Double
   ' Dim p_c As Double
    Dim p_ra As Double
    Dim w As Double
    Const p_r_inc As Double = 0.001
On Error GoTo err1:
    If fluid.gas_only Then
        calc_choke_q_liq_sm3day = GLV_q_gas_sm3day(d_choke_mm, p_u, p_d, fluid.gamma_g, t_u, calibr_fr)(0)(0)
        Exit Function
    End If
    ' calc areas
    a_u = const_Pi * d_up_m ^ 2 / 4      'upstream area
    a_c = const_Pi * d_choke_m ^ 2 / 4   'choke throat area
    a_r = a_c / a_u                      'area ratio
    p_in_atma = p_u
    p_out_atma = p_d
    t_choke_C = t_u
    Call fluid.calc_PVT(p_u, t_u) ' calc PVT with upstream pressure and temperature
    With fluid
        'Calculate trial output choke pressure
        p_co = p_u - (p_u - p_d) / (1 - (d_choke_m / d_down_m) ^ 1.85)
        'Solve for critical pressure ratio
        counter = 0
        If True Then
'        If (.fm_gas_fr > 0.0000000000001) Then 'free gas present
            'Calculate specific value of error at p_ri = 0.99
            w_i = wi_calc(0.99, p_u, t_u, eps)
            eps = Abs(eps * 0.1)
            'Assume pressure ratio
            p_ri = 0.5
            Do
                'Evaluate derivative for two points to find second derivative for Newton-Raphson iteration
                w_i = wi_calc(p_ri, p_u, t_u, wi_der1, p_r_inc, d_pr)
                'limit p_ri increment to prevent crossing [0,1] boundary
                d_pr = MaxReal(-p_ri / 2, MinReal(d_pr, (1 - p_ri) / 2))
                p_ri = p_ri + d_pr
                counter = counter + 1
            Loop Until (Abs(wi_der1) < eps) Or (counter > max_iters)
                ' тут заглушка, которую надо будет поправить
                ' в расчете производной какой то баг и цикл неправильно отпределяем максимум, что приводит к кривым графикам
                ' надо будет переделать
                p_ri = p_ri + 0.05
                w_i = wi_calc(p_ri, p_u, t_u, wi_der1)
                
            If counter > max_iters Then
               add_log_msg ("Cchoke.calc_choke_q_liq_sm3day: iterations not converged. iterations number  = " & counter & "  error wi_der1 " & wi_der1 & " < " & eps)
            End If
            'Calculate sonic velocity of multiphase mixture (used for output)
            sonic_vel_msec = w_i / a_c * (.fm_oil_fr / .rho_oil_rc_kgm3 + .fm_wat_fr / .rho_wat_rc_kgm3 + .fm_gas_fr / .rho_gas_rc_kgm3 * p_ri ^ (-1 / .polytropic_exponent)) / 86400
        Else 'liquid flow
            p_ri = 0
            sonic_vel_msec = 5000
        End If
        ' calc PVT with upstream pressure and temperature
        Call fluid.calc_PVT(p_u, t_u)
        q_liqmax_m3day_ = k * w_i * .fm_oil_fr / .rho_oil_sckgm3 + k * w_i * .fm_wat_fr / .rho_wat_sckgm3
        q_liqmax_m3day_ = q_liqmax_m3day_ * calibr_fr
        'Calculate recovered downstream pressure at critical pressure ratio
        p_dcr = p_u * (p_ri * (1 - (d_choke_m / d_down_m) ^ 1.85) + (d_choke_m / d_down_m) ^ 1.85)
        'Compare trial pressure ratio with critical and assign actual pressure ratio
        'Auxilary properties
        p_crit_atma = p_ri * p_u
        p_ra = MaxReal(p_ri, p_co / p_u)
        w_i = wi_calc(p_ra, p_u, t_u, wi_der1)
        'Calculate isentropic mass flow rate
        w = k * w_i * calibr_fr
        ' calc PVT with upstream pressure and temperature
        Call fluid.calc_PVT(p_u, t_u)
        calc_choke_q_liq_sm3day = w * .fm_oil_fr / .rho_oil_sckgm3 + w * .fm_wat_fr / .rho_wat_sckgm3
        'Asign mass flow rate
        q_m = w / 86400 '/ c_m(Units)
        'Assign output critical pressure ratio (recovered critical pressure ratio)
        P_r = p_dcr / p_u
        'convert sonic velocity
        Exit Function
    End With
    Exit Function
err1:
    Dim strError As String
    strError = "CChoke.calc_choke_q_liq_sm3day: error " & Err.Description
    Call add_log_msg(strError)
    Err.Raise vbObjectError + 513, "CChoke.calc_choke_P", strError
End Function
'Public Function calc_choke_q_liq_sm3day(ByVal p_u As Double, ByVal p_d As Double, ByVal t_u As Double) As Double
'    'Function calculates oil flow rate through choke given downstream and upstream pressures using Perkins correlation
'    'Return ((sm3/day))
'    'Arguments
'    'p_u - Upstream pressure ( (atma))
'    'p_d - Downstream pressure ( (atma))
'    'T_u - Upstream temperature ( (C))
'
'    Dim p_co As Double
'    Dim min_p_d As Double
'    Dim counter As Double
'    Dim w_i As Double
'    Dim wi_der1 As Double
'    Dim d_pr As Double
'    Const max_iters As Integer = 300
'    Dim Eps As Double
'    Dim p_ri As Double
'    Dim p_ri_2 As Double
' '   Dim v_si As Double
'    Dim p_dcr As Double
'    Dim p_c As Double
'    Dim p_ra As Double
'    Dim w As Double
'    Const p_r_inc As Double = 0.01
'
'    Dim w_i_2 As Double
'    Dim wi_der1_2 As Double
'On Error GoTo err1:
'
'    If fluid.gas_only Then
'        calc_choke_q_liq_sm3day = GLV_q_gas_sm3day(d_choke_mm, p_u, p_d, fluid.gamma_g, t_u, calibr_fr)(0)(0)
'        Exit Function
'    End If
'    ' calc areas
'    a_u = const_Pi * d_up_m ^ 2 / 4      'upstream area
'    a_c = const_Pi * d_choke_m ^ 2 / 4   'choke throat area
'    a_r = a_c / a_u                      'area ratio
'
'
'    p_in_atma = p_u
'    p_out_atma = p_d
'    t_choke_C = t_u
'
'    Call fluid.calc_PVT(p_u, t_u) ' calc PVT with upstream pressure and temperature
'    With fluid
'        'Calculate trial output choke pressure
'        p_co = p_u - (p_u - p_d) / (1 - (d_choke_m / d_down_m) ^ 1.85)
'        'Solve for critical pressure ratio
'        counter = 0
'        If (.fm_gas_fr > 0.0000000000001) Then 'free gas present
'            'Calculate specific value of error at p_ri = 0.99
''            w_i = wi_calc(0.99, p_u, t_u, Eps)
''            Eps = Abs(Eps * 0.1)
'            'Assume pressure ratio
'            p_ri = 0.9
'            w_i = 0
'            wi_der1 = 0
'            d_pr = 0.1 ' MaxReal(-p_ri / 2, MinReal(d_pr, (1 - p_ri) / 2))
'            Do
'
'                p_ri_2 = p_ri
'                w_i_2 = w_i
'                wi_der1_2 = wi_der1
'
'                w_i = wi_calc(p_ri, p_u, t_u, wi_der1)
'
'
'                If wi_der1 * wi_der1_2 < 0 And Abs(d_pr) > 0.0001 Then
'                    d_pr = -d_pr / 2
'                End If
'
'
'                p_ri = p_ri - d_pr
'                counter = counter + 1
'            Loop Until (w_i < w_i_2) Or (counter > max_iters)
'            'p_ri = p_ri_2
'            If counter > max_iters Then
'               add_log_msg ("Cchoke.calc_choke_q_liq_sm3day: iterations not converged. iterations number  = " & counter & "  error wi_der1 " & wi_der1 & " < " & Eps)
'            End If
'
'            'Calculate sonic velocity of multiphase mixture (used for output)
'            sonic_vel_msec = w_i / a_c * (.fm_oil_fr / .rho_oil_rc_kgm3 + .fm_wat_fr / .rho_wat_rc_kgm3 + .fm_gas_fr / .rho_gas_rc_kgm3 * p_ri ^ (-1 / .polytropic_exponent)) / 86400
'        Else 'liquid flow
'            p_ri = 0
'            sonic_vel_msec = 5000
'        End If
'
'        ' calc PVT with upstream pressure and temperature
'        Call fluid.calc_PVT(p_u, t_u)
'
'        q_liqmax_m3day_ = K * w_i * .fm_oil_fr / .rho_oil_sckgm3 + K * w_i * .fm_wat_fr / .rho_wat_sckgm3
'        q_liqmax_m3day_ = q_liqmax_m3day_ * calibr_fr
'
'        'Calculate recovered downstream pressure at critical pressure ratio
'        p_dcr = p_u * (p_ri * (1 - (d_choke_m / d_down_m) ^ 1.85) + (d_choke_m / d_down_m) ^ 1.85)
'        'Compare trial pressure ratio with critical and assign actual pressure ratio
'        'Auxilary properties
'        p_c = p_ri * p_u
'        p_ra = MaxReal(p_ri, p_co / p_u)
'        'p_ra = p_co / p_u
'        w_i = wi_calc(p_ra, p_u, t_u, wi_der1)
'        'Calculate isentropic mass flow rate
'        w = K * w_i * calibr_fr
'        ' calc PVT with upstream pressure and temperature
'        Call fluid.calc_PVT(p_u, t_u)
'
'        calc_choke_q_liq_sm3day = w * .fm_oil_fr / .rho_oil_sckgm3 + w * .fm_wat_fr / .rho_wat_sckgm3
'        'Asign mass flow rate
'        q_m = w / 86400 '/ c_m(Units)
'        'Assign output critical pressure ratio (recovered critical pressure ratio)
'        P_r = p_dcr / p_u
'        'convert sonic velocity
'        Exit Function
'    End With
'    Exit Function
'err1:
'    Dim strError As String
'    strError = "CChoke.calc_choke_q_liq_sm3day: error " & Err.Description
'    Call add_log_msg(strError)
'    Err.Raise vbObjectError + 513, "CChoke.calc_choke_q_liq_sm3day", strError
'End Function
'
Public Function calc_choke_crv(ByVal p_u As Double, _
                               ByVal t_u As Double) As Double
    'Function calculates choke p_out curve using Perkins correlation
    'Return ((sm3/day))
    'Arguments
    'p_u - Upstream pressure ( (atma))
    'p_d - Downstream pressure ( (atma))
    'T_u - Upstream temperature ( (C))
    
    Dim crv As New CInterpolation
    
    Dim p_co As Double
    Dim min_p_d As Double
    Dim counter As Double
    Dim w_i As Double
    Dim wi_der1 As Double
    Dim d_pr As Double
    Const max_iters As Integer = 10
    Dim eps As Double
    Dim p_ri As Double
    Dim p_ri_2 As Double
 '   Dim v_si As Double
    Dim p_dcr As Double
    Dim p_c As Double
    Dim p_ra As Double
    Dim w As Double
    Const p_r_inc As Double = 0.001
    
    Dim p_d As Double
    
    
On Error GoTo err1:
    If fluid.gas_only Then
        calc_choke_crv = "not suuported yet"
        Exit Function
    End If
    ' calc areas
    a_u = const_Pi * d_up_m ^ 2 / 4      'upstream area
    a_c = const_Pi * d_choke_m ^ 2 / 4   'choke throat area
    a_r = a_c / a_u                      'area ratio
    p_d = 1
    p_in_atma = p_u
    p_out_atma = p_d
    t_choke_C = t_u
    
'    Call fluid.calc_PVT(p_u, t_u) ' calc PVT with upstream pressure and temperature
    
    
    
    With fluid
        'Calculate trial output choke pressure
'        p_co = p_u - (p_u - p_d) / (1 - (d_choke_m / d_down_m) ^ 1.85)
        'Solve for critical pressure ratio
        counter = 0
        If (.fm_gas_fr > 0.0000000000001) Then 'free gas present
            'Calculate specific value of error at p_ri = 0.99
'            w_i = wi_calc(0.99, p_u, t_u, Eps)
'            Eps = Abs(Eps * 0.01)
            'Assume pressure ratio
            p_ri = 1
            d_pr = 0.1
            Do
                'Evaluate derivative for two points to find second derivative for Newton-Raphson iteration
                w_i = wi_calc(p_ri, p_u, t_u, wi_der1)
'                p_ri_2 = p_ri
                'limit p_ri increment to prevent crossing [0,1] boundary
'                d_pr = MaxReal(-p_ri / 2, MinReal(d_pr, (1 - p_ri) / 2))
                p_ri = p_ri - d_pr
                counter = counter + 1
            Loop Until (Abs(wi_der1) < eps) Or (counter > max_iters)
            p_ri = p_ri_2
            If counter > max_iters Then
               add_log_msg ("Cchoke.calc_choke_q_liq_sm3day: iterations not converged. iterations number  = " & counter & "  error wi_der1 " & wi_der1 & " < " & eps)
            End If
        
            'Calculate sonic velocity of multiphase mixture (used for output)
            sonic_vel_msec = w_i / a_c * (.fm_oil_fr / .rho_oil_rc_kgm3 + .fm_wat_fr / .rho_wat_rc_kgm3 + .fm_gas_fr / .rho_gas_rc_kgm3 * p_ri ^ (-1 / .polytropic_exponent)) / 86400
        Else 'liquid flow
            p_ri = 0
            sonic_vel_msec = 5000
        End If
        
        ' calc PVT with upstream pressure and temperature
        Call fluid.calc_PVT(p_u, t_u)
        
        q_liqmax_m3day_ = k * w_i * .fm_oil_fr / .rho_oil_sckgm3 + k * w_i * .fm_wat_fr / .rho_wat_sckgm3
        q_liqmax_m3day_ = q_liqmax_m3day_ * calibr_fr
        
        'Calculate recovered downstream pressure at critical pressure ratio
        p_dcr = p_u * (p_ri * (1 - (d_choke_m / d_down_m) ^ 1.85) + (d_choke_m / d_down_m) ^ 1.85)
        'Compare trial pressure ratio with critical and assign actual pressure ratio
        'Auxilary properties
        p_c = p_ri * p_u
        p_ra = MaxReal(p_ri, p_co / p_u)
        'p_ra = p_co / p_u
        w_i = wi_calc(p_ra, p_u, t_u, wi_der1)
        'Calculate isentropic mass flow rate
        w = k * w_i * calibr_fr
        ' calc PVT with upstream pressure and temperature
        Call fluid.calc_PVT(p_u, t_u)
        
        calc_choke_crv = w * .fm_oil_fr / .rho_oil_sckgm3 + w * .fm_wat_fr / .rho_wat_sckgm3
        'Asign mass flow rate
        q_m = w / 86400 '/ c_m(Units)
        'Assign output critical pressure ratio (recovered critical pressure ratio)
        P_r = p_dcr / p_u
        'convert sonic velocity
        Exit Function
    End With
    Exit Function
err1:
    Dim strError As String
    strError = "CChoke.calc_choke_q_liq_sm3day_: error " & Err.Description
    Call add_log_msg(strError)
    Err.Raise vbObjectError + 513, "CChoke.calc_choke_q_liq_sm3day_", strError
End Function
Public Sub init_from_json(json As String)
    Dim d As Dictionary
    Set d = ParseJson(json)
    Call init_from_dict(d)
End Sub
Public Sub init_from_dict(dict As Dictionary)
    d_down_m = dict("d_pipe_mm") / 1000
    d_up_m = dict("d_pipe_mm") / 1000
    d_choke_m = dict("d_choke_mm") / 1000
    calibr_fr = dict("calibr")
    k = dict("CDischarge")
End Sub
Public Function copy(chk As Cchoke)
   d_up_m = chk.d_up_m
   d_down_m = chk.d_down_m
   d_choke_m = chk.d_choke_m
   Call fluid.copy(chk.fluid)
   t_choke_C = chk.t_choke_C
   calibr_fr = chk.calibr_fr
End Function
Public Function array_out(Optional ByVal name_value As String = "", _
                          Optional ByVal show_log As Boolean = False)
' подготовка массива для вывода в Excel
' num_points - количество точек в выходных массивах для вывода
Const nv = 3  ' output array dimension (number of columns)
    Dim res(0 To 1, 0 To nv) As String
    Dim log_str As String
    Dim i As Integer
    Dim resd As New Dictionary
    
    On Error Resume Next
        resd.Add "p_intake_atma", p_in_atma
        resd.Add "p_out_atma", p_out_atma
        resd.Add "t_choke_C", t_choke_C
        resd.Add "calibr_fr", calibr_fr
        resd.Add "q_liq_sm3day", fluid.q_liq_sm3day
        resd.Add "q_gas_sm3day", fluid.q_gas_sm3day
        resd.Add "t_choke_throat_C", t_choke_throat_C
        resd.Add "sonic_vel_msec", sonic_vel_msec
        resd.Add "q_liq_max_sm3day", q_liq_max_sm3day
                
        res(0, 0) = resd(name_value):         res(1, 0) = name_value
        res(0, 1) = ConvertToJson(resd):    res(1, 1) = "results"
        res(0, 2) = fluid.feed:             res(1, 2) = "feed"
        
        If show_log Then
            log_str = log_.get_str_safe
        Else
            log_str = "[""set show_log=1 in param to show calc log""]"
        End If
        res(0, 3) = log_str:                res(1, 2) = "log"
        
        array_out = res
End Function
Public Function get_result_dict(Optional show_log As Boolean = False) As Dictionary
' подготовка массива для вывода в Excel
' num_points - количество точек в выходных массивах для вывода
    Dim resd As New Dictionary
    
    On Error Resume Next
        resd.Add "p_intake_atma", Round(p_in_atma, 3)
        resd.Add "p_out_atma", Round(p_out_atma, 3)
        resd.Add "t_choke_C", t_choke_C
        resd.Add "calibr_fr", calibr_fr
        resd.Add "q_liq_sm3day", Round(fluid.q_liq_sm3day, 3)
        resd.Add "q_gas_sm3day", Round(fluid.q_gas_sm3day, 3)
        resd.Add "q_gas_free_sm3day", Round(fluid.q_gas_free_sm3day, 3)
        resd.Add "rp_m3m3", Round(fluid.rp_m3m3, 3)
        resd.Add "fw_perc", Round(fluid.fw_perc, 3)
        resd.Add "t_choke_throat_C", Round(t_choke_throat_C, 3)
        resd.Add "sonic_vel_msec", Round(sonic_vel_msec, 3)
        resd.Add "q_liq_max_sm3day", Round(q_liq_max_sm3day, 3)
        If show_log Then
            resd.Add "log", log_.get_str_safe()
        End If
        Set get_result_dict = resd
End Function
Public Function get_result_array(Optional ByVal num_value As Integer = 1, _
                                 Optional show_log As Boolean = False)
' подготовка массива для вывода в Excel
' выводится минимальный набор параметров, с которым можно работать
' num_value - номер значения выводимого в первой ячейке
Const nv = 10  ' output array dimension (number of columns)
    Dim res(0 To 1, 0 To nv) As Variant
    Dim i As Integer
    
    On Error Resume Next
        res(0, 1) = Round(p_in_atma, 3):            res(1, 1) = "p_intake_atma"
        res(0, 2) = Round(p_out_atma, 3):           res(1, 2) = "p_out_atma"
        res(0, 3) = Round(fluid.q_liq_sm3day, 3):   res(1, 3) = "q_liq_sm3day"
        res(0, 4) = t_choke_C:                      res(1, 4) = "t_choke_C"
        res(0, 5) = Round(t_choke_throat_C, 3):     res(1, 5) = "t_choke_throat_C"
        res(0, 6) = calibr_fr:                    res(1, 6) = "calibr_fr"
        res(0, 7) = Round(sonic_vel_msec, 3):       res(1, 7) = "sonic_vel_msec"
        res(0, 8) = Round(q_liq_max_sm3day, 3):     res(1, 8) = "q_liq_max_sm3day"
        res(0, 9) = Round(p_crit_atma, 3):     res(1, 9) = "p_crit_atma"
        res(0, 10) = log_.get_str_safe(show_log):     res(1, 10) = "log"
        res(0, 0) = res(0, num_value):         res(1, 0) = res(1, num_value)
        
        get_result_array = res
End Function

